//package test.sym;

import code.src.Complex;
import org.apache.commons.lang3.builder.EqualsBuilder;
import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

public class ComplexSymflowerTest {
	@Test
	public void Complex1() {
		double r = 0.0D;
		double i = 0.0D;
		Complex expected = new Complex(0.0D, 0.0D);
		Complex actual = new Complex(r, i);

		assertTrue(EqualsBuilder.reflectionEquals(expected, actual, false, null, true));
	}

	@Test
	public void Complex2() {
		Complex expected = new Complex();
		Complex actual = new Complex();

		assertTrue(EqualsBuilder.reflectionEquals(expected, actual, false, null, true));
	}

	@Test
	public void abs3() {
		Complex c = null; // TODO This is a fallback value due to incomplete analysis.
		double expected = 0.0D; // TODO This is a fallback value due to incomplete analysis.
		double actual = c.abs();

		assertEquals(expected, actual, 0.0000001D);
	}

	@Test
	public void add4() {
		Complex c = new Complex(-361475165627717600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0D, 0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004454755667159297D);
		Complex x = new Complex(1084419981230889700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0D, -0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004446062906977816D);
		Complex expected = new Complex(722944815603172100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0D, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000086927601814814D);
		Complex actual = c.add(x);

		assertTrue(EqualsBuilder.reflectionEquals(expected, actual, false, null, true));
	}

	@Test // (expected = java.lang.NullPointerException.class)
	public void add5() {
		Complex c = new Complex
		Complex x = null;
		Complex actual = c.add(x);
	}

	@Test // (expected = java.lang.NullPointerException.class)
	public void multiply6() {
		Complex c = new Complex
		Complex x = null;
		Complex actual = c.multiply(x);
	}

	@Test
	public void polar7() {
		double rho = 0.0D; // TODO This is a fallback value due to incomplete analysis.
		double theta = 0.0D; // TODO This is a fallback value due to incomplete analysis.
		Complex expected = null; // TODO This is a fallback value due to incomplete analysis.
		Complex actual = Complex.polar(rho, theta);

		assertTrue(EqualsBuilder.reflectionEquals(expected, actual, false, null, true));
	}

	@Test // (expected = java.lang.NullPointerException.class)
	public void sub8() {
		Complex c = new Complex
		Complex x = null;
		Complex actual = c.sub(x);
	}

	@Test
	public void sub9() {
		Complex c = new Complex(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010309219012925442D, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014D);
		Complex x = new Complex(0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012110963693024684D, Double.NEGATIVE_INFINITY);
		Complex expected = new Complex(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009098122643622973D, Double.POSITIVE_INFINITY);
		Complex actual = c.sub(x);

		assertTrue(EqualsBuilder.reflectionEquals(expected, actual, false, null, true));
	}

	@Test
	public void toString10() {
		Complex c = null; // TODO This is a fallback value due to incomplete analysis.
		String expected = null; // TODO This is a fallback value due to incomplete analysis.
		String actual = c.toString();

		assertEquals(expected, actual);
	}
}
