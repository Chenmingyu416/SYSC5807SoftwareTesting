import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        code.src.Complex complex2 = code.src.Complex.polar((double) (short) 10, (double) 1.0f);
        double double3 = complex2.abs();
        double double4 = complex2.real;
        double double5 = complex2.imaginary;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 5.403023058681398d + "'", double4 == 5.403023058681398d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 8.414709848078965d + "'", double5 == 8.414709848078965d);
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        code.src.Complex complex2 = code.src.Complex.polar((double) (short) -1, 52.0d);
        code.src.Complex complex5 = code.src.Complex.polar((-317.11773840932915d), (double) (-1.0f));
        code.src.Complex complex6 = new code.src.Complex();
        complex6.real = 1L;
        code.src.Complex complex11 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex14 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex15 = complex11.multiply(complex14);
        java.lang.String str16 = complex11.toString();
        code.src.Complex complex19 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex22 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex23 = complex19.multiply(complex22);
        code.src.Complex complex24 = complex11.add(complex23);
        code.src.Complex complex27 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex30 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex31 = complex27.multiply(complex30);
        java.lang.String str32 = complex27.toString();
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        code.src.Complex complex40 = complex27.add(complex39);
        code.src.Complex complex41 = complex24.add(complex40);
        code.src.Complex complex42 = complex6.add(complex41);
        double double43 = complex42.real;
        code.src.Complex complex46 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex49 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex50 = complex46.multiply(complex49);
        code.src.Complex complex51 = complex42.sub(complex49);
        double double52 = complex42.imaginary;
        code.src.Complex complex53 = complex5.sub(complex42);
        code.src.Complex complex56 = new code.src.Complex((double) (short) 0, (double) ' ');
        code.src.Complex complex59 = new code.src.Complex((double) 10L, (double) '#');
        double double60 = complex59.imaginary;
        code.src.Complex complex61 = complex56.multiply(complex59);
        code.src.Complex complex62 = complex53.multiply(complex59);
        code.src.Complex complex65 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex68 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex69 = complex65.multiply(complex68);
        java.lang.String str70 = complex65.toString();
        code.src.Complex complex73 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex76 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex77 = complex73.multiply(complex76);
        code.src.Complex complex78 = complex65.add(complex77);
        complex65.imaginary = (-1.0f);
        double double81 = complex65.real;
        double double82 = complex65.real;
        complex65.imaginary = 141.4213562373095d;
        code.src.Complex complex87 = new code.src.Complex((double) (byte) 1, (double) (-1.0f));
        complex87.imaginary = (byte) 1;
        code.src.Complex complex90 = complex65.multiply(complex87);
        code.src.Complex complex91 = complex62.sub(complex90);
        code.src.Complex complex94 = new code.src.Complex((double) 10L, 0.0d);
        java.lang.String str95 = complex94.toString();
        code.src.Complex complex96 = complex91.multiply(complex94);
        code.src.Complex complex97 = complex2.sub(complex96);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(10.0,0.0)" + "'", str16, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(10.0,0.0)" + "'", str32, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 582.9143981028653d + "'", double43 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 875.1298242002123d + "'", double52 == 875.1298242002123d);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 35.0d + "'", double60 == 35.0d);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(10.0,0.0)" + "'", str70, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 10.0d + "'", double81 == 10.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 10.0d + "'", double82 == 10.0d);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "(10.0,0.0)" + "'", str95, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex96);
        org.junit.Assert.assertNotNull(complex97);
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        code.src.Complex complex2 = code.src.Complex.polar((double) 0.0f, 36.40054944640259d);
        double double3 = complex2.real;
        java.lang.String str4 = complex2.toString();
        code.src.Complex complex7 = code.src.Complex.polar(290.95719905143267d, (double) 1.0f);
        code.src.Complex complex10 = new code.src.Complex((double) (byte) 100, 437.56491210010614d);
        code.src.Complex complex11 = new code.src.Complex();
        complex11.real = 1L;
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        java.lang.String str21 = complex16.toString();
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        code.src.Complex complex29 = complex16.add(complex28);
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        java.lang.String str37 = complex32.toString();
        code.src.Complex complex40 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex43 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex44 = complex40.multiply(complex43);
        code.src.Complex complex45 = complex32.add(complex44);
        code.src.Complex complex46 = complex29.add(complex45);
        code.src.Complex complex47 = complex11.add(complex46);
        double double48 = complex47.real;
        code.src.Complex complex51 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex54 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex55 = complex51.multiply(complex54);
        code.src.Complex complex56 = complex47.sub(complex54);
        code.src.Complex complex59 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex60 = complex54.add(complex59);
        code.src.Complex complex61 = complex10.add(complex59);
        code.src.Complex complex62 = complex7.multiply(complex59);
        complex59.real = 100;
        double double65 = complex59.imaginary;
        code.src.Complex complex66 = complex2.add(complex59);
        double double67 = complex66.abs();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(0.0,-0.0)" + "'", str4, "(0.0,-0.0)");
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(10.0,0.0)" + "'", str21, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(10.0,0.0)" + "'", str37, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 582.9143981028653d + "'", double48 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 43.756491210010616d + "'", double65 == 43.756491210010616d);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 109.15415943981125d + "'", double67 == 109.15415943981125d);
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        code.src.Complex complex9 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex12 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex13 = complex9.multiply(complex12);
        java.lang.String str14 = complex9.toString();
        code.src.Complex complex17 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex20 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex21 = complex17.multiply(complex20);
        code.src.Complex complex22 = complex9.add(complex21);
        code.src.Complex complex25 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex28 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex29 = complex25.multiply(complex28);
        java.lang.String str30 = complex25.toString();
        code.src.Complex complex33 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex36 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex37 = complex33.multiply(complex36);
        code.src.Complex complex38 = complex25.add(complex37);
        code.src.Complex complex39 = complex22.add(complex38);
        code.src.Complex complex42 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex45 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex46 = complex42.multiply(complex45);
        code.src.Complex complex47 = complex22.sub(complex42);
        code.src.Complex complex48 = complex5.add(complex47);
        double double49 = complex48.abs();
        code.src.Complex complex50 = new code.src.Complex();
        complex50.real = 1L;
        code.src.Complex complex55 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex58 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex59 = complex55.multiply(complex58);
        java.lang.String str60 = complex55.toString();
        code.src.Complex complex63 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex66 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex67 = complex63.multiply(complex66);
        code.src.Complex complex68 = complex55.add(complex67);
        code.src.Complex complex71 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex74 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex75 = complex71.multiply(complex74);
        java.lang.String str76 = complex71.toString();
        code.src.Complex complex79 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex82 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex83 = complex79.multiply(complex82);
        code.src.Complex complex84 = complex71.add(complex83);
        code.src.Complex complex85 = complex68.add(complex84);
        code.src.Complex complex86 = complex50.add(complex85);
        code.src.Complex complex87 = complex48.sub(complex85);
        double double88 = complex87.real;
        double double89 = complex87.imaginary;
        double double90 = complex87.imaginary;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(10.0,0.0)" + "'", str14, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(10.0,0.0)" + "'", str30, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 572.0d + "'", double49 == 572.0d);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(10.0,0.0)" + "'", str60, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "(10.0,0.0)" + "'", str76, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + (-272.8614791462894d) + "'", double88 == (-272.8614791462894d));
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + (-393.80842089009553d) + "'", double89 == (-393.80842089009553d));
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-393.80842089009553d) + "'", double90 == (-393.80842089009553d));
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        code.src.Complex complex2 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex2.imaginary = (short) 0;
        complex2.imaginary = 100.0f;
        code.src.Complex complex9 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str10 = complex9.toString();
        code.src.Complex complex13 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        code.src.Complex complex14 = complex9.sub(complex13);
        code.src.Complex complex15 = complex2.multiply(complex14);
        complex2.real = 97.0d;
        complex2.imaginary = 290.9589175121722d;
        complex2.imaginary = 112.71202242884297d;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(100.0,10.0)" + "'", str10, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 0, (double) ' ');
        code.src.Complex complex5 = new code.src.Complex((double) 10L, (double) '#');
        double double6 = complex5.imaginary;
        code.src.Complex complex7 = complex2.multiply(complex5);
        double double8 = complex7.imaginary;
        code.src.Complex complex11 = code.src.Complex.polar(291.13071236105446d, (-393.80842089009553d));
        code.src.Complex complex12 = complex7.add(complex11);
        code.src.Complex complex15 = new code.src.Complex((double) (short) 0, (double) ' ');
        code.src.Complex complex16 = new code.src.Complex();
        complex16.real = 1L;
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex37 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex40 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex41 = complex37.multiply(complex40);
        java.lang.String str42 = complex37.toString();
        code.src.Complex complex45 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex45.multiply(complex48);
        code.src.Complex complex50 = complex37.add(complex49);
        code.src.Complex complex51 = complex34.add(complex50);
        code.src.Complex complex52 = complex16.add(complex51);
        code.src.Complex complex53 = complex15.add(complex51);
        code.src.Complex complex56 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex59 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex60 = complex56.multiply(complex59);
        java.lang.String str61 = complex56.toString();
        code.src.Complex complex64 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex67 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex68 = complex64.multiply(complex67);
        code.src.Complex complex69 = complex56.add(complex68);
        code.src.Complex complex72 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex75 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex76 = complex72.multiply(complex75);
        java.lang.String str77 = complex72.toString();
        code.src.Complex complex80 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex83 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex84 = complex80.multiply(complex83);
        code.src.Complex complex85 = complex72.add(complex84);
        code.src.Complex complex86 = complex69.add(complex85);
        code.src.Complex complex87 = new code.src.Complex();
        code.src.Complex complex88 = complex86.add(complex87);
        code.src.Complex complex89 = complex53.add(complex87);
        complex53.imaginary = (-1);
        code.src.Complex complex94 = new code.src.Complex(10.0d, 875.1298242002123d);
        code.src.Complex complex95 = complex53.sub(complex94);
        code.src.Complex complex96 = complex7.add(complex53);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 320.0d + "'", double8 == 320.0d);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(10.0,0.0)" + "'", str42, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(10.0,0.0)" + "'", str61, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(10.0,0.0)" + "'", str77, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex95);
        org.junit.Assert.assertNotNull(complex96);
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 907.1298242002123d;
        complex0.imaginary = 52.0d;
        double double5 = complex0.real;
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 907.1298242002123d + "'", double5 == 907.1298242002123d);
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 0, (double) ' ');
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        code.src.Complex complex40 = complex2.add(complex38);
        code.src.Complex complex43 = new code.src.Complex(28.09571990514327d, 907.1298242002123d);
        code.src.Complex complex46 = code.src.Complex.polar((double) (byte) 10, (double) (short) 0);
        code.src.Complex complex47 = complex43.multiply(complex46);
        code.src.Complex complex48 = complex2.add(complex43);
        complex2.real = 10.04987562112089d;
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        code.src.Complex complex2 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        code.src.Complex complex5 = new code.src.Complex(290.95719905143267d, (-213613.9212426372d));
        code.src.Complex complex6 = complex2.add(complex5);
        code.src.Complex complex9 = new code.src.Complex((double) 100, (double) 10.0f);
        complex9.real = (byte) 1;
        complex9.imaginary = (short) 100;
        code.src.Complex complex14 = new code.src.Complex();
        complex14.real = 1L;
        code.src.Complex complex19 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex22 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex23 = complex19.multiply(complex22);
        java.lang.String str24 = complex19.toString();
        code.src.Complex complex27 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex30 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex31 = complex27.multiply(complex30);
        code.src.Complex complex32 = complex19.add(complex31);
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        java.lang.String str40 = complex35.toString();
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        code.src.Complex complex48 = complex35.add(complex47);
        code.src.Complex complex49 = complex32.add(complex48);
        code.src.Complex complex50 = complex14.add(complex49);
        double double51 = complex14.imaginary;
        double double52 = complex14.imaginary;
        java.lang.String str53 = complex14.toString();
        code.src.Complex complex54 = complex9.sub(complex14);
        code.src.Complex complex57 = new code.src.Complex((double) (byte) 100, (double) 'a');
        code.src.Complex complex60 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex63 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex64 = complex60.multiply(complex63);
        double double65 = complex63.imaginary;
        java.lang.String str66 = complex63.toString();
        code.src.Complex complex67 = complex57.sub(complex63);
        code.src.Complex complex70 = new code.src.Complex((double) 100, (double) 10.0f);
        complex70.real = (byte) 1;
        code.src.Complex complex73 = complex63.multiply(complex70);
        code.src.Complex complex74 = complex54.sub(complex73);
        code.src.Complex complex75 = complex6.sub(complex74);
        double double76 = complex6.real;
        double double77 = complex6.abs();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(10.0,0.0)" + "'", str24, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(10.0,0.0)" + "'", str40, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(1.0,0.0)" + "'", str53, "(1.0,0.0)");
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 43.756491210010616d + "'", double65 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str66, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + (-198.14967628541848d) + "'", double76 == (-198.14967628541848d));
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 213931.13074726702d + "'", double77 == 213931.13074726702d);
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 100, 43.756491210010616d);
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        double double40 = complex39.real;
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        code.src.Complex complex48 = complex39.sub(complex46);
        code.src.Complex complex49 = complex2.add(complex46);
        code.src.Complex complex52 = new code.src.Complex(43.756491210010616d, 0.0d);
        complex52.imaginary = 58.01650108462993d;
        code.src.Complex complex55 = complex2.sub(complex52);
        java.lang.Class<?> wildcardClass56 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 582.9143981028653d + "'", double40 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        double double7 = complex5.imaginary;
        java.lang.String str8 = complex5.toString();
        code.src.Complex complex11 = new code.src.Complex(100.0d, (-1.0d));
        double double12 = complex11.abs();
        code.src.Complex complex13 = complex5.sub(complex11);
        java.lang.String str14 = complex5.toString();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 43.756491210010616d + "'", double7 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str8, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.00499987500625d + "'", double12 == 100.00499987500625d);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str14, "(28.09571990514327,43.756491210010616)");
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        code.src.Complex complex2 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        double double3 = complex2.abs();
        code.src.Complex complex6 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str7 = complex6.toString();
        code.src.Complex complex8 = complex2.multiply(complex6);
        complex6.real = 35.0d;
        code.src.Complex complex11 = new code.src.Complex();
        complex11.real = 1L;
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        java.lang.String str21 = complex16.toString();
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        code.src.Complex complex29 = complex16.add(complex28);
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        java.lang.String str37 = complex32.toString();
        code.src.Complex complex40 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex43 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex44 = complex40.multiply(complex43);
        code.src.Complex complex45 = complex32.add(complex44);
        code.src.Complex complex46 = complex29.add(complex45);
        code.src.Complex complex47 = complex11.add(complex46);
        double double48 = complex47.real;
        code.src.Complex complex51 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex54 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex55 = complex51.multiply(complex54);
        code.src.Complex complex56 = complex47.sub(complex54);
        code.src.Complex complex59 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex60 = complex54.add(complex59);
        code.src.Complex complex61 = complex6.multiply(complex60);
        complex6.real = 663.590879631022d;
        complex6.imaginary = 43.756491210010616d;
        complex6.imaginary = 906.2883532154044d;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(100.0,10.0)" + "'", str7, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(10.0,0.0)" + "'", str21, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(10.0,0.0)" + "'", str37, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 582.9143981028653d + "'", double48 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0513");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        double double33 = complex15.real;
        double double34 = complex15.real;
        code.src.Complex complex37 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex40 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex41 = complex37.multiply(complex40);
        java.lang.String str42 = complex37.toString();
        code.src.Complex complex45 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex45.multiply(complex48);
        code.src.Complex complex50 = complex37.add(complex49);
        code.src.Complex complex53 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex56 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex57 = complex53.multiply(complex56);
        java.lang.String str58 = complex53.toString();
        code.src.Complex complex61 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex64 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex65 = complex61.multiply(complex64);
        code.src.Complex complex66 = complex53.add(complex65);
        code.src.Complex complex67 = complex50.add(complex66);
        code.src.Complex complex68 = complex15.sub(complex50);
        double double69 = complex50.real;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 290.95719905143267d + "'", double33 == 290.95719905143267d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 290.95719905143267d + "'", double34 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(10.0,0.0)" + "'", str42, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(10.0,0.0)" + "'", str58, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 290.95719905143267d + "'", double69 == 290.95719905143267d);
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 10, (-317.11773840932915d));
        code.src.Complex complex5 = code.src.Complex.polar(28.09571990514327d, (double) 0);
        code.src.Complex complex6 = new code.src.Complex();
        complex6.real = 1L;
        code.src.Complex complex11 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex14 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex15 = complex11.multiply(complex14);
        java.lang.String str16 = complex11.toString();
        code.src.Complex complex19 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex22 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex23 = complex19.multiply(complex22);
        code.src.Complex complex24 = complex11.add(complex23);
        code.src.Complex complex27 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex30 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex31 = complex27.multiply(complex30);
        java.lang.String str32 = complex27.toString();
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        code.src.Complex complex40 = complex27.add(complex39);
        code.src.Complex complex41 = complex24.add(complex40);
        code.src.Complex complex42 = complex6.add(complex41);
        double double43 = complex42.real;
        code.src.Complex complex44 = complex5.add(complex42);
        code.src.Complex complex45 = complex2.multiply(complex44);
        java.lang.Class<?> wildcardClass46 = complex44.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(10.0,0.0)" + "'", str16, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(10.0,0.0)" + "'", str32, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 582.9143981028653d + "'", double43 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        code.src.Complex complex2 = code.src.Complex.polar(589.1068753368511d, (-0.5440211108893698d));
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 0, (double) ' ');
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        code.src.Complex complex40 = complex2.add(complex38);
        code.src.Complex complex43 = new code.src.Complex(28.09571990514327d, 907.1298242002123d);
        code.src.Complex complex46 = code.src.Complex.polar((double) (byte) 10, (double) (short) 0);
        code.src.Complex complex47 = complex43.multiply(complex46);
        code.src.Complex complex48 = complex2.add(complex43);
        complex2.real = '4';
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        code.src.Complex complex2 = code.src.Complex.polar(148.66068747318505d, (-272.8614791462894d));
        double double3 = complex2.abs();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 148.66068747318505d + "'", double3 == 148.66068747318505d);
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 100, (double) (-1));
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex38 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex41 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex42 = complex38.multiply(complex41);
        code.src.Complex complex43 = complex18.sub(complex38);
        double double44 = complex43.imaginary;
        code.src.Complex complex45 = new code.src.Complex();
        complex45.real = 1L;
        code.src.Complex complex50 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex53 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex54 = complex50.multiply(complex53);
        java.lang.String str55 = complex50.toString();
        code.src.Complex complex58 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex61 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex62 = complex58.multiply(complex61);
        code.src.Complex complex63 = complex50.add(complex62);
        code.src.Complex complex66 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex69 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex70 = complex66.multiply(complex69);
        java.lang.String str71 = complex66.toString();
        code.src.Complex complex74 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex77 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex78 = complex74.multiply(complex77);
        code.src.Complex complex79 = complex66.add(complex78);
        code.src.Complex complex80 = complex63.add(complex79);
        code.src.Complex complex81 = complex45.add(complex80);
        double double82 = complex81.real;
        code.src.Complex complex85 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex88 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex89 = complex85.multiply(complex88);
        code.src.Complex complex90 = complex81.sub(complex88);
        complex90.real = 0.0d;
        code.src.Complex complex93 = complex43.sub(complex90);
        code.src.Complex complex94 = complex2.sub(complex43);
        double double95 = complex94.imaginary;
        double double96 = complex94.real;
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 437.56491210010614d + "'", double44 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(10.0,0.0)" + "'", str55, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(10.0,0.0)" + "'", str71, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 582.9143981028653d + "'", double82 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertNotNull(complex94);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + (-438.56491210010614d) + "'", double95 == (-438.56491210010614d));
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + (-180.95719905143267d) + "'", double96 == (-180.95719905143267d));
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        complex2.imaginary = 100L;
        code.src.Complex complex7 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex10 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex11 = complex7.multiply(complex10);
        code.src.Complex complex14 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex17 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex18 = complex14.multiply(complex17);
        java.lang.String str19 = complex14.toString();
        code.src.Complex complex22 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex25 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex26 = complex22.multiply(complex25);
        code.src.Complex complex27 = complex14.add(complex26);
        code.src.Complex complex30 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex33 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex34 = complex30.multiply(complex33);
        java.lang.String str35 = complex30.toString();
        code.src.Complex complex38 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex41 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex42 = complex38.multiply(complex41);
        code.src.Complex complex43 = complex30.add(complex42);
        code.src.Complex complex44 = complex27.add(complex43);
        code.src.Complex complex47 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex50 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex51 = complex47.multiply(complex50);
        code.src.Complex complex52 = complex27.sub(complex47);
        code.src.Complex complex53 = complex10.add(complex52);
        code.src.Complex complex54 = complex2.multiply(complex52);
        code.src.Complex complex57 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double58 = complex57.abs();
        double double59 = complex57.real;
        code.src.Complex complex62 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex65 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex66 = complex62.multiply(complex65);
        java.lang.String str67 = complex62.toString();
        code.src.Complex complex70 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex73 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex74 = complex70.multiply(complex73);
        code.src.Complex complex75 = complex62.add(complex74);
        code.src.Complex complex78 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex81 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex82 = complex78.multiply(complex81);
        java.lang.String str83 = complex78.toString();
        code.src.Complex complex86 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex89 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex90 = complex86.multiply(complex89);
        code.src.Complex complex91 = complex78.add(complex90);
        code.src.Complex complex92 = complex75.add(complex91);
        java.lang.String str93 = complex75.toString();
        double double94 = complex75.abs();
        double double95 = complex75.real;
        code.src.Complex complex96 = complex57.sub(complex75);
        code.src.Complex complex97 = complex2.add(complex57);
        complex97.imaginary = 528.7686600293723d;
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(10.0,0.0)" + "'", str19, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(10.0,0.0)" + "'", str35, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 52.0d + "'", double58 == 52.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 28.09571990514327d + "'", double59 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(10.0,0.0)" + "'", str67, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(10.0,0.0)" + "'", str83, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str93, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 525.4704025737593d + "'", double94 == 525.4704025737593d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 290.95719905143267d + "'", double95 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex96);
        org.junit.Assert.assertNotNull(complex97);
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        code.src.Complex complex2 = code.src.Complex.polar((-906.2883532154044d), 520.0d);
        double double3 = complex2.imaginary;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 904.2902405342309d + "'", double3 == 904.2902405342309d);
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        double double37 = complex0.imaginary;
        double double38 = complex0.imaginary;
        code.src.Complex complex41 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex44 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex45 = complex41.multiply(complex44);
        java.lang.String str46 = complex41.toString();
        code.src.Complex complex49 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex52 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex53 = complex49.multiply(complex52);
        code.src.Complex complex54 = complex41.add(complex53);
        code.src.Complex complex57 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex60 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex61 = complex57.multiply(complex60);
        java.lang.String str62 = complex57.toString();
        code.src.Complex complex65 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex68 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex69 = complex65.multiply(complex68);
        code.src.Complex complex70 = complex57.add(complex69);
        code.src.Complex complex71 = complex54.add(complex70);
        code.src.Complex complex72 = new code.src.Complex();
        code.src.Complex complex73 = complex71.add(complex72);
        code.src.Complex complex76 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex79 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex80 = complex76.multiply(complex79);
        double double81 = complex79.imaginary;
        java.lang.String str82 = complex79.toString();
        code.src.Complex complex85 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double86 = complex85.abs();
        double double87 = complex85.real;
        code.src.Complex complex88 = complex79.sub(complex85);
        code.src.Complex complex89 = complex72.sub(complex79);
        code.src.Complex complex90 = complex0.add(complex79);
        complex90.imaginary = 100.4987562112089d;
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(10.0,0.0)" + "'", str46, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(10.0,0.0)" + "'", str62, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 43.756491210010616d + "'", double81 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str82, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 52.0d + "'", double86 == 52.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 28.09571990514327d + "'", double87 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        code.src.Complex complex2 = code.src.Complex.polar((double) '#', 280.95719905143267d);
        complex2.real = 8101.177047836208d;
        complex2.imaginary = 708268.0426747819d;
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        code.src.Complex complex2 = code.src.Complex.polar((-118.66263362210499d), 10.0d);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        code.src.Complex complex39 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex42 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex43 = complex39.multiply(complex42);
        java.lang.String str44 = complex39.toString();
        code.src.Complex complex47 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex50 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex51 = complex47.multiply(complex50);
        code.src.Complex complex52 = complex39.add(complex51);
        code.src.Complex complex55 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex58 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex59 = complex55.multiply(complex58);
        java.lang.String str60 = complex55.toString();
        code.src.Complex complex63 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex66 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex67 = complex63.multiply(complex66);
        code.src.Complex complex68 = complex55.add(complex67);
        code.src.Complex complex69 = complex52.add(complex68);
        code.src.Complex complex72 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex75 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex76 = complex72.multiply(complex75);
        code.src.Complex complex77 = complex52.sub(complex72);
        java.lang.String str78 = complex52.toString();
        code.src.Complex complex79 = complex35.multiply(complex52);
        java.lang.Class<?> wildcardClass80 = complex52.getClass();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(10.0,0.0)" + "'", str44, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(10.0,0.0)" + "'", str60, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str78, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 100, 43.756491210010616d);
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        double double40 = complex39.real;
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        code.src.Complex complex48 = complex39.sub(complex46);
        code.src.Complex complex49 = complex2.add(complex46);
        code.src.Complex complex52 = new code.src.Complex((double) (byte) 100, (double) 'a');
        code.src.Complex complex55 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex58 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex59 = complex55.multiply(complex58);
        double double60 = complex58.imaginary;
        java.lang.String str61 = complex58.toString();
        code.src.Complex complex62 = complex52.sub(complex58);
        code.src.Complex complex63 = complex2.multiply(complex62);
        double double64 = complex63.abs();
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 582.9143981028653d + "'", double40 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 43.756491210010616d + "'", double60 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str61, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 9766.154297888374d + "'", double64 == 9766.154297888374d);
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        code.src.Complex complex2 = code.src.Complex.polar((double) 10.0f, 393.80842089009553d);
        code.src.Complex complex5 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex5.imaginary = (short) 0;
        complex5.imaginary = 100.0f;
        code.src.Complex complex12 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str13 = complex12.toString();
        code.src.Complex complex16 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        code.src.Complex complex17 = complex12.sub(complex16);
        code.src.Complex complex18 = complex5.multiply(complex17);
        code.src.Complex complex19 = new code.src.Complex();
        code.src.Complex complex22 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex25 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex26 = complex22.multiply(complex25);
        java.lang.String str27 = complex22.toString();
        code.src.Complex complex30 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex33 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex34 = complex30.multiply(complex33);
        code.src.Complex complex35 = complex22.add(complex34);
        code.src.Complex complex38 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex41 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex42 = complex38.multiply(complex41);
        java.lang.String str43 = complex38.toString();
        code.src.Complex complex46 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex49 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex50 = complex46.multiply(complex49);
        code.src.Complex complex51 = complex38.add(complex50);
        code.src.Complex complex52 = complex35.add(complex51);
        double double53 = complex52.real;
        code.src.Complex complex54 = complex19.multiply(complex52);
        code.src.Complex complex57 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex60 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex61 = complex57.multiply(complex60);
        java.lang.String str62 = complex57.toString();
        code.src.Complex complex65 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex68 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex69 = complex65.multiply(complex68);
        code.src.Complex complex70 = complex57.add(complex69);
        code.src.Complex complex73 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex76 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex77 = complex73.multiply(complex76);
        java.lang.String str78 = complex73.toString();
        code.src.Complex complex81 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex84 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex85 = complex81.multiply(complex84);
        code.src.Complex complex86 = complex73.add(complex85);
        code.src.Complex complex87 = complex70.add(complex86);
        java.lang.String str88 = complex70.toString();
        double double89 = complex70.abs();
        code.src.Complex complex90 = complex19.multiply(complex70);
        code.src.Complex complex91 = complex18.add(complex90);
        complex18.real = (-198.14967628541848d);
        double double94 = complex18.abs();
        code.src.Complex complex95 = complex2.multiply(complex18);
        complex18.imaginary = (-118.66263362210499d);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(100.0,10.0)" + "'", str13, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(10.0,0.0)" + "'", str27, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(10.0,0.0)" + "'", str43, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 581.9143981028653d + "'", double53 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(10.0,0.0)" + "'", str62, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(10.0,0.0)" + "'", str78, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str88, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 525.4704025737593d + "'", double89 == 525.4704025737593d);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 58911.02077697936d + "'", double94 == 58911.02077697936d);
        org.junit.Assert.assertNotNull(complex95);
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        code.src.Complex complex2 = code.src.Complex.polar(589.1068753368511d, (double) (byte) -1);
        code.src.Complex complex5 = new code.src.Complex((-438.0712777412159d), 58910.68753368511d);
        code.src.Complex complex6 = complex2.add(complex5);
        double double7 = complex2.imaginary;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-495.7163425468028d) + "'", double7 == (-495.7163425468028d));
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 100, 43.756491210010616d);
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        double double40 = complex39.real;
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        code.src.Complex complex48 = complex39.sub(complex46);
        code.src.Complex complex49 = complex2.add(complex46);
        code.src.Complex complex52 = new code.src.Complex((double) (short) 1, 290.95719905143267d);
        java.lang.String str53 = complex52.toString();
        code.src.Complex complex56 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double57 = complex56.abs();
        double double58 = complex56.real;
        code.src.Complex complex61 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex64 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex65 = complex61.multiply(complex64);
        java.lang.String str66 = complex61.toString();
        code.src.Complex complex69 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex72 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex73 = complex69.multiply(complex72);
        code.src.Complex complex74 = complex61.add(complex73);
        code.src.Complex complex77 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex80 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex81 = complex77.multiply(complex80);
        java.lang.String str82 = complex77.toString();
        code.src.Complex complex85 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex88 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex89 = complex85.multiply(complex88);
        code.src.Complex complex90 = complex77.add(complex89);
        code.src.Complex complex91 = complex74.add(complex90);
        java.lang.String str92 = complex74.toString();
        double double93 = complex74.abs();
        double double94 = complex74.real;
        code.src.Complex complex95 = complex56.sub(complex74);
        code.src.Complex complex96 = complex52.add(complex56);
        code.src.Complex complex97 = complex2.add(complex56);
        java.lang.Class<?> wildcardClass98 = complex97.getClass();
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 582.9143981028653d + "'", double40 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(1.0,290.95719905143267)" + "'", str53, "(1.0,290.95719905143267)");
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 52.0d + "'", double57 == 52.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 28.09571990514327d + "'", double58 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(10.0,0.0)" + "'", str66, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "(10.0,0.0)" + "'", str82, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str92, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 525.4704025737593d + "'", double93 == 525.4704025737593d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 290.95719905143267d + "'", double94 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex95);
        org.junit.Assert.assertNotNull(complex96);
        org.junit.Assert.assertNotNull(complex97);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        code.src.Complex complex2 = new code.src.Complex(10.0d, (-906.2883532154044d));
        double double3 = complex2.real;
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        complex2.real = (byte) 1;
        complex2.imaginary = (short) 100;
        double double7 = complex2.imaginary;
        complex2.imaginary = (byte) 100;
        java.lang.Class<?> wildcardClass10 = complex2.getClass();
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        code.src.Complex complex2 = code.src.Complex.polar(831.3733329902017d, 291.13071236105446d);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        code.src.Complex complex2 = new code.src.Complex((-906.2883532154044d), 87.48639198643185d);
        code.src.Complex complex5 = code.src.Complex.polar(1018.3729221500101d, 0.0d);
        double double6 = complex5.abs();
        code.src.Complex complex7 = complex2.sub(complex5);
        double double8 = complex7.abs();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1018.3729221500101d + "'", double6 == 1018.3729221500101d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1926.648617074226d + "'", double8 == 1926.648617074226d);
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        code.src.Complex complex2 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        double double3 = complex2.abs();
        code.src.Complex complex6 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str7 = complex6.toString();
        code.src.Complex complex8 = complex2.multiply(complex6);
        double double9 = complex6.real;
        code.src.Complex complex12 = new code.src.Complex((double) 100, (double) 10.0f);
        complex12.real = (byte) 1;
        complex12.imaginary = (short) 100;
        code.src.Complex complex19 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex22 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex23 = complex19.multiply(complex22);
        java.lang.String str24 = complex19.toString();
        code.src.Complex complex27 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex30 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex31 = complex27.multiply(complex30);
        code.src.Complex complex32 = complex19.add(complex31);
        double double33 = complex32.real;
        code.src.Complex complex36 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex37 = complex32.multiply(complex36);
        code.src.Complex complex38 = complex12.multiply(complex32);
        code.src.Complex complex41 = code.src.Complex.polar((double) ' ', (double) (byte) 100);
        code.src.Complex complex42 = complex32.multiply(complex41);
        code.src.Complex complex43 = complex6.multiply(complex42);
        code.src.Complex complex46 = new code.src.Complex(10.0d, (double) 10L);
        complex46.real = 290.95719905143267d;
        code.src.Complex complex49 = complex42.sub(complex46);
        code.src.Complex complex50 = null;
        // The following exception was thrown during execution in test generation
        try {
            code.src.Complex complex51 = complex49.add(complex50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(100.0,10.0)" + "'", str7, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(10.0,0.0)" + "'", str24, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 290.95719905143267d + "'", double33 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex49);
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        code.src.Complex complex33 = new code.src.Complex();
        code.src.Complex complex34 = complex32.add(complex33);
        code.src.Complex complex37 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex40 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex41 = complex37.multiply(complex40);
        double double42 = complex40.imaginary;
        java.lang.String str43 = complex40.toString();
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double47 = complex46.abs();
        double double48 = complex46.real;
        code.src.Complex complex49 = complex40.sub(complex46);
        code.src.Complex complex50 = complex33.sub(complex40);
        double double51 = complex50.real;
        double double52 = complex50.real;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 43.756491210010616d + "'", double42 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str43, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 52.0d + "'", double47 == 52.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 28.09571990514327d + "'", double48 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + (-28.09571990514327d) + "'", double51 == (-28.09571990514327d));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-28.09571990514327d) + "'", double52 == (-28.09571990514327d));
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        code.src.Complex complex2 = new code.src.Complex(479.0395796891049d, 509250.64491133287d);
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        code.src.Complex complex2 = new code.src.Complex(290.9589175121722d, (double) 10);
        code.src.Complex complex5 = new code.src.Complex((double) 100, (double) 10.0f);
        complex5.real = (byte) 1;
        complex5.imaginary = (short) 100;
        code.src.Complex complex10 = complex2.add(complex5);
        code.src.Complex complex11 = new code.src.Complex();
        complex11.real = 1L;
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        java.lang.String str21 = complex16.toString();
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        code.src.Complex complex29 = complex16.add(complex28);
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        java.lang.String str37 = complex32.toString();
        code.src.Complex complex40 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex43 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex44 = complex40.multiply(complex43);
        code.src.Complex complex45 = complex32.add(complex44);
        code.src.Complex complex46 = complex29.add(complex45);
        code.src.Complex complex47 = complex11.add(complex46);
        double double48 = complex47.real;
        code.src.Complex complex51 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex54 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex55 = complex51.multiply(complex54);
        code.src.Complex complex56 = complex47.sub(complex54);
        double double57 = complex47.imaginary;
        complex47.real = 100;
        code.src.Complex complex60 = complex2.sub(complex47);
        java.lang.String str61 = complex60.toString();
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(10.0,0.0)" + "'", str21, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(10.0,0.0)" + "'", str37, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 582.9143981028653d + "'", double48 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 875.1298242002123d + "'", double57 == 875.1298242002123d);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(190.9589175121722,-865.1298242002123)" + "'", str61, "(190.9589175121722,-865.1298242002123)");
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        code.src.Complex complex2 = code.src.Complex.polar(100.0d, (-393.80842089009553d));
        java.lang.String str3 = complex2.toString();
        double double4 = complex2.real;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "(-44.52533050340393,89.54046539728643)" + "'", str3, "(-44.52533050340393,89.54046539728643)");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-44.52533050340393d) + "'", double4 == (-44.52533050340393d));
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        code.src.Complex complex40 = complex15.sub(complex35);
        complex35.imaginary = 52.0d;
        complex35.imaginary = 28.09571990514327d;
        complex35.real = 572.0d;
        double double47 = complex35.real;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 572.0d + "'", double47 == 572.0d);
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        code.src.Complex complex2 = code.src.Complex.polar(324.9608082617091d, 511.0653454891018d);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex2.add(complex18);
        code.src.Complex complex39 = code.src.Complex.polar((-317.11773840932915d), (double) (-1.0f));
        code.src.Complex complex40 = complex18.sub(complex39);
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        double double48 = complex47.imaginary;
        code.src.Complex complex49 = complex40.sub(complex47);
        double double50 = complex49.real;
        java.lang.String str51 = complex49.toString();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 437.56491210010614d + "'", double48 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 181.33944529425008d + "'", double50 == 181.33944529425008d);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "(181.33944529425008,-266.8453756393511)" + "'", str51, "(181.33944529425008,-266.8453756393511)");
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        code.src.Complex complex2 = new code.src.Complex(290.95719905143267d, 97.0d);
        java.lang.String str3 = complex2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "(290.95719905143267,97.0)" + "'", str3, "(290.95719905143267,97.0)");
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        java.lang.String str16 = complex2.toString();
        complex2.imaginary = '#';
        double double19 = complex2.abs();
        double double20 = complex2.imaginary;
        double double21 = complex2.imaginary;
        java.lang.Class<?> wildcardClass22 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(10.0,0.0)" + "'", str16, "(10.0,0.0)");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 36.40054944640259d + "'", double19 == 36.40054944640259d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 35.0d + "'", double20 == 35.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 35.0d + "'", double21 == 35.0d);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        code.src.Complex complex2 = code.src.Complex.polar(35.0d, (-509251.64491133287d));
        double double3 = complex2.abs();
        java.lang.Class<?> wildcardClass4 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 35.0d + "'", double3 == 35.0d);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        code.src.Complex complex2 = new code.src.Complex(112.71202242884297d, 279.7722729260128d);
        java.lang.String str3 = complex2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "(112.71202242884297,279.7722729260128)" + "'", str3, "(112.71202242884297,279.7722729260128)");
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        code.src.Complex complex2 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        complex2.real = 582.9143981028653d;
        code.src.Complex complex7 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str8 = complex7.toString();
        code.src.Complex complex11 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        code.src.Complex complex12 = complex7.sub(complex11);
        code.src.Complex complex13 = complex2.sub(complex11);
        double double14 = complex13.real;
        java.lang.Class<?> wildcardClass15 = complex13.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(100.0,10.0)" + "'", str8, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1072.0212734397164d + "'", double14 == 1072.0212734397164d);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        code.src.Complex complex2 = code.src.Complex.polar((double) 10L, 100.0d);
        code.src.Complex complex5 = new code.src.Complex((double) 100, (double) 10.0f);
        complex5.real = (byte) 1;
        complex5.imaginary = (short) 100;
        code.src.Complex complex10 = new code.src.Complex();
        complex10.real = 1L;
        code.src.Complex complex15 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex18 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex19 = complex15.multiply(complex18);
        java.lang.String str20 = complex15.toString();
        code.src.Complex complex23 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex26 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex27 = complex23.multiply(complex26);
        code.src.Complex complex28 = complex15.add(complex27);
        code.src.Complex complex31 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex34 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex35 = complex31.multiply(complex34);
        java.lang.String str36 = complex31.toString();
        code.src.Complex complex39 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex42 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex43 = complex39.multiply(complex42);
        code.src.Complex complex44 = complex31.add(complex43);
        code.src.Complex complex45 = complex28.add(complex44);
        code.src.Complex complex46 = complex10.add(complex45);
        double double47 = complex10.imaginary;
        double double48 = complex10.imaginary;
        java.lang.String str49 = complex10.toString();
        code.src.Complex complex50 = complex5.sub(complex10);
        code.src.Complex complex53 = new code.src.Complex((double) (byte) 100, (double) 'a');
        code.src.Complex complex56 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex59 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex60 = complex56.multiply(complex59);
        double double61 = complex59.imaginary;
        java.lang.String str62 = complex59.toString();
        code.src.Complex complex63 = complex53.sub(complex59);
        code.src.Complex complex66 = new code.src.Complex((double) 100, (double) 10.0f);
        complex66.real = (byte) 1;
        code.src.Complex complex69 = complex59.multiply(complex66);
        code.src.Complex complex70 = complex50.sub(complex69);
        code.src.Complex complex71 = complex2.multiply(complex69);
        double double72 = complex69.abs();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(10.0,0.0)" + "'", str20, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(10.0,0.0)" + "'", str36, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(1.0,0.0)" + "'", str49, "(1.0,0.0)");
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 43.756491210010616d + "'", double61 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str62, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 522.5935322982863d + "'", double72 == 522.5935322982863d);
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        double double37 = complex36.real;
        code.src.Complex complex40 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex43 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex44 = complex40.multiply(complex43);
        code.src.Complex complex45 = complex36.sub(complex43);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex43.add(complex48);
        code.src.Complex complex52 = new code.src.Complex((double) 10L, (double) '#');
        code.src.Complex complex53 = complex48.add(complex52);
        code.src.Complex complex56 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex56.imaginary = (short) 0;
        complex56.imaginary = 100.0f;
        code.src.Complex complex61 = complex48.multiply(complex56);
        double double62 = complex48.imaginary;
        java.lang.Class<?> wildcardClass63 = complex48.getClass();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 582.9143981028653d + "'", double37 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 43.756491210010616d + "'", double62 == 43.756491210010616d);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        code.src.Complex complex9 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex12 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex13 = complex9.multiply(complex12);
        java.lang.String str14 = complex9.toString();
        code.src.Complex complex17 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex20 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex21 = complex17.multiply(complex20);
        code.src.Complex complex22 = complex9.add(complex21);
        code.src.Complex complex25 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex28 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex29 = complex25.multiply(complex28);
        java.lang.String str30 = complex25.toString();
        code.src.Complex complex33 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex36 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex37 = complex33.multiply(complex36);
        code.src.Complex complex38 = complex25.add(complex37);
        code.src.Complex complex39 = complex22.add(complex38);
        code.src.Complex complex42 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex45 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex46 = complex42.multiply(complex45);
        code.src.Complex complex47 = complex22.sub(complex42);
        code.src.Complex complex48 = complex5.add(complex47);
        double double49 = complex48.abs();
        code.src.Complex complex52 = new code.src.Complex(10.0d, (double) 10L);
        code.src.Complex complex55 = code.src.Complex.polar((double) '#', (double) (byte) 100);
        code.src.Complex complex56 = complex52.multiply(complex55);
        code.src.Complex complex57 = complex48.add(complex56);
        code.src.Complex complex60 = code.src.Complex.polar((double) '4', (-1.0d));
        code.src.Complex complex61 = complex56.multiply(complex60);
        java.lang.String str62 = complex61.toString();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(10.0,0.0)" + "'", str14, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(10.0,0.0)" + "'", str30, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 572.0d + "'", double49 == 572.0d);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(18910.304405346767,-17460.824359036505)" + "'", str62, "(18910.304405346767,-17460.824359036505)");
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        code.src.Complex complex2 = new code.src.Complex((-389.10687533685115d), 213623.9212426372d);
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        double double36 = complex18.real;
        double double37 = complex18.real;
        double double38 = complex18.imaginary;
        code.src.Complex complex39 = complex2.multiply(complex18);
        double double40 = complex2.imaginary;
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 290.95719905143267d + "'", double36 == 290.95719905143267d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 290.95719905143267d + "'", double37 == 290.95719905143267d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 437.56491210010614d + "'", double38 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 213623.9212426372d + "'", double40 == 213623.9212426372d);
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        code.src.Complex complex2 = new code.src.Complex(100.00499987500625d, 481.32140331011675d);
        double double3 = complex2.abs();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 491.60074581353115d + "'", double3 == 491.60074581353115d);
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 907.1298242002123d;
        complex3.imaginary = 52.0d;
        code.src.Complex complex8 = complex2.add(complex3);
        complex8.real = 0.0d;
        java.lang.String str11 = complex8.toString();
        double double12 = complex8.abs();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(0.0,52.0)" + "'", str11, "(0.0,52.0)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 52.0d + "'", double12 == 52.0d);
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        code.src.Complex complex2 = code.src.Complex.polar((double) 1L, (double) 100);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.add(complex5);
        code.src.Complex complex9 = new code.src.Complex((double) 100, (double) 10.0f);
        complex9.imaginary = 100L;
        code.src.Complex complex14 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex17 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex18 = complex14.multiply(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex37 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex40 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex41 = complex37.multiply(complex40);
        java.lang.String str42 = complex37.toString();
        code.src.Complex complex45 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex45.multiply(complex48);
        code.src.Complex complex50 = complex37.add(complex49);
        code.src.Complex complex51 = complex34.add(complex50);
        code.src.Complex complex54 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex57 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex58 = complex54.multiply(complex57);
        code.src.Complex complex59 = complex34.sub(complex54);
        code.src.Complex complex60 = complex17.add(complex59);
        code.src.Complex complex61 = complex9.multiply(complex59);
        java.lang.String str62 = complex9.toString();
        code.src.Complex complex63 = complex2.multiply(complex9);
        complex63.imaginary = (-198.14967628541848d);
        double double66 = complex63.abs();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(10.0,0.0)" + "'", str42, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(100.0,100.0)" + "'", str62, "(100.0,100.0)");
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 240.82414161407507d + "'", double66 == 240.82414161407507d);
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        code.src.Complex complex2 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        code.src.Complex complex5 = new code.src.Complex(290.95719905143267d, (-213613.9212426372d));
        code.src.Complex complex6 = complex2.add(complex5);
        code.src.Complex complex9 = code.src.Complex.polar((double) (short) 0, (double) (byte) 10);
        code.src.Complex complex10 = new code.src.Complex();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        java.lang.String str18 = complex13.toString();
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        code.src.Complex complex26 = complex13.add(complex25);
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        java.lang.String str34 = complex29.toString();
        code.src.Complex complex37 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex40 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex41 = complex37.multiply(complex40);
        code.src.Complex complex42 = complex29.add(complex41);
        code.src.Complex complex43 = complex26.add(complex42);
        double double44 = complex43.real;
        code.src.Complex complex45 = complex10.multiply(complex43);
        double double46 = complex43.abs();
        code.src.Complex complex47 = complex9.sub(complex43);
        code.src.Complex complex50 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex50.imaginary = (short) 0;
        complex50.imaginary = 100.0f;
        code.src.Complex complex57 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str58 = complex57.toString();
        code.src.Complex complex61 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        code.src.Complex complex62 = complex57.sub(complex61);
        code.src.Complex complex63 = complex50.multiply(complex62);
        java.lang.String str64 = complex62.toString();
        double double65 = complex62.real;
        code.src.Complex complex66 = complex9.add(complex62);
        complex62.real = 1.0d;
        code.src.Complex complex69 = complex5.multiply(complex62);
        complex5.real = 518.518416496393d;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(10.0,0.0)" + "'", str18, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(10.0,0.0)" + "'", str34, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 581.9143981028653d + "'", double44 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1050.9408051475186d + "'", double46 == 1050.9408051475186d);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(100.0,10.0)" + "'", str58, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(589.1068753368511,327.11773840932915)" + "'", str64, "(589.1068753368511,327.11773840932915)");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 589.1068753368511d + "'", double65 == 589.1068753368511d);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex69);
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        code.src.Complex complex2 = code.src.Complex.polar(1050.9408051475186d, (double) 0L);
        complex2.real = 663.590879631022d;
        code.src.Complex complex7 = new code.src.Complex(213613.9236394847d, (double) 10L);
        code.src.Complex complex8 = complex2.sub(complex7);
        double double9 = complex2.real;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 663.590879631022d + "'", double9 == 663.590879631022d);
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        code.src.Complex complex2 = new code.src.Complex((double) 100.0f, (double) (short) -1);
        double double3 = complex2.abs();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 100.00499987500625d + "'", double3 == 100.00499987500625d);
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        code.src.Complex complex2 = new code.src.Complex(875.8294407044641d, 511.0653454891018d);
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        code.src.Complex complex2 = code.src.Complex.polar(1050.9408051475186d, (double) 0L);
        complex2.real = 663.590879631022d;
        code.src.Complex complex7 = new code.src.Complex(213613.9236394847d, (double) 10L);
        code.src.Complex complex8 = complex2.sub(complex7);
        double double9 = complex7.abs();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 213613.92387355183d + "'", double9 == 213613.92387355183d);
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        double double33 = complex15.real;
        double double34 = complex15.real;
        code.src.Complex complex37 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex40 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex41 = complex37.multiply(complex40);
        java.lang.String str42 = complex37.toString();
        code.src.Complex complex45 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex45.multiply(complex48);
        code.src.Complex complex50 = complex37.add(complex49);
        code.src.Complex complex53 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex56 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex57 = complex53.multiply(complex56);
        java.lang.String str58 = complex53.toString();
        code.src.Complex complex61 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex64 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex65 = complex61.multiply(complex64);
        code.src.Complex complex66 = complex53.add(complex65);
        code.src.Complex complex67 = complex50.add(complex66);
        code.src.Complex complex68 = complex15.sub(complex50);
        complex68.imaginary = 1.0f;
        double double71 = complex68.real;
        double double72 = complex68.real;
        java.lang.Class<?> wildcardClass73 = complex68.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 290.95719905143267d + "'", double33 == 290.95719905143267d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 290.95719905143267d + "'", double34 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(10.0,0.0)" + "'", str42, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(10.0,0.0)" + "'", str58, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        code.src.Complex complex2 = new code.src.Complex(35.0d, 492.8116754934422d);
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        code.src.Complex complex2 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        double double3 = complex2.abs();
        code.src.Complex complex6 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str7 = complex6.toString();
        code.src.Complex complex8 = complex2.multiply(complex6);
        double double9 = complex6.real;
        complex6.imaginary = (-198.14967628541848d);
        code.src.Complex complex14 = code.src.Complex.polar((-489.10687533685115d), 520.0d);
        code.src.Complex complex17 = new code.src.Complex(1.0d, 28.09571990514327d);
        code.src.Complex complex18 = complex14.add(complex17);
        code.src.Complex complex19 = complex6.sub(complex17);
        double double20 = complex17.imaginary;
        code.src.Complex complex21 = new code.src.Complex();
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex40 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex43 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex44 = complex40.multiply(complex43);
        java.lang.String str45 = complex40.toString();
        code.src.Complex complex48 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex51 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex52 = complex48.multiply(complex51);
        code.src.Complex complex53 = complex40.add(complex52);
        code.src.Complex complex54 = complex37.add(complex53);
        double double55 = complex54.real;
        code.src.Complex complex56 = complex21.multiply(complex54);
        code.src.Complex complex59 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex62 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex63 = complex59.multiply(complex62);
        java.lang.String str64 = complex59.toString();
        code.src.Complex complex67 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex70 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex71 = complex67.multiply(complex70);
        code.src.Complex complex72 = complex59.add(complex71);
        code.src.Complex complex75 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex78 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex79 = complex75.multiply(complex78);
        java.lang.String str80 = complex75.toString();
        code.src.Complex complex83 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex86 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex87 = complex83.multiply(complex86);
        code.src.Complex complex88 = complex75.add(complex87);
        code.src.Complex complex89 = complex72.add(complex88);
        java.lang.String str90 = complex72.toString();
        double double91 = complex72.abs();
        code.src.Complex complex92 = complex21.multiply(complex72);
        double double93 = complex72.imaginary;
        complex72.real = 1;
        code.src.Complex complex96 = complex17.sub(complex72);
        java.lang.String str97 = complex17.toString();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(100.0,10.0)" + "'", str7, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 28.09571990514327d + "'", double20 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "(10.0,0.0)" + "'", str45, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 581.9143981028653d + "'", double55 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(10.0,0.0)" + "'", str64, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "(10.0,0.0)" + "'", str80, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str90, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 525.4704025737593d + "'", double91 == 525.4704025737593d);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 437.56491210010614d + "'", double93 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "(1.0,28.09571990514327)" + "'", str97, "(1.0,28.09571990514327)");
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        code.src.Complex complex2 = code.src.Complex.polar(309.0529189565759d, 0.0d);
        java.lang.Class<?> wildcardClass3 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        code.src.Complex complex2 = code.src.Complex.polar((-36073.24762350389d), 58910.68753368511d);
        java.lang.Class<?> wildcardClass3 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        code.src.Complex complex2 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        double double3 = complex2.abs();
        code.src.Complex complex6 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str7 = complex6.toString();
        code.src.Complex complex8 = complex2.multiply(complex6);
        java.lang.Class<?> wildcardClass9 = complex8.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(100.0,10.0)" + "'", str7, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        code.src.Complex complex2 = new code.src.Complex(5225.935322982863d, 213613.92147670433d);
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        double double3 = complex2.real;
        double double4 = complex2.imaginary;
        java.lang.Class<?> wildcardClass5 = complex2.getClass();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 1, 290.95719905143267d);
        java.lang.String str3 = complex2.toString();
        double double4 = complex2.abs();
        complex2.imaginary = (-0.0d);
        java.lang.Class<?> wildcardClass7 = complex2.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "(1.0,290.95719905143267)" + "'", str3, "(1.0,290.95719905143267)");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 290.9589175121722d + "'", double4 == 290.9589175121722d);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        code.src.Complex complex2 = new code.src.Complex(708268.0426747819d, (double) 10);
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, (double) '#');
        double double3 = complex2.imaginary;
        double double4 = complex2.abs();
        code.src.Complex complex7 = new code.src.Complex(100.0d, 0.0d);
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        java.lang.String str15 = complex10.toString();
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        code.src.Complex complex23 = complex10.add(complex22);
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        java.lang.String str31 = complex26.toString();
        code.src.Complex complex34 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex37 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex38 = complex34.multiply(complex37);
        code.src.Complex complex39 = complex26.add(complex38);
        code.src.Complex complex42 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex45 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex46 = complex42.multiply(complex45);
        java.lang.String str47 = complex42.toString();
        code.src.Complex complex50 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex53 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex54 = complex50.multiply(complex53);
        code.src.Complex complex55 = complex42.add(complex54);
        code.src.Complex complex56 = complex39.add(complex55);
        java.lang.String str57 = complex39.toString();
        double double58 = complex39.abs();
        code.src.Complex complex59 = complex23.multiply(complex39);
        code.src.Complex complex60 = complex7.add(complex59);
        code.src.Complex complex61 = complex2.multiply(complex60);
        double double62 = complex60.real;
        java.lang.String str63 = complex60.toString();
        double double64 = complex60.abs();
        double double65 = complex60.real;
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 35.0d + "'", double3 == 35.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 36.40054944640259d + "'", double4 == 36.40054944640259d);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(10.0,0.0)" + "'", str15, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(10.0,0.0)" + "'", str31, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(10.0,0.0)" + "'", str47, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str57, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 525.4704025737593d + "'", double58 == 525.4704025737593d);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + (-106706.9606213186d) + "'", double62 == (-106706.9606213186d));
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(-106706.9606213186,254625.32245566644)" + "'", str63, "(-106706.9606213186,254625.32245566644)");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 276080.4779057942d + "'", double64 == 276080.4779057942d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + (-106706.9606213186d) + "'", double65 == (-106706.9606213186d));
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        code.src.Complex complex2 = code.src.Complex.polar((double) 1L, (double) 100);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.add(complex5);
        code.src.Complex complex9 = new code.src.Complex((double) 100, (double) 10.0f);
        complex9.imaginary = 100L;
        code.src.Complex complex14 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex17 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex18 = complex14.multiply(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex37 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex40 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex41 = complex37.multiply(complex40);
        java.lang.String str42 = complex37.toString();
        code.src.Complex complex45 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex45.multiply(complex48);
        code.src.Complex complex50 = complex37.add(complex49);
        code.src.Complex complex51 = complex34.add(complex50);
        code.src.Complex complex54 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex57 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex58 = complex54.multiply(complex57);
        code.src.Complex complex59 = complex34.sub(complex54);
        code.src.Complex complex60 = complex17.add(complex59);
        code.src.Complex complex61 = complex9.multiply(complex59);
        java.lang.String str62 = complex9.toString();
        code.src.Complex complex63 = complex2.multiply(complex9);
        code.src.Complex complex66 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double67 = complex66.abs();
        java.lang.String str68 = complex66.toString();
        code.src.Complex complex69 = complex9.add(complex66);
        java.lang.Class<?> wildcardClass70 = complex66.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(10.0,0.0)" + "'", str42, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(100.0,100.0)" + "'", str62, "(100.0,100.0)");
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 52.0d + "'", double67 == 52.0d);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str68, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        code.src.Complex complex2 = new code.src.Complex(58910.68753368511d, 511.0653454891018d);
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        code.src.Complex complex2 = new code.src.Complex((-5.063656411097588d), (double) (byte) -1);
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str3 = complex2.toString();
        code.src.Complex complex6 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        code.src.Complex complex7 = complex2.sub(complex6);
        complex7.real = 0.0d;
        complex7.real = 0.0d;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "(100.0,10.0)" + "'", str3, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        complex2.imaginary = (-1.0f);
        code.src.Complex complex11 = new code.src.Complex((double) 100, (double) 10.0f);
        code.src.Complex complex14 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex17 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex18 = complex14.multiply(complex17);
        java.lang.String str19 = complex14.toString();
        code.src.Complex complex22 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex25 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex26 = complex22.multiply(complex25);
        code.src.Complex complex27 = complex14.add(complex26);
        code.src.Complex complex30 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex33 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex34 = complex30.multiply(complex33);
        java.lang.String str35 = complex30.toString();
        code.src.Complex complex38 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex41 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex42 = complex38.multiply(complex41);
        code.src.Complex complex43 = complex30.add(complex42);
        code.src.Complex complex44 = complex27.add(complex43);
        code.src.Complex complex47 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex50 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex51 = complex47.multiply(complex50);
        code.src.Complex complex52 = complex27.sub(complex47);
        code.src.Complex complex53 = new code.src.Complex();
        code.src.Complex complex56 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex59 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex60 = complex56.multiply(complex59);
        java.lang.String str61 = complex56.toString();
        code.src.Complex complex64 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex67 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex68 = complex64.multiply(complex67);
        code.src.Complex complex69 = complex56.add(complex68);
        code.src.Complex complex72 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex75 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex76 = complex72.multiply(complex75);
        java.lang.String str77 = complex72.toString();
        code.src.Complex complex80 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex83 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex84 = complex80.multiply(complex83);
        code.src.Complex complex85 = complex72.add(complex84);
        code.src.Complex complex86 = complex69.add(complex85);
        double double87 = complex86.real;
        code.src.Complex complex88 = complex53.multiply(complex86);
        code.src.Complex complex89 = complex27.multiply(complex86);
        code.src.Complex complex90 = complex11.sub(complex89);
        double double91 = complex89.real;
        double double92 = complex89.abs();
        code.src.Complex complex93 = complex2.sub(complex89);
        complex93.real = 491.60074581353115d;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(10.0,0.0)" + "'", str19, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(10.0,0.0)" + "'", str35, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(10.0,0.0)" + "'", str61, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(10.0,0.0)" + "'", str77, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 581.9143981028653d + "'", double87 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + (-213613.9212426372d) + "'", double91 == (-213613.9212426372d));
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 552238.2879620573d + "'", double92 == 552238.2879620573d);
        org.junit.Assert.assertNotNull(complex93);
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        code.src.Complex complex2 = code.src.Complex.polar(0.0d, 291.95719905143267d);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        code.src.Complex complex40 = complex15.sub(complex35);
        code.src.Complex complex41 = new code.src.Complex();
        code.src.Complex complex44 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex47 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex48 = complex44.multiply(complex47);
        java.lang.String str49 = complex44.toString();
        code.src.Complex complex52 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex55 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex56 = complex52.multiply(complex55);
        code.src.Complex complex57 = complex44.add(complex56);
        code.src.Complex complex60 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex63 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex64 = complex60.multiply(complex63);
        java.lang.String str65 = complex60.toString();
        code.src.Complex complex68 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex71 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex72 = complex68.multiply(complex71);
        code.src.Complex complex73 = complex60.add(complex72);
        code.src.Complex complex74 = complex57.add(complex73);
        double double75 = complex74.real;
        code.src.Complex complex76 = complex41.multiply(complex74);
        code.src.Complex complex77 = complex15.multiply(complex74);
        code.src.Complex complex80 = new code.src.Complex(43.756491210010616d, 437.56491210010614d);
        double double81 = complex80.imaginary;
        code.src.Complex complex82 = complex74.add(complex80);
        complex74.real = (-280.95719905143267d);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(10.0,0.0)" + "'", str49, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(10.0,0.0)" + "'", str65, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 581.9143981028653d + "'", double75 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 437.56491210010614d + "'", double81 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex82);
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        complex2.imaginary = '4';
        double double5 = complex2.abs();
        java.lang.String str6 = complex2.toString();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 112.71202242884297d + "'", double5 == 112.71202242884297d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(100.0,52.0)" + "'", str6, "(100.0,52.0)");
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        code.src.Complex complex33 = new code.src.Complex();
        code.src.Complex complex34 = complex32.add(complex33);
        double double35 = complex32.imaginary;
        double double36 = complex32.abs();
        double double37 = complex32.imaginary;
        code.src.Complex complex40 = code.src.Complex.polar((-317.11773840932915d), 445.65251212240173d);
        code.src.Complex complex43 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        double double44 = complex43.abs();
        code.src.Complex complex47 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str48 = complex47.toString();
        code.src.Complex complex49 = complex43.multiply(complex47);
        double double50 = complex47.real;
        complex47.imaginary = (-198.14967628541848d);
        code.src.Complex complex55 = code.src.Complex.polar((-489.10687533685115d), 520.0d);
        code.src.Complex complex58 = new code.src.Complex(1.0d, 28.09571990514327d);
        code.src.Complex complex59 = complex55.add(complex58);
        code.src.Complex complex60 = complex47.sub(complex58);
        code.src.Complex complex61 = complex40.multiply(complex60);
        code.src.Complex complex62 = complex32.multiply(complex61);
        double double63 = complex32.imaginary;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 875.1298242002123d + "'", double35 == 875.1298242002123d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1050.9408051475186d + "'", double36 == 1050.9408051475186d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 875.1298242002123d + "'", double37 == 875.1298242002123d);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(100.0,10.0)" + "'", str48, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 100.0d + "'", double50 == 100.0d);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 875.1298242002123d + "'", double63 == 875.1298242002123d);
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        code.src.Complex complex2 = new code.src.Complex((double) 100.0f, (double) 100.0f);
        code.src.Complex complex5 = code.src.Complex.polar(10.0d, (double) '4');
        code.src.Complex complex6 = complex2.add(complex5);
        java.lang.Class<?> wildcardClass7 = complex6.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        code.src.Complex complex2 = code.src.Complex.polar((-317.11773840932915d), (double) 10L);
        code.src.Complex complex5 = new code.src.Complex((double) (short) 0, (double) ' ');
        code.src.Complex complex8 = new code.src.Complex((double) 10L, (double) '#');
        double double9 = complex8.imaginary;
        code.src.Complex complex10 = complex5.multiply(complex8);
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        double double18 = complex17.imaginary;
        code.src.Complex complex19 = complex10.multiply(complex17);
        code.src.Complex complex20 = complex2.sub(complex17);
        complex17.real = 213613.9236394847d;
        complex17.imaginary = 904.2902405342309d;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 35.0d + "'", double9 == 35.0d);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 437.56491210010614d + "'", double18 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        code.src.Complex complex2 = new code.src.Complex(279.95719905143267d, 10.0d);
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        complex2.real = (byte) 1;
        complex2.imaginary = (short) 100;
        code.src.Complex complex9 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex12 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex13 = complex9.multiply(complex12);
        java.lang.String str14 = complex9.toString();
        code.src.Complex complex17 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex20 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex21 = complex17.multiply(complex20);
        code.src.Complex complex22 = complex9.add(complex21);
        double double23 = complex22.real;
        code.src.Complex complex26 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex27 = complex22.multiply(complex26);
        code.src.Complex complex28 = complex2.multiply(complex22);
        code.src.Complex complex31 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str32 = complex31.toString();
        code.src.Complex complex35 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        code.src.Complex complex36 = complex31.sub(complex35);
        complex31.imaginary = (-1.0f);
        code.src.Complex complex39 = complex2.sub(complex31);
        code.src.Complex complex42 = code.src.Complex.polar(28.09571990514327d, (double) 10L);
        code.src.Complex complex43 = complex39.add(complex42);
        double double44 = complex42.real;
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(10.0,0.0)" + "'", str14, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 290.95719905143267d + "'", double23 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(100.0,10.0)" + "'", str32, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-23.574318661312283d) + "'", double44 == (-23.574318661312283d));
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        code.src.Complex complex2 = new code.src.Complex(663.590879631022d, 43.756491210010616d);
        complex2.imaginary = '#';
        code.src.Complex complex7 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex10 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex11 = complex7.multiply(complex10);
        java.lang.String str12 = complex7.toString();
        code.src.Complex complex15 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex18 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex19 = complex15.multiply(complex18);
        code.src.Complex complex20 = complex7.add(complex19);
        double double21 = complex7.abs();
        code.src.Complex complex22 = complex2.add(complex7);
        code.src.Complex complex25 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex28 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex29 = complex25.multiply(complex28);
        java.lang.String str30 = complex25.toString();
        code.src.Complex complex33 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex36 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex37 = complex33.multiply(complex36);
        code.src.Complex complex38 = complex25.add(complex37);
        code.src.Complex complex41 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex44 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex45 = complex41.multiply(complex44);
        java.lang.String str46 = complex41.toString();
        code.src.Complex complex49 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex52 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex53 = complex49.multiply(complex52);
        code.src.Complex complex54 = complex41.add(complex53);
        code.src.Complex complex55 = complex38.add(complex54);
        double double56 = complex55.real;
        code.src.Complex complex59 = code.src.Complex.polar((double) (byte) 100, 582.9143981028653d);
        code.src.Complex complex60 = complex55.sub(complex59);
        code.src.Complex complex61 = complex7.add(complex59);
        double double62 = complex59.real;
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(10.0,0.0)" + "'", str12, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(10.0,0.0)" + "'", str30, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(10.0,0.0)" + "'", str46, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 581.9143981028653d + "'", double56 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 14.841058233505056d + "'", double62 == 14.841058233505056d);
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 0, (double) ' ');
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        code.src.Complex complex40 = complex2.add(complex38);
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        java.lang.String str48 = complex43.toString();
        code.src.Complex complex51 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex54 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex55 = complex51.multiply(complex54);
        code.src.Complex complex56 = complex43.add(complex55);
        code.src.Complex complex59 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex62 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex63 = complex59.multiply(complex62);
        java.lang.String str64 = complex59.toString();
        code.src.Complex complex67 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex70 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex71 = complex67.multiply(complex70);
        code.src.Complex complex72 = complex59.add(complex71);
        code.src.Complex complex73 = complex56.add(complex72);
        code.src.Complex complex74 = new code.src.Complex();
        code.src.Complex complex75 = complex73.add(complex74);
        code.src.Complex complex76 = complex40.add(complex74);
        code.src.Complex complex79 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str80 = complex79.toString();
        java.lang.String str81 = complex79.toString();
        code.src.Complex complex82 = complex40.sub(complex79);
        java.lang.String str83 = complex79.toString();
        complex79.real = 141.77446878757826d;
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(10.0,0.0)" + "'", str48, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(10.0,0.0)" + "'", str64, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "(100.0,10.0)" + "'", str80, "(100.0,10.0)");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "(100.0,10.0)" + "'", str81, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(100.0,10.0)" + "'", str83, "(100.0,10.0)");
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        code.src.Complex complex2 = new code.src.Complex((double) 1, 673.8344940348353d);
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        double double37 = complex36.real;
        code.src.Complex complex40 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex43 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex44 = complex40.multiply(complex43);
        code.src.Complex complex45 = complex36.sub(complex43);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex43.add(complex48);
        code.src.Complex complex52 = new code.src.Complex((double) 10L, (double) '#');
        code.src.Complex complex53 = complex48.add(complex52);
        code.src.Complex complex56 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex56.imaginary = (short) 0;
        complex56.imaginary = 100.0f;
        code.src.Complex complex61 = complex48.multiply(complex56);
        code.src.Complex complex64 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex67 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex68 = complex64.multiply(complex67);
        java.lang.String str69 = complex64.toString();
        code.src.Complex complex72 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex75 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex76 = complex72.multiply(complex75);
        code.src.Complex complex77 = complex64.add(complex76);
        double double78 = complex77.real;
        code.src.Complex complex81 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex84 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex85 = complex81.multiply(complex84);
        double double86 = complex85.imaginary;
        code.src.Complex complex87 = complex77.sub(complex85);
        code.src.Complex complex90 = code.src.Complex.polar(0.0d, (double) (short) -1);
        code.src.Complex complex91 = complex77.multiply(complex90);
        code.src.Complex complex92 = complex48.multiply(complex90);
        double double93 = complex48.abs();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 582.9143981028653d + "'", double37 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(10.0,0.0)" + "'", str69, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 290.95719905143267d + "'", double78 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 437.56491210010614d + "'", double86 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 52.0d + "'", double93 == 52.0d);
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        code.src.Complex complex2 = code.src.Complex.polar((double) 1L, (double) 100);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.add(complex5);
        double double7 = complex5.abs();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str3 = complex2.toString();
        java.lang.String str4 = complex2.toString();
        java.lang.String str5 = complex2.toString();
        code.src.Complex complex8 = new code.src.Complex((double) (byte) 100, (double) 'a');
        code.src.Complex complex11 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex14 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex15 = complex11.multiply(complex14);
        double double16 = complex14.imaginary;
        java.lang.String str17 = complex14.toString();
        code.src.Complex complex18 = complex8.sub(complex14);
        code.src.Complex complex21 = code.src.Complex.polar((double) (byte) 100, 582.9143981028653d);
        complex21.real = 875.1298242002123d;
        complex21.imaginary = (-317.11773840932915d);
        complex21.real = 0.0d;
        code.src.Complex complex28 = complex18.sub(complex21);
        code.src.Complex complex29 = complex2.sub(complex28);
        double double30 = complex29.real;
        code.src.Complex complex31 = null;
        // The following exception was thrown during execution in test generation
        try {
            code.src.Complex complex32 = complex29.add(complex31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "(100.0,10.0)" + "'", str3, "(100.0,10.0)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(100.0,10.0)" + "'", str4, "(100.0,10.0)");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(100.0,10.0)" + "'", str5, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 43.756491210010616d + "'", double16 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str17, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 28.09571990514327d + "'", double30 == 28.09571990514327d);
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, (double) '#');
        complex2.imaginary = (byte) 10;
        java.lang.String str5 = complex2.toString();
        code.src.Complex complex8 = code.src.Complex.polar((double) (short) -1, (double) (-1L));
        code.src.Complex complex11 = new code.src.Complex((double) (short) 0, (double) ' ');
        code.src.Complex complex12 = new code.src.Complex();
        complex12.real = 1L;
        code.src.Complex complex17 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex20 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex21 = complex17.multiply(complex20);
        java.lang.String str22 = complex17.toString();
        code.src.Complex complex25 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex28 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex29 = complex25.multiply(complex28);
        code.src.Complex complex30 = complex17.add(complex29);
        code.src.Complex complex33 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex36 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex37 = complex33.multiply(complex36);
        java.lang.String str38 = complex33.toString();
        code.src.Complex complex41 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex44 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex45 = complex41.multiply(complex44);
        code.src.Complex complex46 = complex33.add(complex45);
        code.src.Complex complex47 = complex30.add(complex46);
        code.src.Complex complex48 = complex12.add(complex47);
        code.src.Complex complex49 = complex11.add(complex47);
        code.src.Complex complex52 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex55 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex56 = complex52.multiply(complex55);
        java.lang.String str57 = complex52.toString();
        code.src.Complex complex60 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex63 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex64 = complex60.multiply(complex63);
        code.src.Complex complex65 = complex52.add(complex64);
        code.src.Complex complex68 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex71 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex72 = complex68.multiply(complex71);
        java.lang.String str73 = complex68.toString();
        code.src.Complex complex76 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex79 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex80 = complex76.multiply(complex79);
        code.src.Complex complex81 = complex68.add(complex80);
        code.src.Complex complex82 = complex65.add(complex81);
        code.src.Complex complex83 = new code.src.Complex();
        code.src.Complex complex84 = complex82.add(complex83);
        code.src.Complex complex85 = complex49.add(complex83);
        double double86 = complex85.imaginary;
        code.src.Complex complex87 = complex8.sub(complex85);
        double double88 = complex87.imaginary;
        double double89 = complex87.imaginary;
        code.src.Complex complex90 = complex2.sub(complex87);
        java.lang.String str91 = complex87.toString();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(10.0,10.0)" + "'", str5, "(10.0,10.0)");
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(10.0,0.0)" + "'", str22, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(10.0,0.0)" + "'", str38, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(10.0,0.0)" + "'", str57, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(10.0,0.0)" + "'", str73, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 907.1298242002123d + "'", double86 == 907.1298242002123d);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + (-906.2883532154044d) + "'", double88 == (-906.2883532154044d));
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + (-906.2883532154044d) + "'", double89 == (-906.2883532154044d));
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "(-582.4547004087335,-906.2883532154044)" + "'", str91, "(-582.4547004087335,-906.2883532154044)");
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        code.src.Complex complex2 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        double double3 = complex2.abs();
        code.src.Complex complex6 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str7 = complex6.toString();
        code.src.Complex complex8 = complex2.multiply(complex6);
        complex6.real = 35.0d;
        code.src.Complex complex11 = new code.src.Complex();
        complex11.real = 1L;
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        java.lang.String str21 = complex16.toString();
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        code.src.Complex complex29 = complex16.add(complex28);
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        java.lang.String str37 = complex32.toString();
        code.src.Complex complex40 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex43 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex44 = complex40.multiply(complex43);
        code.src.Complex complex45 = complex32.add(complex44);
        code.src.Complex complex46 = complex29.add(complex45);
        code.src.Complex complex47 = complex11.add(complex46);
        double double48 = complex47.real;
        code.src.Complex complex51 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex54 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex55 = complex51.multiply(complex54);
        code.src.Complex complex56 = complex47.sub(complex54);
        code.src.Complex complex59 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex60 = complex54.add(complex59);
        code.src.Complex complex61 = complex6.multiply(complex60);
        double double62 = complex61.imaginary;
        java.lang.Class<?> wildcardClass63 = complex61.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(100.0,10.0)" + "'", str7, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(10.0,0.0)" + "'", str21, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(10.0,0.0)" + "'", str37, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 582.9143981028653d + "'", double48 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 3624.868782803608d + "'", double62 == 3624.868782803608d);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        code.src.Complex complex2 = code.src.Complex.polar((double) 1L, (double) 100);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.add(complex5);
        java.lang.Class<?> wildcardClass7 = complex6.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        double double7 = complex6.imaginary;
        java.lang.String str8 = complex6.toString();
        double double9 = complex6.real;
        code.src.Complex complex12 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double13 = complex12.abs();
        java.lang.String str14 = complex12.toString();
        code.src.Complex complex15 = complex6.sub(complex12);
        double double16 = complex12.abs();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 437.56491210010614d + "'", double7 == 437.56491210010614d);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(280.95719905143267,437.56491210010614)" + "'", str8, "(280.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 280.95719905143267d + "'", double9 == 280.95719905143267d);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str14, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 52.0d + "'", double16 == 52.0d);
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        code.src.Complex complex2 = new code.src.Complex(324.9608082617091d, 1926.648617074226d);
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        code.src.Complex complex2 = code.src.Complex.polar(58.01650108462993d, (double) 100L);
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = new code.src.Complex();
        code.src.Complex complex37 = complex35.add(complex36);
        double double38 = complex35.imaginary;
        code.src.Complex complex41 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex44 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex45 = complex41.multiply(complex44);
        double double46 = complex45.imaginary;
        java.lang.String str47 = complex45.toString();
        double double48 = complex45.real;
        code.src.Complex complex51 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double52 = complex51.abs();
        java.lang.String str53 = complex51.toString();
        code.src.Complex complex54 = complex45.sub(complex51);
        code.src.Complex complex57 = new code.src.Complex(100.0d, 0.0d);
        code.src.Complex complex58 = complex54.add(complex57);
        code.src.Complex complex59 = complex35.sub(complex57);
        code.src.Complex complex60 = complex2.multiply(complex57);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 875.1298242002123d + "'", double38 == 875.1298242002123d);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 437.56491210010614d + "'", double46 == 437.56491210010614d);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(280.95719905143267,437.56491210010614)" + "'", str47, "(280.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 280.95719905143267d + "'", double48 == 280.95719905143267d);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 52.0d + "'", double52 == 52.0d);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str53, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        code.src.Complex complex2 = code.src.Complex.polar(290.95719905143267d, (double) 1.0f);
        code.src.Complex complex5 = new code.src.Complex((double) (byte) 100, 437.56491210010614d);
        code.src.Complex complex6 = new code.src.Complex();
        complex6.real = 1L;
        code.src.Complex complex11 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex14 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex15 = complex11.multiply(complex14);
        java.lang.String str16 = complex11.toString();
        code.src.Complex complex19 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex22 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex23 = complex19.multiply(complex22);
        code.src.Complex complex24 = complex11.add(complex23);
        code.src.Complex complex27 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex30 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex31 = complex27.multiply(complex30);
        java.lang.String str32 = complex27.toString();
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        code.src.Complex complex40 = complex27.add(complex39);
        code.src.Complex complex41 = complex24.add(complex40);
        code.src.Complex complex42 = complex6.add(complex41);
        double double43 = complex42.real;
        code.src.Complex complex46 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex49 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex50 = complex46.multiply(complex49);
        code.src.Complex complex51 = complex42.sub(complex49);
        code.src.Complex complex54 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex55 = complex49.add(complex54);
        code.src.Complex complex56 = complex5.add(complex54);
        code.src.Complex complex57 = complex2.multiply(complex54);
        complex54.real = 100;
        complex54.imaginary = 1336.6737350030942d;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(10.0,0.0)" + "'", str16, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(10.0,0.0)" + "'", str32, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 582.9143981028653d + "'", double43 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        code.src.Complex complex2 = code.src.Complex.polar((double) (short) 0, (double) (byte) 10);
        code.src.Complex complex3 = new code.src.Complex();
        code.src.Complex complex6 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex9 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex10 = complex6.multiply(complex9);
        java.lang.String str11 = complex6.toString();
        code.src.Complex complex14 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex17 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex18 = complex14.multiply(complex17);
        code.src.Complex complex19 = complex6.add(complex18);
        code.src.Complex complex22 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex25 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex26 = complex22.multiply(complex25);
        java.lang.String str27 = complex22.toString();
        code.src.Complex complex30 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex33 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex34 = complex30.multiply(complex33);
        code.src.Complex complex35 = complex22.add(complex34);
        code.src.Complex complex36 = complex19.add(complex35);
        double double37 = complex36.real;
        code.src.Complex complex38 = complex3.multiply(complex36);
        double double39 = complex36.abs();
        code.src.Complex complex40 = complex2.sub(complex36);
        code.src.Complex complex43 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex43.imaginary = (short) 0;
        complex43.imaginary = 100.0f;
        code.src.Complex complex50 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str51 = complex50.toString();
        code.src.Complex complex54 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        code.src.Complex complex55 = complex50.sub(complex54);
        code.src.Complex complex56 = complex43.multiply(complex55);
        java.lang.String str57 = complex55.toString();
        double double58 = complex55.real;
        code.src.Complex complex59 = complex2.add(complex55);
        complex55.real = 1.0d;
        java.lang.String str62 = complex55.toString();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(10.0,0.0)" + "'", str11, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(10.0,0.0)" + "'", str27, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 581.9143981028653d + "'", double37 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1050.9408051475186d + "'", double39 == 1050.9408051475186d);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "(100.0,10.0)" + "'", str51, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(589.1068753368511,327.11773840932915)" + "'", str57, "(589.1068753368511,327.11773840932915)");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 589.1068753368511d + "'", double58 == 589.1068753368511d);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(1.0,327.11773840932915)" + "'", str62, "(1.0,327.11773840932915)");
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 0, (double) ' ');
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        code.src.Complex complex40 = complex2.add(complex38);
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        java.lang.String str48 = complex43.toString();
        code.src.Complex complex51 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex54 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex55 = complex51.multiply(complex54);
        code.src.Complex complex56 = complex43.add(complex55);
        code.src.Complex complex59 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex62 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex63 = complex59.multiply(complex62);
        java.lang.String str64 = complex59.toString();
        code.src.Complex complex67 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex70 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex71 = complex67.multiply(complex70);
        code.src.Complex complex72 = complex59.add(complex71);
        code.src.Complex complex73 = complex56.add(complex72);
        code.src.Complex complex74 = new code.src.Complex();
        code.src.Complex complex75 = complex73.add(complex74);
        code.src.Complex complex76 = complex40.add(complex74);
        double double77 = complex76.imaginary;
        java.lang.String str78 = complex76.toString();
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(10.0,0.0)" + "'", str48, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(10.0,0.0)" + "'", str64, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 907.1298242002123d + "'", double77 == 907.1298242002123d);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(581.9143981028653,907.1298242002123)" + "'", str78, "(581.9143981028653,907.1298242002123)");
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        code.src.Complex complex2 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        complex2.real = 582.9143981028653d;
        code.src.Complex complex7 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str8 = complex7.toString();
        code.src.Complex complex11 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        code.src.Complex complex12 = complex7.sub(complex11);
        code.src.Complex complex13 = complex2.sub(complex11);
        double double14 = complex11.abs();
        java.lang.String str15 = complex11.toString();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(100.0,10.0)" + "'", str8, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 582.9143981028653d + "'", double14 == 582.9143981028653d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(-489.10687533685115,-317.11773840932915)" + "'", str15, "(-489.10687533685115,-317.11773840932915)");
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        code.src.Complex complex2 = code.src.Complex.polar((-317.11773840932915d), (double) (-1.0f));
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        double double40 = complex39.real;
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        code.src.Complex complex48 = complex39.sub(complex46);
        double double49 = complex39.imaginary;
        code.src.Complex complex50 = complex2.sub(complex39);
        code.src.Complex complex53 = new code.src.Complex(290.95719905143267d, (-213613.9212426372d));
        code.src.Complex complex54 = complex39.sub(complex53);
        code.src.Complex complex57 = new code.src.Complex(10.04987562112089d, 213623.9212426372d);
        code.src.Complex complex58 = complex54.add(complex57);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 582.9143981028653d + "'", double40 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 875.1298242002123d + "'", double49 == 875.1298242002123d);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex58);
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        code.src.Complex complex40 = complex15.sub(complex35);
        double double41 = complex15.abs();
        java.lang.String str42 = complex15.toString();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 525.4704025737593d + "'", double41 == 525.4704025737593d);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str42, "(290.95719905143267,437.56491210010614)");
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        code.src.Complex complex2 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        double double3 = complex2.abs();
        code.src.Complex complex6 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str7 = complex6.toString();
        code.src.Complex complex8 = complex2.multiply(complex6);
        java.lang.String str9 = complex2.toString();
        code.src.Complex complex12 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex15 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex16 = complex12.multiply(complex15);
        java.lang.String str17 = complex12.toString();
        double double18 = complex12.imaginary;
        code.src.Complex complex19 = complex2.sub(complex12);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(100.0,10.0)" + "'", str7, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(-0.0,0.0)" + "'", str9, "(-0.0,0.0)");
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(10.0,0.0)" + "'", str17, "(10.0,0.0)");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(complex19);
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        code.src.Complex complex2 = code.src.Complex.polar((double) (short) -1, (double) (byte) 0);
        code.src.Complex complex5 = code.src.Complex.polar(28.09571990514327d, (-213613.9212426372d));
        code.src.Complex complex6 = complex2.sub(complex5);
        complex5.real = 242.7106111527617d;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        code.src.Complex complex2 = new code.src.Complex(572.0d, (double) 1L);
        code.src.Complex complex5 = new code.src.Complex((double) 100, (double) 10.0f);
        complex5.real = (byte) 1;
        complex5.imaginary = (short) 100;
        code.src.Complex complex10 = new code.src.Complex();
        complex10.real = 1L;
        code.src.Complex complex15 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex18 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex19 = complex15.multiply(complex18);
        java.lang.String str20 = complex15.toString();
        code.src.Complex complex23 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex26 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex27 = complex23.multiply(complex26);
        code.src.Complex complex28 = complex15.add(complex27);
        code.src.Complex complex31 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex34 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex35 = complex31.multiply(complex34);
        java.lang.String str36 = complex31.toString();
        code.src.Complex complex39 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex42 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex43 = complex39.multiply(complex42);
        code.src.Complex complex44 = complex31.add(complex43);
        code.src.Complex complex45 = complex28.add(complex44);
        code.src.Complex complex46 = complex10.add(complex45);
        double double47 = complex10.imaginary;
        double double48 = complex10.imaginary;
        java.lang.String str49 = complex10.toString();
        code.src.Complex complex50 = complex5.sub(complex10);
        code.src.Complex complex51 = complex2.multiply(complex50);
        code.src.Complex complex54 = code.src.Complex.polar((double) (short) 0, (-213613.9212426372d));
        code.src.Complex complex55 = complex51.multiply(complex54);
        java.lang.Class<?> wildcardClass56 = complex55.getClass();
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(10.0,0.0)" + "'", str20, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(10.0,0.0)" + "'", str36, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(1.0,0.0)" + "'", str49, "(1.0,0.0)");
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        code.src.Complex complex2 = code.src.Complex.polar((double) '#', 280.95719905143267d);
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex38 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex41 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex42 = complex38.multiply(complex41);
        code.src.Complex complex43 = complex18.sub(complex38);
        double double44 = complex43.imaginary;
        code.src.Complex complex45 = new code.src.Complex();
        complex45.real = 1L;
        code.src.Complex complex50 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex53 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex54 = complex50.multiply(complex53);
        java.lang.String str55 = complex50.toString();
        code.src.Complex complex58 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex61 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex62 = complex58.multiply(complex61);
        code.src.Complex complex63 = complex50.add(complex62);
        code.src.Complex complex66 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex69 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex70 = complex66.multiply(complex69);
        java.lang.String str71 = complex66.toString();
        code.src.Complex complex74 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex77 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex78 = complex74.multiply(complex77);
        code.src.Complex complex79 = complex66.add(complex78);
        code.src.Complex complex80 = complex63.add(complex79);
        code.src.Complex complex81 = complex45.add(complex80);
        double double82 = complex81.real;
        code.src.Complex complex85 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex88 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex89 = complex85.multiply(complex88);
        code.src.Complex complex90 = complex81.sub(complex88);
        complex90.real = 0.0d;
        code.src.Complex complex93 = complex43.sub(complex90);
        complex43.imaginary = 290.95719905143267d;
        code.src.Complex complex96 = complex2.sub(complex43);
        double double97 = complex96.imaginary;
        java.lang.Class<?> wildcardClass98 = complex96.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 437.56491210010614d + "'", double44 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(10.0,0.0)" + "'", str55, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(10.0,0.0)" + "'", str71, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 582.9143981028653d + "'", double82 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertNotNull(complex96);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + (-325.1488062743758d) + "'", double97 == (-325.1488062743758d));
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        code.src.Complex complex2 = code.src.Complex.polar(437.56491210010614d, (double) (-1.0f));
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        code.src.Complex complex2 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        double double3 = complex2.abs();
        code.src.Complex complex6 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str7 = complex6.toString();
        code.src.Complex complex8 = complex2.multiply(complex6);
        double double9 = complex6.imaginary;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(100.0,10.0)" + "'", str7, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        code.src.Complex complex2 = code.src.Complex.polar((double) (short) -1, (double) (-1L));
        code.src.Complex complex5 = new code.src.Complex((double) (short) 0, (double) ' ');
        code.src.Complex complex6 = new code.src.Complex();
        complex6.real = 1L;
        code.src.Complex complex11 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex14 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex15 = complex11.multiply(complex14);
        java.lang.String str16 = complex11.toString();
        code.src.Complex complex19 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex22 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex23 = complex19.multiply(complex22);
        code.src.Complex complex24 = complex11.add(complex23);
        code.src.Complex complex27 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex30 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex31 = complex27.multiply(complex30);
        java.lang.String str32 = complex27.toString();
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        code.src.Complex complex40 = complex27.add(complex39);
        code.src.Complex complex41 = complex24.add(complex40);
        code.src.Complex complex42 = complex6.add(complex41);
        code.src.Complex complex43 = complex5.add(complex41);
        code.src.Complex complex46 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex49 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex50 = complex46.multiply(complex49);
        java.lang.String str51 = complex46.toString();
        code.src.Complex complex54 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex57 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex58 = complex54.multiply(complex57);
        code.src.Complex complex59 = complex46.add(complex58);
        code.src.Complex complex62 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex65 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex66 = complex62.multiply(complex65);
        java.lang.String str67 = complex62.toString();
        code.src.Complex complex70 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex73 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex74 = complex70.multiply(complex73);
        code.src.Complex complex75 = complex62.add(complex74);
        code.src.Complex complex76 = complex59.add(complex75);
        code.src.Complex complex77 = new code.src.Complex();
        code.src.Complex complex78 = complex76.add(complex77);
        code.src.Complex complex79 = complex43.add(complex77);
        double double80 = complex79.imaginary;
        code.src.Complex complex81 = complex2.sub(complex79);
        double double82 = complex81.abs();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(10.0,0.0)" + "'", str16, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(10.0,0.0)" + "'", str32, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "(10.0,0.0)" + "'", str51, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(10.0,0.0)" + "'", str67, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 907.1298242002123d + "'", double80 == 907.1298242002123d);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 1077.3170643789679d + "'", double82 == 1077.3170643789679d);
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        java.lang.String str33 = complex15.toString();
        double double34 = complex15.abs();
        double double35 = complex15.real;
        code.src.Complex complex38 = new code.src.Complex((double) 1, 28.09571990514327d);
        code.src.Complex complex41 = new code.src.Complex((double) (short) 0, (double) ' ');
        code.src.Complex complex42 = new code.src.Complex();
        complex42.real = 1L;
        code.src.Complex complex47 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex50 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex51 = complex47.multiply(complex50);
        java.lang.String str52 = complex47.toString();
        code.src.Complex complex55 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex58 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex59 = complex55.multiply(complex58);
        code.src.Complex complex60 = complex47.add(complex59);
        code.src.Complex complex63 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex66 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex67 = complex63.multiply(complex66);
        java.lang.String str68 = complex63.toString();
        code.src.Complex complex71 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex74 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex75 = complex71.multiply(complex74);
        code.src.Complex complex76 = complex63.add(complex75);
        code.src.Complex complex77 = complex60.add(complex76);
        code.src.Complex complex78 = complex42.add(complex77);
        code.src.Complex complex79 = complex41.add(complex77);
        code.src.Complex complex82 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double83 = complex82.abs();
        code.src.Complex complex84 = complex41.add(complex82);
        code.src.Complex complex85 = complex38.add(complex41);
        code.src.Complex complex86 = complex15.multiply(complex85);
        double double87 = complex15.real;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str33, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 525.4704025737593d + "'", double34 == 525.4704025737593d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 290.95719905143267d + "'", double35 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(10.0,0.0)" + "'", str52, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(10.0,0.0)" + "'", str68, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 52.0d + "'", double83 == 52.0d);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 290.95719905143267d + "'", double87 == 290.95719905143267d);
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        code.src.Complex complex2 = new code.src.Complex((double) (byte) 100, (double) 0.0f);
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        code.src.Complex complex2 = new code.src.Complex(492.8116754934422d, 309.0545367982484d);
        complex2.imaginary = (-495.7163425468028d);
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        code.src.Complex complex2 = code.src.Complex.polar((-317.11773840932915d), (double) (-1.0f));
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        double double40 = complex39.real;
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        code.src.Complex complex48 = complex39.sub(complex46);
        double double49 = complex39.imaginary;
        code.src.Complex complex50 = complex2.sub(complex39);
        code.src.Complex complex53 = new code.src.Complex((double) (short) 0, (double) ' ');
        code.src.Complex complex54 = new code.src.Complex();
        complex54.real = 1L;
        code.src.Complex complex59 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex62 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex63 = complex59.multiply(complex62);
        java.lang.String str64 = complex59.toString();
        code.src.Complex complex67 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex70 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex71 = complex67.multiply(complex70);
        code.src.Complex complex72 = complex59.add(complex71);
        code.src.Complex complex75 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex78 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex79 = complex75.multiply(complex78);
        java.lang.String str80 = complex75.toString();
        code.src.Complex complex83 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex86 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex87 = complex83.multiply(complex86);
        code.src.Complex complex88 = complex75.add(complex87);
        code.src.Complex complex89 = complex72.add(complex88);
        code.src.Complex complex90 = complex54.add(complex89);
        code.src.Complex complex91 = complex53.add(complex89);
        code.src.Complex complex92 = complex2.multiply(complex89);
        double double93 = complex92.imaginary;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 582.9143981028653d + "'", double40 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 875.1298242002123d + "'", double49 == 875.1298242002123d);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(10.0,0.0)" + "'", str64, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "(10.0,0.0)" + "'", str80, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 5336.90751278706d + "'", double93 == 5336.90751278706d);
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        double double33 = complex15.real;
        double double34 = complex15.real;
        code.src.Complex complex37 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex40 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex41 = complex37.multiply(complex40);
        java.lang.String str42 = complex37.toString();
        code.src.Complex complex45 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex45.multiply(complex48);
        code.src.Complex complex50 = complex37.add(complex49);
        code.src.Complex complex53 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex56 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex57 = complex53.multiply(complex56);
        java.lang.String str58 = complex53.toString();
        code.src.Complex complex61 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex64 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex65 = complex61.multiply(complex64);
        code.src.Complex complex66 = complex53.add(complex65);
        code.src.Complex complex67 = complex50.add(complex66);
        code.src.Complex complex68 = complex15.sub(complex50);
        double double69 = complex68.abs();
        code.src.Complex complex72 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex72.imaginary = (short) 0;
        complex72.imaginary = 100.0f;
        code.src.Complex complex77 = complex68.multiply(complex72);
        code.src.Complex complex80 = new code.src.Complex((double) (byte) 100, (double) 'a');
        code.src.Complex complex83 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex86 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex87 = complex83.multiply(complex86);
        double double88 = complex86.imaginary;
        java.lang.String str89 = complex86.toString();
        code.src.Complex complex90 = complex80.sub(complex86);
        code.src.Complex complex93 = new code.src.Complex((double) 100, (double) 10.0f);
        complex93.real = (byte) 1;
        code.src.Complex complex96 = complex86.multiply(complex93);
        code.src.Complex complex97 = complex72.sub(complex96);
        java.lang.Class<?> wildcardClass98 = complex97.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 290.95719905143267d + "'", double33 == 290.95719905143267d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 290.95719905143267d + "'", double34 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(10.0,0.0)" + "'", str42, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(10.0,0.0)" + "'", str58, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 43.756491210010616d + "'", double88 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str89, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex96);
        org.junit.Assert.assertNotNull(complex97);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        code.src.Complex complex2 = new code.src.Complex(589.1068753368511d, 481.32140331011675d);
        double double3 = complex2.real;
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 589.1068753368511d + "'", double3 == 589.1068753368511d);
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        code.src.Complex complex2 = code.src.Complex.polar((double) (short) 100, 589.1068753368511d);
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex38 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex41 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex42 = complex38.multiply(complex41);
        code.src.Complex complex43 = complex18.sub(complex38);
        code.src.Complex complex44 = new code.src.Complex();
        code.src.Complex complex47 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex50 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex51 = complex47.multiply(complex50);
        java.lang.String str52 = complex47.toString();
        code.src.Complex complex55 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex58 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex59 = complex55.multiply(complex58);
        code.src.Complex complex60 = complex47.add(complex59);
        code.src.Complex complex63 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex66 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex67 = complex63.multiply(complex66);
        java.lang.String str68 = complex63.toString();
        code.src.Complex complex71 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex74 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex75 = complex71.multiply(complex74);
        code.src.Complex complex76 = complex63.add(complex75);
        code.src.Complex complex77 = complex60.add(complex76);
        double double78 = complex77.real;
        code.src.Complex complex79 = complex44.multiply(complex77);
        code.src.Complex complex80 = complex18.multiply(complex77);
        code.src.Complex complex83 = new code.src.Complex(43.756491210010616d, 437.56491210010614d);
        double double84 = complex83.imaginary;
        code.src.Complex complex85 = complex77.add(complex83);
        double double86 = complex77.imaginary;
        double double87 = complex77.real;
        code.src.Complex complex88 = complex2.add(complex77);
        java.lang.Class<?> wildcardClass89 = complex88.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(10.0,0.0)" + "'", str52, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(10.0,0.0)" + "'", str68, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 581.9143981028653d + "'", double78 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 437.56491210010614d + "'", double84 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 875.1298242002123d + "'", double86 == 875.1298242002123d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 581.9143981028653d + "'", double87 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        double double37 = complex36.real;
        code.src.Complex complex40 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex43 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex44 = complex40.multiply(complex43);
        code.src.Complex complex45 = complex36.sub(complex43);
        double double46 = complex36.imaginary;
        double double47 = complex36.real;
        java.lang.Class<?> wildcardClass48 = complex36.getClass();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 582.9143981028653d + "'", double37 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 875.1298242002123d + "'", double46 == 875.1298242002123d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 582.9143981028653d + "'", double47 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        complex2.imaginary = 100L;
        code.src.Complex complex7 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex10 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex11 = complex7.multiply(complex10);
        code.src.Complex complex14 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex17 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex18 = complex14.multiply(complex17);
        java.lang.String str19 = complex14.toString();
        code.src.Complex complex22 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex25 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex26 = complex22.multiply(complex25);
        code.src.Complex complex27 = complex14.add(complex26);
        code.src.Complex complex30 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex33 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex34 = complex30.multiply(complex33);
        java.lang.String str35 = complex30.toString();
        code.src.Complex complex38 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex41 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex42 = complex38.multiply(complex41);
        code.src.Complex complex43 = complex30.add(complex42);
        code.src.Complex complex44 = complex27.add(complex43);
        code.src.Complex complex47 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex50 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex51 = complex47.multiply(complex50);
        code.src.Complex complex52 = complex27.sub(complex47);
        code.src.Complex complex53 = complex10.add(complex52);
        code.src.Complex complex54 = complex2.multiply(complex52);
        double double55 = complex2.real;
        code.src.Complex complex58 = new code.src.Complex(28.09571990514327d, (double) ' ');
        code.src.Complex complex59 = complex2.add(complex58);
        double double60 = complex58.real;
        complex58.imaginary = 28.09571990514327d;
        complex58.imaginary = 43.756491210010616d;
        complex58.real = 213623.9212426372d;
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(10.0,0.0)" + "'", str19, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(10.0,0.0)" + "'", str35, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 100.0d + "'", double55 == 100.0d);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 28.09571990514327d + "'", double60 == 28.09571990514327d);
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        double double37 = complex36.real;
        code.src.Complex complex40 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex43 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex44 = complex40.multiply(complex43);
        code.src.Complex complex45 = complex36.sub(complex43);
        complex45.real = 0.0d;
        code.src.Complex complex50 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double51 = complex50.abs();
        double double52 = complex50.real;
        code.src.Complex complex55 = code.src.Complex.polar(445.65251212240173d, 525.4704025737593d);
        code.src.Complex complex56 = complex50.multiply(complex55);
        code.src.Complex complex57 = complex45.add(complex50);
        java.lang.String str58 = complex50.toString();
        code.src.Complex complex61 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex64 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex65 = complex61.multiply(complex64);
        java.lang.String str66 = complex61.toString();
        code.src.Complex complex69 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex72 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex73 = complex69.multiply(complex72);
        code.src.Complex complex74 = complex61.add(complex73);
        double double75 = complex74.real;
        code.src.Complex complex78 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex81 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex82 = complex78.multiply(complex81);
        double double83 = complex82.imaginary;
        code.src.Complex complex84 = complex74.sub(complex82);
        code.src.Complex complex85 = complex50.multiply(complex82);
        double double86 = complex82.imaginary;
        double double87 = complex82.real;
        complex82.imaginary = 0.0d;
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 582.9143981028653d + "'", double37 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 52.0d + "'", double51 == 52.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 28.09571990514327d + "'", double52 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str58, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(10.0,0.0)" + "'", str66, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 290.95719905143267d + "'", double75 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 437.56491210010614d + "'", double83 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 437.56491210010614d + "'", double86 == 437.56491210010614d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 280.95719905143267d + "'", double87 == 280.95719905143267d);
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        complex2.real = (byte) 1;
        complex2.imaginary = (short) 100;
        code.src.Complex complex7 = new code.src.Complex();
        complex7.real = 1L;
        code.src.Complex complex12 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex15 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex16 = complex12.multiply(complex15);
        java.lang.String str17 = complex12.toString();
        code.src.Complex complex20 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex23 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex24 = complex20.multiply(complex23);
        code.src.Complex complex25 = complex12.add(complex24);
        code.src.Complex complex28 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex31 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex32 = complex28.multiply(complex31);
        java.lang.String str33 = complex28.toString();
        code.src.Complex complex36 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex39 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex40 = complex36.multiply(complex39);
        code.src.Complex complex41 = complex28.add(complex40);
        code.src.Complex complex42 = complex25.add(complex41);
        code.src.Complex complex43 = complex7.add(complex42);
        double double44 = complex7.imaginary;
        double double45 = complex7.imaginary;
        java.lang.String str46 = complex7.toString();
        code.src.Complex complex47 = complex2.sub(complex7);
        code.src.Complex complex50 = new code.src.Complex((double) (byte) 100, (double) 'a');
        code.src.Complex complex53 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex56 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex57 = complex53.multiply(complex56);
        double double58 = complex56.imaginary;
        java.lang.String str59 = complex56.toString();
        code.src.Complex complex60 = complex50.sub(complex56);
        code.src.Complex complex63 = new code.src.Complex((double) 100, (double) 10.0f);
        complex63.real = (byte) 1;
        code.src.Complex complex66 = complex56.multiply(complex63);
        code.src.Complex complex67 = complex47.sub(complex66);
        java.lang.Class<?> wildcardClass68 = complex47.getClass();
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(10.0,0.0)" + "'", str17, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(10.0,0.0)" + "'", str33, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(1.0,0.0)" + "'", str46, "(1.0,0.0)");
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 43.756491210010616d + "'", double58 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str59, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex38 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex41 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex42 = complex38.multiply(complex41);
        code.src.Complex complex43 = complex18.sub(complex38);
        code.src.Complex complex44 = new code.src.Complex();
        code.src.Complex complex47 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex50 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex51 = complex47.multiply(complex50);
        java.lang.String str52 = complex47.toString();
        code.src.Complex complex55 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex58 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex59 = complex55.multiply(complex58);
        code.src.Complex complex60 = complex47.add(complex59);
        code.src.Complex complex63 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex66 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex67 = complex63.multiply(complex66);
        java.lang.String str68 = complex63.toString();
        code.src.Complex complex71 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex74 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex75 = complex71.multiply(complex74);
        code.src.Complex complex76 = complex63.add(complex75);
        code.src.Complex complex77 = complex60.add(complex76);
        double double78 = complex77.real;
        code.src.Complex complex79 = complex44.multiply(complex77);
        code.src.Complex complex80 = complex18.multiply(complex77);
        code.src.Complex complex81 = complex2.sub(complex80);
        java.lang.String str82 = complex2.toString();
        complex2.real = 213613.9236394847d;
        double double85 = complex2.abs();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(10.0,0.0)" + "'", str52, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(10.0,0.0)" + "'", str68, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 581.9143981028653d + "'", double78 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "(100.0,10.0)" + "'", str82, "(100.0,10.0)");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 213613.92387355183d + "'", double85 == 213613.92387355183d);
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        code.src.Complex complex2 = code.src.Complex.polar(0.0d, 280.95719905143267d);
        complex2.real = (-288.4361024143587d);
        double double5 = complex2.abs();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 288.4361024143587d + "'", double5 == 288.4361024143587d);
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        code.src.Complex complex2 = new code.src.Complex((double) 1, 28.09571990514327d);
        code.src.Complex complex5 = new code.src.Complex((double) (short) 0, (double) ' ');
        code.src.Complex complex6 = new code.src.Complex();
        complex6.real = 1L;
        code.src.Complex complex11 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex14 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex15 = complex11.multiply(complex14);
        java.lang.String str16 = complex11.toString();
        code.src.Complex complex19 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex22 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex23 = complex19.multiply(complex22);
        code.src.Complex complex24 = complex11.add(complex23);
        code.src.Complex complex27 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex30 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex31 = complex27.multiply(complex30);
        java.lang.String str32 = complex27.toString();
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        code.src.Complex complex40 = complex27.add(complex39);
        code.src.Complex complex41 = complex24.add(complex40);
        code.src.Complex complex42 = complex6.add(complex41);
        code.src.Complex complex43 = complex5.add(complex41);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double47 = complex46.abs();
        code.src.Complex complex48 = complex5.add(complex46);
        code.src.Complex complex49 = complex2.add(complex5);
        java.lang.Class<?> wildcardClass50 = complex5.getClass();
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(10.0,0.0)" + "'", str16, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(10.0,0.0)" + "'", str32, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 52.0d + "'", double47 == 52.0d);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = code.src.Complex.polar((double) (short) -1, 52.0d);
        code.src.Complex complex13 = new code.src.Complex((double) 100, (double) 10.0f);
        complex13.real = (byte) 1;
        complex13.real = 589.1068753368511d;
        java.lang.String str18 = complex13.toString();
        code.src.Complex complex21 = new code.src.Complex((double) (short) 100, 43.756491210010616d);
        code.src.Complex complex22 = new code.src.Complex();
        complex22.real = 1L;
        code.src.Complex complex27 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex30 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex31 = complex27.multiply(complex30);
        java.lang.String str32 = complex27.toString();
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        code.src.Complex complex40 = complex27.add(complex39);
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        java.lang.String str48 = complex43.toString();
        code.src.Complex complex51 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex54 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex55 = complex51.multiply(complex54);
        code.src.Complex complex56 = complex43.add(complex55);
        code.src.Complex complex57 = complex40.add(complex56);
        code.src.Complex complex58 = complex22.add(complex57);
        double double59 = complex58.real;
        code.src.Complex complex62 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex65 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex66 = complex62.multiply(complex65);
        code.src.Complex complex67 = complex58.sub(complex65);
        code.src.Complex complex68 = complex21.add(complex65);
        code.src.Complex complex69 = complex13.sub(complex65);
        code.src.Complex complex70 = complex10.add(complex13);
        complex70.imaginary = (-0.0d);
        code.src.Complex complex73 = complex2.multiply(complex70);
        double double74 = complex70.abs();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(589.1068753368511,10.0)" + "'", str18, "(589.1068753368511,10.0)");
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(10.0,0.0)" + "'", str32, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(10.0,0.0)" + "'", str48, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 582.9143981028653d + "'", double59 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 589.2698661176468d + "'", double74 == 589.2698661176468d);
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        code.src.Complex complex2 = code.src.Complex.polar((double) (short) -1, 52.0d);
        code.src.Complex complex5 = new code.src.Complex((double) 100, (double) 10.0f);
        complex5.real = (byte) 1;
        complex5.real = 589.1068753368511d;
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) (short) 100, 43.756491210010616d);
        code.src.Complex complex14 = new code.src.Complex();
        complex14.real = 1L;
        code.src.Complex complex19 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex22 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex23 = complex19.multiply(complex22);
        java.lang.String str24 = complex19.toString();
        code.src.Complex complex27 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex30 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex31 = complex27.multiply(complex30);
        code.src.Complex complex32 = complex19.add(complex31);
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        java.lang.String str40 = complex35.toString();
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        code.src.Complex complex48 = complex35.add(complex47);
        code.src.Complex complex49 = complex32.add(complex48);
        code.src.Complex complex50 = complex14.add(complex49);
        double double51 = complex50.real;
        code.src.Complex complex54 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex57 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex58 = complex54.multiply(complex57);
        code.src.Complex complex59 = complex50.sub(complex57);
        code.src.Complex complex60 = complex13.add(complex57);
        code.src.Complex complex61 = complex5.sub(complex57);
        code.src.Complex complex62 = complex2.add(complex5);
        java.lang.String str63 = complex62.toString();
        double double64 = complex62.imaginary;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(589.1068753368511,10.0)" + "'", str10, "(589.1068753368511,10.0)");
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(10.0,0.0)" + "'", str24, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(10.0,0.0)" + "'", str40, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 582.9143981028653d + "'", double51 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(589.2698661176468,9.013372407959515)" + "'", str63, "(589.2698661176468,9.013372407959515)");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 9.013372407959515d + "'", double64 == 9.013372407959515d);
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        code.src.Complex complex2 = code.src.Complex.polar(492.8116754934422d, (double) (byte) 100);
        complex2.imaginary = ' ';
        java.lang.Class<?> wildcardClass5 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 0, (double) ' ');
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        code.src.Complex complex40 = complex2.add(complex38);
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        double double48 = complex46.imaginary;
        java.lang.String str49 = complex46.toString();
        code.src.Complex complex52 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double53 = complex52.abs();
        double double54 = complex52.real;
        code.src.Complex complex55 = complex46.sub(complex52);
        code.src.Complex complex56 = complex38.sub(complex46);
        code.src.Complex complex57 = new code.src.Complex();
        complex57.real = 1L;
        code.src.Complex complex62 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex65 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex66 = complex62.multiply(complex65);
        java.lang.String str67 = complex62.toString();
        code.src.Complex complex70 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex73 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex74 = complex70.multiply(complex73);
        code.src.Complex complex75 = complex62.add(complex74);
        code.src.Complex complex78 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex81 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex82 = complex78.multiply(complex81);
        java.lang.String str83 = complex78.toString();
        code.src.Complex complex86 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex89 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex90 = complex86.multiply(complex89);
        code.src.Complex complex91 = complex78.add(complex90);
        code.src.Complex complex92 = complex75.add(complex91);
        code.src.Complex complex93 = complex57.add(complex92);
        double double94 = complex57.imaginary;
        code.src.Complex complex95 = complex56.add(complex57);
        complex56.imaginary = (-54.40211108893698d);
        java.lang.String str98 = complex56.toString();
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 43.756491210010616d + "'", double48 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str49, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 52.0d + "'", double53 == 52.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 28.09571990514327d + "'", double54 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(10.0,0.0)" + "'", str67, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(10.0,0.0)" + "'", str83, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
        org.junit.Assert.assertNotNull(complex95);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "(553.8186781977221,-54.40211108893698)" + "'", str98, "(553.8186781977221,-54.40211108893698)");
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        code.src.Complex complex2 = code.src.Complex.polar(432.1247009912124d, 14.841058233505056d);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        code.src.Complex complex2 = code.src.Complex.polar((-317.11773840932915d), (double) (-1.0f));
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        double double40 = complex39.real;
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        code.src.Complex complex48 = complex39.sub(complex46);
        double double49 = complex39.imaginary;
        code.src.Complex complex50 = complex2.sub(complex39);
        complex39.imaginary = (-317.11773840932915d);
        double double53 = complex39.real;
        java.lang.String str54 = complex39.toString();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 582.9143981028653d + "'", double40 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 875.1298242002123d + "'", double49 == 875.1298242002123d);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 582.9143981028653d + "'", double53 == 582.9143981028653d);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(582.9143981028653,-317.11773840932915)" + "'", str54, "(582.9143981028653,-317.11773840932915)");
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        complex2.real = (byte) 1;
        complex2.imaginary = (short) 100;
        code.src.Complex complex9 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex12 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex13 = complex9.multiply(complex12);
        java.lang.String str14 = complex9.toString();
        code.src.Complex complex17 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex20 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex21 = complex17.multiply(complex20);
        code.src.Complex complex22 = complex9.add(complex21);
        double double23 = complex22.real;
        code.src.Complex complex26 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex27 = complex22.multiply(complex26);
        code.src.Complex complex28 = complex2.multiply(complex22);
        code.src.Complex complex31 = code.src.Complex.polar((double) ' ', (double) (byte) 100);
        code.src.Complex complex32 = complex22.multiply(complex31);
        complex22.real = 525.4704025737593d;
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(10.0,0.0)" + "'", str14, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 290.95719905143267d + "'", double23 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        code.src.Complex complex9 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex12 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex13 = complex9.multiply(complex12);
        java.lang.String str14 = complex9.toString();
        code.src.Complex complex17 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex20 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex21 = complex17.multiply(complex20);
        code.src.Complex complex22 = complex9.add(complex21);
        code.src.Complex complex25 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex28 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex29 = complex25.multiply(complex28);
        java.lang.String str30 = complex25.toString();
        code.src.Complex complex33 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex36 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex37 = complex33.multiply(complex36);
        code.src.Complex complex38 = complex25.add(complex37);
        code.src.Complex complex39 = complex22.add(complex38);
        code.src.Complex complex42 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex45 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex46 = complex42.multiply(complex45);
        code.src.Complex complex47 = complex22.sub(complex42);
        code.src.Complex complex48 = complex5.add(complex47);
        double double49 = complex48.abs();
        double double50 = complex48.imaginary;
        complex48.real = (short) -1;
        java.lang.String str53 = complex48.toString();
        complex48.imaginary = 109.15415943981125d;
        code.src.Complex complex58 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex61 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex62 = complex58.multiply(complex61);
        double double63 = complex61.imaginary;
        java.lang.String str64 = complex61.toString();
        code.src.Complex complex67 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double68 = complex67.abs();
        double double69 = complex67.real;
        code.src.Complex complex70 = complex61.sub(complex67);
        double double71 = complex70.real;
        code.src.Complex complex72 = complex48.add(complex70);
        double double73 = complex48.abs();
        complex48.imaginary = 811.5511719071119d;
        java.lang.Class<?> wildcardClass76 = complex48.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(10.0,0.0)" + "'", str14, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(10.0,0.0)" + "'", str30, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 572.0d + "'", double49 == 572.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 481.32140331011675d + "'", double50 == 481.32140331011675d);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(-1.0,481.32140331011675)" + "'", str53, "(-1.0,481.32140331011675)");
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 43.756491210010616d + "'", double63 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str64, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 52.0d + "'", double68 == 52.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 28.09571990514327d + "'", double69 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 109.15874002118079d + "'", double73 == 109.15874002118079d);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 1, 290.95719905143267d);
        java.lang.String str3 = complex2.toString();
        code.src.Complex complex6 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double7 = complex6.abs();
        double double8 = complex6.real;
        code.src.Complex complex11 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex14 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex15 = complex11.multiply(complex14);
        java.lang.String str16 = complex11.toString();
        code.src.Complex complex19 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex22 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex23 = complex19.multiply(complex22);
        code.src.Complex complex24 = complex11.add(complex23);
        code.src.Complex complex27 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex30 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex31 = complex27.multiply(complex30);
        java.lang.String str32 = complex27.toString();
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        code.src.Complex complex40 = complex27.add(complex39);
        code.src.Complex complex41 = complex24.add(complex40);
        java.lang.String str42 = complex24.toString();
        double double43 = complex24.abs();
        double double44 = complex24.real;
        code.src.Complex complex45 = complex6.sub(complex24);
        code.src.Complex complex46 = complex2.add(complex6);
        double double47 = complex6.real;
        java.lang.String str48 = complex6.toString();
        complex6.imaginary = 0.0d;
        complex6.imaginary = 481.32140331011675d;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "(1.0,290.95719905143267)" + "'", str3, "(1.0,290.95719905143267)");
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 28.09571990514327d + "'", double8 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(10.0,0.0)" + "'", str16, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(10.0,0.0)" + "'", str32, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str42, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 525.4704025737593d + "'", double43 == 525.4704025737593d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 290.95719905143267d + "'", double44 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 28.09571990514327d + "'", double47 == 28.09571990514327d);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str48, "(28.09571990514327,43.756491210010616)");
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        code.src.Complex complex2 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double3 = complex2.abs();
        double double4 = complex2.real;
        code.src.Complex complex7 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex10 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex11 = complex7.multiply(complex10);
        java.lang.String str12 = complex7.toString();
        code.src.Complex complex15 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex18 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex19 = complex15.multiply(complex18);
        code.src.Complex complex20 = complex7.add(complex19);
        code.src.Complex complex23 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex26 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex27 = complex23.multiply(complex26);
        java.lang.String str28 = complex23.toString();
        code.src.Complex complex31 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex34 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex35 = complex31.multiply(complex34);
        code.src.Complex complex36 = complex23.add(complex35);
        code.src.Complex complex37 = complex20.add(complex36);
        java.lang.String str38 = complex20.toString();
        double double39 = complex20.abs();
        double double40 = complex20.real;
        code.src.Complex complex41 = complex2.sub(complex20);
        code.src.Complex complex44 = code.src.Complex.polar(875.1298242002123d, (double) (-1L));
        code.src.Complex complex45 = complex41.sub(complex44);
        complex45.real = (-43.756491210010616d);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 52.0d + "'", double3 == 52.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 28.09571990514327d + "'", double4 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(10.0,0.0)" + "'", str12, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(10.0,0.0)" + "'", str28, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str38, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 525.4704025737593d + "'", double39 == 525.4704025737593d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 290.95719905143267d + "'", double40 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        code.src.Complex complex2 = new code.src.Complex(213613.9236394847d, 100.0d);
        code.src.Complex complex5 = new code.src.Complex(0.0d, (double) 'a');
        code.src.Complex complex6 = complex2.sub(complex5);
        code.src.Complex complex7 = new code.src.Complex();
        complex7.real = 1L;
        code.src.Complex complex12 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex15 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex16 = complex12.multiply(complex15);
        java.lang.String str17 = complex12.toString();
        code.src.Complex complex20 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex23 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex24 = complex20.multiply(complex23);
        code.src.Complex complex25 = complex12.add(complex24);
        code.src.Complex complex28 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex31 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex32 = complex28.multiply(complex31);
        java.lang.String str33 = complex28.toString();
        code.src.Complex complex36 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex39 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex40 = complex36.multiply(complex39);
        code.src.Complex complex41 = complex28.add(complex40);
        code.src.Complex complex42 = complex25.add(complex41);
        code.src.Complex complex43 = complex7.add(complex42);
        double double44 = complex43.real;
        java.lang.String str45 = complex43.toString();
        code.src.Complex complex48 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex51 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex52 = complex48.multiply(complex51);
        java.lang.String str53 = complex48.toString();
        code.src.Complex complex56 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex59 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex60 = complex56.multiply(complex59);
        code.src.Complex complex61 = complex48.add(complex60);
        double double62 = complex61.real;
        code.src.Complex complex65 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex68 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex69 = complex65.multiply(complex68);
        double double70 = complex69.imaginary;
        code.src.Complex complex71 = complex61.sub(complex69);
        double double72 = complex61.imaginary;
        code.src.Complex complex73 = complex43.multiply(complex61);
        complex61.imaginary = 36.41428291206625d;
        code.src.Complex complex76 = complex2.multiply(complex61);
        code.src.Complex complex79 = new code.src.Complex((double) 100.0f, (double) 100.0f);
        double double80 = complex79.abs();
        code.src.Complex complex81 = complex61.sub(complex79);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(10.0,0.0)" + "'", str17, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(10.0,0.0)" + "'", str33, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 582.9143981028653d + "'", double44 == 582.9143981028653d);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "(582.9143981028653,875.1298242002123)" + "'", str45, "(582.9143981028653,875.1298242002123)");
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(10.0,0.0)" + "'", str53, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 290.95719905143267d + "'", double62 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 437.56491210010614d + "'", double70 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 437.56491210010614d + "'", double72 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 141.4213562373095d + "'", double80 == 141.4213562373095d);
        org.junit.Assert.assertNotNull(complex81);
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex38 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex41 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex42 = complex38.multiply(complex41);
        code.src.Complex complex43 = complex18.sub(complex38);
        code.src.Complex complex44 = new code.src.Complex();
        code.src.Complex complex47 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex50 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex51 = complex47.multiply(complex50);
        java.lang.String str52 = complex47.toString();
        code.src.Complex complex55 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex58 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex59 = complex55.multiply(complex58);
        code.src.Complex complex60 = complex47.add(complex59);
        code.src.Complex complex63 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex66 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex67 = complex63.multiply(complex66);
        java.lang.String str68 = complex63.toString();
        code.src.Complex complex71 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex74 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex75 = complex71.multiply(complex74);
        code.src.Complex complex76 = complex63.add(complex75);
        code.src.Complex complex77 = complex60.add(complex76);
        double double78 = complex77.real;
        code.src.Complex complex79 = complex44.multiply(complex77);
        code.src.Complex complex80 = complex18.multiply(complex77);
        code.src.Complex complex81 = complex2.sub(complex80);
        complex2.imaginary = 0L;
        double double84 = complex2.abs();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(10.0,0.0)" + "'", str52, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(10.0,0.0)" + "'", str68, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 581.9143981028653d + "'", double78 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 100.0d + "'", double84 == 100.0d);
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        code.src.Complex complex2 = code.src.Complex.polar(242.7106111527617d, 430.3716436914759d);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 1, 15118.903072407044d);
        java.lang.Class<?> wildcardClass3 = complex2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        code.src.Complex complex2 = code.src.Complex.polar(104.0d, 291.13071236105446d);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        code.src.Complex complex2 = code.src.Complex.polar(581.9143981028653d, (double) 1.0f);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        double double33 = complex15.real;
        double double34 = complex15.real;
        code.src.Complex complex37 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex40 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex41 = complex37.multiply(complex40);
        java.lang.String str42 = complex37.toString();
        code.src.Complex complex45 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex45.multiply(complex48);
        code.src.Complex complex50 = complex37.add(complex49);
        code.src.Complex complex53 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex56 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex57 = complex53.multiply(complex56);
        java.lang.String str58 = complex53.toString();
        code.src.Complex complex61 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex64 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex65 = complex61.multiply(complex64);
        code.src.Complex complex66 = complex53.add(complex65);
        code.src.Complex complex67 = complex50.add(complex66);
        code.src.Complex complex68 = complex15.sub(complex50);
        double double69 = complex50.abs();
        double double70 = complex50.abs();
        code.src.Complex complex73 = code.src.Complex.polar((double) (short) 1, 10.0d);
        code.src.Complex complex74 = complex50.multiply(complex73);
        double double75 = complex73.imaginary;
        complex73.real = (-213613.9212426372d);
        complex73.real = 290.9589175121722d;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 290.95719905143267d + "'", double33 == 290.95719905143267d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 290.95719905143267d + "'", double34 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(10.0,0.0)" + "'", str42, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(10.0,0.0)" + "'", str58, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 525.4704025737593d + "'", double69 == 525.4704025737593d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 525.4704025737593d + "'", double70 == 525.4704025737593d);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + (-0.5440211108893698d) + "'", double75 == (-0.5440211108893698d));
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        code.src.Complex complex2 = code.src.Complex.polar((-288.4361024143587d), (double) (-1L));
        java.lang.String str3 = complex2.toString();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "(-155.8426912300969,242.7106111527617)" + "'", str3, "(-155.8426912300969,242.7106111527617)");
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        double double37 = complex36.real;
        code.src.Complex complex40 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex43 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex44 = complex40.multiply(complex43);
        code.src.Complex complex45 = complex36.sub(complex43);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex43.add(complex48);
        code.src.Complex complex52 = new code.src.Complex((double) 10L, (double) '#');
        code.src.Complex complex53 = complex48.add(complex52);
        complex48.real = 43.756491210010616d;
        double double56 = complex48.abs();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 582.9143981028653d + "'", double37 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 61.88102331105613d + "'", double56 == 61.88102331105613d);
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        code.src.Complex complex2 = code.src.Complex.polar(100.0d, 28.09571990514327d);
        java.lang.Class<?> wildcardClass3 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        code.src.Complex complex33 = new code.src.Complex();
        code.src.Complex complex34 = complex32.add(complex33);
        code.src.Complex complex37 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex40 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex41 = complex37.multiply(complex40);
        double double42 = complex40.imaginary;
        java.lang.String str43 = complex40.toString();
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double47 = complex46.abs();
        double double48 = complex46.real;
        code.src.Complex complex49 = complex40.sub(complex46);
        code.src.Complex complex50 = complex33.sub(complex40);
        double double51 = complex33.real;
        code.src.Complex complex54 = new code.src.Complex(100.0d, (-1.0d));
        double double55 = complex54.abs();
        code.src.Complex complex56 = complex33.sub(complex54);
        complex54.imaginary = (-1.0d);
        java.lang.Class<?> wildcardClass59 = complex54.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 43.756491210010616d + "'", double42 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str43, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 52.0d + "'", double47 == 52.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 28.09571990514327d + "'", double48 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 100.00499987500625d + "'", double55 == 100.00499987500625d);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        code.src.Complex complex2 = new code.src.Complex(10.04987562112089d, (double) '#');
        double double3 = complex2.abs();
        code.src.Complex complex6 = new code.src.Complex(28.09571990514327d, 907.1298242002123d);
        code.src.Complex complex7 = complex2.multiply(complex6);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 36.41428291206625d + "'", double3 == 36.41428291206625d);
        org.junit.Assert.assertNotNull(complex7);
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        code.src.Complex complex39 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex42 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex43 = complex39.multiply(complex42);
        java.lang.String str44 = complex39.toString();
        code.src.Complex complex47 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex50 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex51 = complex47.multiply(complex50);
        code.src.Complex complex52 = complex39.add(complex51);
        code.src.Complex complex55 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex58 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex59 = complex55.multiply(complex58);
        java.lang.String str60 = complex55.toString();
        code.src.Complex complex63 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex66 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex67 = complex63.multiply(complex66);
        code.src.Complex complex68 = complex55.add(complex67);
        code.src.Complex complex69 = complex52.add(complex68);
        code.src.Complex complex72 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex75 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex76 = complex72.multiply(complex75);
        code.src.Complex complex77 = complex52.sub(complex72);
        java.lang.String str78 = complex52.toString();
        code.src.Complex complex79 = complex35.multiply(complex52);
        complex52.real = 10.0f;
        java.lang.Class<?> wildcardClass82 = complex52.getClass();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(10.0,0.0)" + "'", str44, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(10.0,0.0)" + "'", str60, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str78, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        code.src.Complex complex33 = new code.src.Complex();
        code.src.Complex complex34 = complex32.add(complex33);
        code.src.Complex complex37 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex40 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex41 = complex37.multiply(complex40);
        double double42 = complex40.imaginary;
        java.lang.String str43 = complex40.toString();
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double47 = complex46.abs();
        double double48 = complex46.real;
        code.src.Complex complex49 = complex40.sub(complex46);
        code.src.Complex complex50 = complex33.sub(complex40);
        double double51 = complex33.real;
        code.src.Complex complex54 = new code.src.Complex(100.0d, (-1.0d));
        double double55 = complex54.abs();
        code.src.Complex complex56 = complex33.sub(complex54);
        java.lang.String str57 = complex56.toString();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 43.756491210010616d + "'", double42 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str43, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 52.0d + "'", double47 == 52.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 28.09571990514327d + "'", double48 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 100.00499987500625d + "'", double55 == 100.00499987500625d);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(-100.0,1.0)" + "'", str57, "(-100.0,1.0)");
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        code.src.Complex complex2 = code.src.Complex.polar((-44.52533050340393d), (-0.5440211108893698d));
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        code.src.Complex complex2 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        complex2.real = 582.9143981028653d;
        code.src.Complex complex7 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str8 = complex7.toString();
        code.src.Complex complex11 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        code.src.Complex complex12 = complex7.sub(complex11);
        code.src.Complex complex13 = complex2.sub(complex11);
        double double14 = complex11.abs();
        double double15 = complex11.real;
        java.lang.Class<?> wildcardClass16 = complex11.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(100.0,10.0)" + "'", str8, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 582.9143981028653d + "'", double14 == 582.9143981028653d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-489.10687533685115d) + "'", double15 == (-489.10687533685115d));
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        code.src.Complex complex2 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double3 = complex2.abs();
        java.lang.String str4 = complex2.toString();
        complex2.imaginary = 'a';
        complex2.imaginary = 0.0d;
        double double9 = complex2.abs();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 52.0d + "'", double3 == 52.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str4, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 28.09571990514327d + "'", double9 == 28.09571990514327d);
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        code.src.Complex complex2 = code.src.Complex.polar((double) (short) 0, (-213613.9212426372d));
        complex2.imaginary = (-8062.246137461803d);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        code.src.Complex complex33 = new code.src.Complex();
        code.src.Complex complex34 = complex32.add(complex33);
        double double35 = complex32.real;
        complex32.imaginary = 71852.21111515388d;
        java.lang.Class<?> wildcardClass38 = complex32.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 581.9143981028653d + "'", double35 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        code.src.Complex complex2 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        code.src.Complex complex5 = new code.src.Complex(290.95719905143267d, (-213613.9212426372d));
        code.src.Complex complex6 = complex2.add(complex5);
        complex6.real = 1018.3729221500101d;
        complex6.imaginary = 276080.4779057942d;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex6);
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        code.src.Complex complex2 = new code.src.Complex((double) ' ', (double) 0);
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        code.src.Complex complex0 = new code.src.Complex();
        code.src.Complex complex3 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex6 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex7 = complex3.multiply(complex6);
        java.lang.String str8 = complex3.toString();
        code.src.Complex complex11 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex14 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex15 = complex11.multiply(complex14);
        code.src.Complex complex16 = complex3.add(complex15);
        code.src.Complex complex19 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex22 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex23 = complex19.multiply(complex22);
        java.lang.String str24 = complex19.toString();
        code.src.Complex complex27 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex30 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex31 = complex27.multiply(complex30);
        code.src.Complex complex32 = complex19.add(complex31);
        code.src.Complex complex33 = complex16.add(complex32);
        double double34 = complex33.real;
        code.src.Complex complex35 = complex0.multiply(complex33);
        java.lang.String str36 = complex35.toString();
        double double37 = complex35.imaginary;
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(10.0,0.0)" + "'", str8, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(10.0,0.0)" + "'", str24, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 581.9143981028653d + "'", double34 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(0.0,0.0)" + "'", str36, "(0.0,0.0)");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex38 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex41 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex42 = complex38.multiply(complex41);
        code.src.Complex complex43 = complex18.sub(complex38);
        code.src.Complex complex44 = new code.src.Complex();
        code.src.Complex complex47 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex50 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex51 = complex47.multiply(complex50);
        java.lang.String str52 = complex47.toString();
        code.src.Complex complex55 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex58 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex59 = complex55.multiply(complex58);
        code.src.Complex complex60 = complex47.add(complex59);
        code.src.Complex complex63 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex66 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex67 = complex63.multiply(complex66);
        java.lang.String str68 = complex63.toString();
        code.src.Complex complex71 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex74 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex75 = complex71.multiply(complex74);
        code.src.Complex complex76 = complex63.add(complex75);
        code.src.Complex complex77 = complex60.add(complex76);
        double double78 = complex77.real;
        code.src.Complex complex79 = complex44.multiply(complex77);
        code.src.Complex complex80 = complex18.multiply(complex77);
        code.src.Complex complex81 = complex2.sub(complex80);
        complex2.imaginary = 0L;
        complex2.real = (byte) 10;
        java.lang.String str86 = complex2.toString();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(10.0,0.0)" + "'", str52, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(10.0,0.0)" + "'", str68, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 581.9143981028653d + "'", double78 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "(10.0,0.0)" + "'", str86, "(10.0,0.0)");
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str3 = complex2.toString();
        code.src.Complex complex6 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        code.src.Complex complex7 = complex2.sub(complex6);
        complex2.real = (-213613.9212426372d);
        double double10 = complex2.abs();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        double double18 = complex17.imaginary;
        java.lang.String str19 = complex17.toString();
        java.lang.String str20 = complex17.toString();
        code.src.Complex complex23 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex26 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex27 = complex23.multiply(complex26);
        java.lang.String str28 = complex23.toString();
        code.src.Complex complex31 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex34 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex35 = complex31.multiply(complex34);
        code.src.Complex complex36 = complex23.add(complex35);
        code.src.Complex complex39 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex42 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex43 = complex39.multiply(complex42);
        java.lang.String str44 = complex39.toString();
        code.src.Complex complex47 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex50 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex51 = complex47.multiply(complex50);
        code.src.Complex complex52 = complex39.add(complex51);
        code.src.Complex complex53 = complex36.add(complex52);
        java.lang.String str54 = complex36.toString();
        code.src.Complex complex57 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex57.imaginary = (short) 0;
        java.lang.String str60 = complex57.toString();
        code.src.Complex complex61 = complex36.sub(complex57);
        code.src.Complex complex62 = complex17.sub(complex57);
        code.src.Complex complex65 = code.src.Complex.polar(28.09571990514327d, (-213613.9212426372d));
        complex65.real = 1;
        code.src.Complex complex68 = complex62.multiply(complex65);
        double double69 = complex62.real;
        code.src.Complex complex70 = complex2.add(complex62);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "(100.0,10.0)" + "'", str3, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 213613.92147670433d + "'", double10 == 213613.92147670433d);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 437.56491210010614d + "'", double18 == 437.56491210010614d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(280.95719905143267,437.56491210010614)" + "'", str19, "(280.95719905143267,437.56491210010614)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(280.95719905143267,437.56491210010614)" + "'", str20, "(280.95719905143267,437.56491210010614)");
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(10.0,0.0)" + "'", str28, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(10.0,0.0)" + "'", str44, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str54, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(-0.0,0.0)" + "'", str60, "(-0.0,0.0)");
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 280.95719905143267d + "'", double69 == 280.95719905143267d);
        org.junit.Assert.assertNotNull(complex70);
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        complex2.real = (byte) 1;
        complex2.imaginary = (short) 100;
        code.src.Complex complex7 = new code.src.Complex();
        complex7.real = 1L;
        code.src.Complex complex12 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex15 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex16 = complex12.multiply(complex15);
        java.lang.String str17 = complex12.toString();
        code.src.Complex complex20 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex23 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex24 = complex20.multiply(complex23);
        code.src.Complex complex25 = complex12.add(complex24);
        code.src.Complex complex28 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex31 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex32 = complex28.multiply(complex31);
        java.lang.String str33 = complex28.toString();
        code.src.Complex complex36 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex39 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex40 = complex36.multiply(complex39);
        code.src.Complex complex41 = complex28.add(complex40);
        code.src.Complex complex42 = complex25.add(complex41);
        code.src.Complex complex43 = complex7.add(complex42);
        double double44 = complex7.imaginary;
        double double45 = complex7.imaginary;
        java.lang.String str46 = complex7.toString();
        code.src.Complex complex47 = complex2.sub(complex7);
        code.src.Complex complex50 = new code.src.Complex((double) (byte) 100, (double) 'a');
        code.src.Complex complex53 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex56 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex57 = complex53.multiply(complex56);
        double double58 = complex56.imaginary;
        java.lang.String str59 = complex56.toString();
        code.src.Complex complex60 = complex50.sub(complex56);
        code.src.Complex complex63 = new code.src.Complex((double) 100, (double) 10.0f);
        complex63.real = (byte) 1;
        code.src.Complex complex66 = complex56.multiply(complex63);
        code.src.Complex complex67 = complex47.sub(complex66);
        double double68 = complex67.abs();
        complex67.real = 553.5830136072623d;
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(10.0,0.0)" + "'", str17, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(10.0,0.0)" + "'", str33, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(1.0,0.0)" + "'", str46, "(1.0,0.0)");
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 43.756491210010616d + "'", double58 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str59, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 467.07736184459986d + "'", double68 == 467.07736184459986d);
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        double double7 = complex5.imaginary;
        java.lang.String str8 = complex5.toString();
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double12 = complex11.abs();
        double double13 = complex11.real;
        code.src.Complex complex14 = complex5.sub(complex11);
        java.lang.String str15 = complex14.toString();
        code.src.Complex complex16 = new code.src.Complex();
        complex16.real = 1L;
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex37 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex40 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex41 = complex37.multiply(complex40);
        java.lang.String str42 = complex37.toString();
        code.src.Complex complex45 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex45.multiply(complex48);
        code.src.Complex complex50 = complex37.add(complex49);
        code.src.Complex complex51 = complex34.add(complex50);
        code.src.Complex complex52 = complex16.add(complex51);
        double double53 = complex52.real;
        code.src.Complex complex56 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex59 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex60 = complex56.multiply(complex59);
        code.src.Complex complex61 = complex52.sub(complex59);
        code.src.Complex complex64 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex65 = complex59.add(complex64);
        code.src.Complex complex68 = new code.src.Complex((double) 10L, (double) '#');
        code.src.Complex complex69 = complex64.add(complex68);
        code.src.Complex complex70 = complex14.sub(complex68);
        double double71 = complex68.imaginary;
        code.src.Complex complex74 = new code.src.Complex(481.32140331011675d, (double) ' ');
        code.src.Complex complex75 = complex68.sub(complex74);
        double double76 = complex74.real;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 43.756491210010616d + "'", double7 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str8, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 52.0d + "'", double12 == 52.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 28.09571990514327d + "'", double13 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(0.0,0.0)" + "'", str15, "(0.0,0.0)");
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(10.0,0.0)" + "'", str42, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 582.9143981028653d + "'", double53 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 35.0d + "'", double71 == 35.0d);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 481.32140331011675d + "'", double76 == 481.32140331011675d);
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        code.src.Complex complex2 = code.src.Complex.polar(8.414709848078965d, 317.11773840932915d);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        double double33 = complex32.real;
        code.src.Complex complex36 = code.src.Complex.polar((double) (byte) 100, 582.9143981028653d);
        code.src.Complex complex37 = complex32.sub(complex36);
        double double38 = complex32.imaginary;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 581.9143981028653d + "'", double33 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 875.1298242002123d + "'", double38 == 875.1298242002123d);
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 100, 43.756491210010616d);
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        double double40 = complex39.real;
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        code.src.Complex complex48 = complex39.sub(complex46);
        code.src.Complex complex49 = complex2.add(complex46);
        code.src.Complex complex52 = new code.src.Complex(43.756491210010616d, 0.0d);
        complex52.imaginary = 58.01650108462993d;
        code.src.Complex complex55 = complex2.sub(complex52);
        complex52.real = 58.01650108462993d;
        code.src.Complex complex58 = null;
        // The following exception was thrown during execution in test generation
        try {
            code.src.Complex complex59 = complex52.multiply(complex58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 582.9143981028653d + "'", double40 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex55);
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        code.src.Complex complex2 = new code.src.Complex(35.0d, 875.1298242002123d);
        double double3 = complex2.abs();
        code.src.Complex complex6 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        double double7 = complex6.abs();
        code.src.Complex complex10 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str11 = complex10.toString();
        code.src.Complex complex12 = complex6.multiply(complex10);
        double double13 = complex10.real;
        code.src.Complex complex16 = new code.src.Complex((double) 100, (double) 10.0f);
        complex16.real = (byte) 1;
        complex16.imaginary = (short) 100;
        code.src.Complex complex23 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex26 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex27 = complex23.multiply(complex26);
        java.lang.String str28 = complex23.toString();
        code.src.Complex complex31 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex34 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex35 = complex31.multiply(complex34);
        code.src.Complex complex36 = complex23.add(complex35);
        double double37 = complex36.real;
        code.src.Complex complex40 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex41 = complex36.multiply(complex40);
        code.src.Complex complex42 = complex16.multiply(complex36);
        code.src.Complex complex45 = code.src.Complex.polar((double) ' ', (double) (byte) 100);
        code.src.Complex complex46 = complex36.multiply(complex45);
        code.src.Complex complex47 = complex10.multiply(complex46);
        code.src.Complex complex48 = complex2.multiply(complex46);
        complex46.real = 1078.895181758881d;
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 875.8294407044641d + "'", double3 == 875.8294407044641d);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(100.0,10.0)" + "'", str11, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(10.0,0.0)" + "'", str28, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 290.95719905143267d + "'", double37 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        code.src.Complex complex2 = new code.src.Complex(43.756491210010616d, (-23.574318661312283d));
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex10.real = 10;
        code.src.Complex complex13 = complex2.multiply(complex10);
        code.src.Complex complex16 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        code.src.Complex complex17 = new code.src.Complex();
        complex17.real = 1L;
        code.src.Complex complex22 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex25 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex26 = complex22.multiply(complex25);
        java.lang.String str27 = complex22.toString();
        code.src.Complex complex30 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex33 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex34 = complex30.multiply(complex33);
        code.src.Complex complex35 = complex22.add(complex34);
        code.src.Complex complex38 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex41 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex42 = complex38.multiply(complex41);
        java.lang.String str43 = complex38.toString();
        code.src.Complex complex46 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex49 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex50 = complex46.multiply(complex49);
        code.src.Complex complex51 = complex38.add(complex50);
        code.src.Complex complex52 = complex35.add(complex51);
        code.src.Complex complex53 = complex17.add(complex52);
        double double54 = complex53.real;
        code.src.Complex complex57 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex60 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex61 = complex57.multiply(complex60);
        code.src.Complex complex62 = complex53.sub(complex60);
        double double63 = complex53.imaginary;
        code.src.Complex complex64 = complex16.sub(complex53);
        code.src.Complex complex65 = complex10.add(complex16);
        java.lang.Class<?> wildcardClass66 = complex16.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(10.0,0.0)" + "'", str27, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(10.0,0.0)" + "'", str43, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 582.9143981028653d + "'", double54 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 875.1298242002123d + "'", double63 == 875.1298242002123d);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        code.src.Complex complex0 = new code.src.Complex();
        code.src.Complex complex3 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex6 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex7 = complex3.multiply(complex6);
        java.lang.String str8 = complex3.toString();
        code.src.Complex complex11 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex14 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex15 = complex11.multiply(complex14);
        code.src.Complex complex16 = complex3.add(complex15);
        code.src.Complex complex19 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex22 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex23 = complex19.multiply(complex22);
        java.lang.String str24 = complex19.toString();
        code.src.Complex complex27 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex30 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex31 = complex27.multiply(complex30);
        code.src.Complex complex32 = complex19.add(complex31);
        code.src.Complex complex33 = complex16.add(complex32);
        double double34 = complex33.real;
        code.src.Complex complex35 = complex0.multiply(complex33);
        double double36 = complex33.abs();
        java.lang.String str37 = complex33.toString();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(10.0,0.0)" + "'", str8, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(10.0,0.0)" + "'", str24, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 581.9143981028653d + "'", double34 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1050.9408051475186d + "'", double36 == 1050.9408051475186d);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(581.9143981028653,875.1298242002123)" + "'", str37, "(581.9143981028653,875.1298242002123)");
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        code.src.Complex complex2 = new code.src.Complex(625.6708893128759d, 170.71953646075502d);
        complex2.real = 520.0d;
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        code.src.Complex complex2 = new code.src.Complex((double) 10.0f, 109.15415943981125d);
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        double double37 = complex36.real;
        code.src.Complex complex40 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex43 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex44 = complex40.multiply(complex43);
        code.src.Complex complex45 = complex36.sub(complex43);
        double double46 = complex36.imaginary;
        java.lang.Class<?> wildcardClass47 = complex36.getClass();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 582.9143981028653d + "'", double37 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 875.1298242002123d + "'", double46 == 875.1298242002123d);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        code.src.Complex complex2 = new code.src.Complex(119.9377093343606d, 0.0d);
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        code.src.Complex complex2 = new code.src.Complex(282.5664837606681d, (double) '#');
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        code.src.Complex complex33 = new code.src.Complex();
        code.src.Complex complex34 = complex32.add(complex33);
        double double35 = complex32.real;
        complex32.imaginary = (-54.40211108893698d);
        java.lang.Class<?> wildcardClass38 = complex32.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 581.9143981028653d + "'", double35 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        code.src.Complex complex2 = new code.src.Complex(101.9803902718557d, 10.04987562112089d);
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, (double) '#');
        double double3 = complex2.imaginary;
        code.src.Complex complex6 = new code.src.Complex((double) 100, (double) 10.0f);
        complex6.imaginary = 100L;
        java.lang.String str9 = complex6.toString();
        code.src.Complex complex10 = complex2.multiply(complex6);
        java.lang.Class<?> wildcardClass11 = complex6.getClass();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 35.0d + "'", double3 == 35.0d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(100.0,100.0)" + "'", str9, "(100.0,100.0)");
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        code.src.Complex complex2 = code.src.Complex.polar(511.0653454891018d, 10.04987562112089d);
        complex2.imaginary = (-1.0f);
        complex2.imaginary = (-363960.5478434686d);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        code.src.Complex complex2 = code.src.Complex.polar((-0.5440211108893698d), 100.00499987500625d);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        code.src.Complex complex2 = code.src.Complex.polar((-317.11773840932915d), (double) (-1.0f));
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        double double40 = complex39.real;
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        code.src.Complex complex48 = complex39.sub(complex46);
        double double49 = complex39.imaginary;
        code.src.Complex complex50 = complex2.sub(complex39);
        complex39.imaginary = (-317.11773840932915d);
        double double53 = complex39.abs();
        java.lang.String str54 = complex39.toString();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 582.9143981028653d + "'", double40 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 875.1298242002123d + "'", double49 == 875.1298242002123d);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 663.590879631022d + "'", double53 == 663.590879631022d);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(582.9143981028653,-317.11773840932915)" + "'", str54, "(582.9143981028653,-317.11773840932915)");
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        code.src.Complex complex2 = code.src.Complex.polar((-62.9683262670583d), (double) (short) 100);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        code.src.Complex complex2 = new code.src.Complex((double) 100.0f, 100.0d);
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        double double40 = complex39.real;
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        code.src.Complex complex48 = complex39.sub(complex46);
        code.src.Complex complex51 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex52 = complex46.add(complex51);
        code.src.Complex complex55 = new code.src.Complex((double) 10L, (double) '#');
        code.src.Complex complex56 = complex51.add(complex55);
        complex51.real = 43.756491210010616d;
        complex51.imaginary = 100.0d;
        code.src.Complex complex63 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        double double64 = complex63.abs();
        code.src.Complex complex65 = complex51.add(complex63);
        complex51.real = 100.00499987500625d;
        code.src.Complex complex68 = complex2.multiply(complex51);
        java.lang.String str69 = complex68.toString();
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 582.9143981028653d + "'", double40 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(0.49998750062513864,20000.499987500625)" + "'", str69, "(0.49998750062513864,20000.499987500625)");
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex38 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex41 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex42 = complex38.multiply(complex41);
        code.src.Complex complex43 = complex18.sub(complex38);
        code.src.Complex complex44 = new code.src.Complex();
        code.src.Complex complex47 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex50 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex51 = complex47.multiply(complex50);
        java.lang.String str52 = complex47.toString();
        code.src.Complex complex55 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex58 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex59 = complex55.multiply(complex58);
        code.src.Complex complex60 = complex47.add(complex59);
        code.src.Complex complex63 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex66 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex67 = complex63.multiply(complex66);
        java.lang.String str68 = complex63.toString();
        code.src.Complex complex71 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex74 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex75 = complex71.multiply(complex74);
        code.src.Complex complex76 = complex63.add(complex75);
        code.src.Complex complex77 = complex60.add(complex76);
        double double78 = complex77.real;
        code.src.Complex complex79 = complex44.multiply(complex77);
        code.src.Complex complex80 = complex18.multiply(complex77);
        code.src.Complex complex81 = complex2.sub(complex80);
        double double82 = complex81.abs();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(10.0,0.0)" + "'", str52, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(10.0,0.0)" + "'", str68, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 581.9143981028653d + "'", double78 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 552267.7562221194d + "'", double82 == 552267.7562221194d);
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        double double37 = complex36.real;
        code.src.Complex complex40 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex43 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex44 = complex40.multiply(complex43);
        code.src.Complex complex45 = complex36.sub(complex43);
        complex45.real = 0.0d;
        code.src.Complex complex50 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double51 = complex50.abs();
        double double52 = complex50.real;
        code.src.Complex complex55 = code.src.Complex.polar(445.65251212240173d, 525.4704025737593d);
        code.src.Complex complex56 = complex50.multiply(complex55);
        code.src.Complex complex57 = complex45.add(complex50);
        java.lang.Class<?> wildcardClass58 = complex57.getClass();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 582.9143981028653d + "'", double37 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 52.0d + "'", double51 == 52.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 28.09571990514327d + "'", double52 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        code.src.Complex complex2 = new code.src.Complex(875.1869567153606d, 437.56491210010614d);
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        code.src.Complex complex2 = code.src.Complex.polar(1077.733215908709d, 291.95719905143267d);
        java.lang.Class<?> wildcardClass3 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 0, (double) ' ');
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        code.src.Complex complex40 = complex2.add(complex38);
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        double double48 = complex46.imaginary;
        java.lang.String str49 = complex46.toString();
        code.src.Complex complex52 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double53 = complex52.abs();
        double double54 = complex52.real;
        code.src.Complex complex55 = complex46.sub(complex52);
        code.src.Complex complex56 = complex38.sub(complex46);
        code.src.Complex complex57 = new code.src.Complex();
        complex57.real = 1L;
        code.src.Complex complex62 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex65 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex66 = complex62.multiply(complex65);
        java.lang.String str67 = complex62.toString();
        code.src.Complex complex70 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex73 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex74 = complex70.multiply(complex73);
        code.src.Complex complex75 = complex62.add(complex74);
        code.src.Complex complex78 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex81 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex82 = complex78.multiply(complex81);
        java.lang.String str83 = complex78.toString();
        code.src.Complex complex86 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex89 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex90 = complex86.multiply(complex89);
        code.src.Complex complex91 = complex78.add(complex90);
        code.src.Complex complex92 = complex75.add(complex91);
        code.src.Complex complex93 = complex57.add(complex92);
        java.lang.String str94 = complex57.toString();
        code.src.Complex complex95 = complex46.sub(complex57);
        double double96 = complex95.abs();
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 43.756491210010616d + "'", double48 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str49, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 52.0d + "'", double53 == 52.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 28.09571990514327d + "'", double54 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(10.0,0.0)" + "'", str67, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(10.0,0.0)" + "'", str83, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "(1.0,0.0)" + "'", str94, "(1.0,0.0)");
        org.junit.Assert.assertNotNull(complex95);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 51.46657711748192d + "'", double96 == 51.46657711748192d);
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        code.src.Complex complex2 = new code.src.Complex(907.5648116969368d, 0.0d);
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        code.src.Complex complex9 = new code.src.Complex((double) 100, (double) 10.0f);
        complex9.real = (byte) 1;
        complex9.imaginary = (short) 100;
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        java.lang.String str21 = complex16.toString();
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        code.src.Complex complex29 = complex16.add(complex28);
        double double30 = complex29.real;
        code.src.Complex complex33 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex34 = complex29.multiply(complex33);
        code.src.Complex complex35 = complex9.multiply(complex29);
        code.src.Complex complex36 = complex2.sub(complex29);
        code.src.Complex complex39 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex42 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex43 = complex39.multiply(complex42);
        java.lang.String str44 = complex39.toString();
        code.src.Complex complex47 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex50 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex51 = complex47.multiply(complex50);
        code.src.Complex complex52 = complex39.add(complex51);
        code.src.Complex complex55 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex58 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex59 = complex55.multiply(complex58);
        java.lang.String str60 = complex55.toString();
        code.src.Complex complex63 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex66 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex67 = complex63.multiply(complex66);
        code.src.Complex complex68 = complex55.add(complex67);
        code.src.Complex complex69 = complex52.add(complex68);
        double double70 = complex52.real;
        double double71 = complex52.real;
        java.lang.String str72 = complex52.toString();
        complex52.real = 14827.945873355611d;
        code.src.Complex complex75 = complex2.sub(complex52);
        double double76 = complex52.abs();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(10.0,0.0)" + "'", str21, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 290.95719905143267d + "'", double30 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(10.0,0.0)" + "'", str44, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(10.0,0.0)" + "'", str60, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 290.95719905143267d + "'", double70 == 290.95719905143267d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 290.95719905143267d + "'", double71 == 290.95719905143267d);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str72, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 14834.400624071903d + "'", double76 == 14834.400624071903d);
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        double double37 = complex36.real;
        code.src.Complex complex40 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex43 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex44 = complex40.multiply(complex43);
        code.src.Complex complex45 = complex36.sub(complex43);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex43.add(complex48);
        code.src.Complex complex52 = new code.src.Complex((double) 10L, (double) '#');
        code.src.Complex complex53 = complex48.add(complex52);
        complex48.real = 43.756491210010616d;
        complex48.imaginary = 100.0d;
        complex48.imaginary = (-317.11773840932915d);
        code.src.Complex complex62 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex65 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex66 = complex62.multiply(complex65);
        java.lang.String str67 = complex62.toString();
        code.src.Complex complex70 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex73 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex74 = complex70.multiply(complex73);
        code.src.Complex complex75 = complex62.add(complex74);
        code.src.Complex complex76 = complex48.multiply(complex74);
        double double77 = complex74.imaginary;
        complex74.imaginary = 10.04987562112089d;
        complex74.imaginary = (-509251.64491133287d);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 582.9143981028653d + "'", double37 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(10.0,0.0)" + "'", str67, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 437.56491210010614d + "'", double77 == 437.56491210010614d);
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        code.src.Complex complex2 = code.src.Complex.polar((double) 1L, (double) 100);
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        double double40 = complex39.real;
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        code.src.Complex complex48 = complex39.sub(complex46);
        code.src.Complex complex51 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex52 = complex46.add(complex51);
        code.src.Complex complex55 = new code.src.Complex((double) 10L, (double) '#');
        code.src.Complex complex56 = complex51.add(complex55);
        code.src.Complex complex59 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex59.imaginary = (short) 0;
        complex59.imaginary = 100.0f;
        code.src.Complex complex64 = complex51.multiply(complex59);
        code.src.Complex complex65 = complex2.add(complex59);
        complex59.real = 430.3716436914759d;
        complex59.imaginary = 71852.21111515388d;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 582.9143981028653d + "'", double40 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        code.src.Complex complex2 = code.src.Complex.polar((-317.11773840932915d), (double) (-1.0f));
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        double double40 = complex39.real;
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        code.src.Complex complex48 = complex39.sub(complex46);
        double double49 = complex39.imaginary;
        code.src.Complex complex50 = complex2.sub(complex39);
        code.src.Complex complex53 = new code.src.Complex((double) (short) 0, (double) ' ');
        code.src.Complex complex56 = new code.src.Complex((double) 10L, (double) '#');
        double double57 = complex56.imaginary;
        code.src.Complex complex58 = complex53.multiply(complex56);
        code.src.Complex complex59 = complex50.multiply(complex56);
        code.src.Complex complex62 = code.src.Complex.polar((double) 100, 572.0d);
        code.src.Complex complex63 = complex56.multiply(complex62);
        double double64 = complex56.imaginary;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 582.9143981028653d + "'", double40 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 875.1298242002123d + "'", double49 == 875.1298242002123d);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 35.0d + "'", double57 == 35.0d);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 35.0d + "'", double64 == 35.0d);
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        code.src.Complex complex2 = new code.src.Complex(290.95719905143267d, 1051.4948429356753d);
        double double3 = complex2.real;
        code.src.Complex complex6 = new code.src.Complex((double) 100, (double) 10.0f);
        complex6.real = (byte) 1;
        complex6.imaginary = (short) 100;
        double double11 = complex6.imaginary;
        code.src.Complex complex12 = complex2.add(complex6);
        double double13 = complex2.abs();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 290.95719905143267d + "'", double3 == 290.95719905143267d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1091.0075601938674d + "'", double13 == 1091.0075601938674d);
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        code.src.Complex complex2 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex2.imaginary = (short) 0;
        double double5 = complex2.abs();
        double double6 = complex2.real;
        double double7 = complex2.real;
        double double8 = complex2.imaginary;
        complex2.real = (-288.4361024143587d);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-0.0d) + "'", double6 == (-0.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-0.0d) + "'", double7 == (-0.0d));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        double double8 = complex2.real;
        code.src.Complex complex11 = new code.src.Complex((double) (byte) 1, (double) (-1.0f));
        complex11.imaginary = (byte) 1;
        code.src.Complex complex14 = complex2.multiply(complex11);
        java.lang.Class<?> wildcardClass15 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        code.src.Complex complex2 = code.src.Complex.polar(109.15415943981125d, (-389.10687533685115d));
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        double double33 = complex15.real;
        code.src.Complex complex36 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex36.imaginary = (short) 0;
        complex36.imaginary = 100.0f;
        code.src.Complex complex41 = complex15.sub(complex36);
        complex41.imaginary = (-198.14967628541848d);
        complex41.real = 10.0d;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 290.95719905143267d + "'", double33 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex41);
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        code.src.Complex complex2 = new code.src.Complex(525.4704025737593d, (double) 10L);
        code.src.Complex complex5 = code.src.Complex.polar(907.1298242002123d, (-389.10687533685115d));
        code.src.Complex complex6 = complex2.add(complex5);
        java.lang.String str7 = complex2.toString();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(525.4704025737593,10.0)" + "'", str7, "(525.4704025737593,10.0)");
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        complex2.imaginary = (-1.0f);
        double double18 = complex2.real;
        double double19 = complex2.real;
        complex2.imaginary = 141.4213562373095d;
        code.src.Complex complex24 = new code.src.Complex((double) (byte) 1, (double) (-1.0f));
        complex24.imaginary = (byte) 1;
        code.src.Complex complex27 = complex2.multiply(complex24);
        double double28 = complex2.abs();
        complex2.real = 875.8294407044641d;
        double double31 = complex2.real;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 141.77446878757826d + "'", double28 == 141.77446878757826d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 875.8294407044641d + "'", double31 == 875.8294407044641d);
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        code.src.Complex complex2 = new code.src.Complex(290.95719905143267d, 1051.4948429356753d);
        complex2.imaginary = 220.6179825218609d;
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        code.src.Complex complex2 = code.src.Complex.polar(290.95719905143267d, (double) 1.0f);
        java.lang.String str3 = complex2.toString();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "(157.2048455564244,244.83204082275623)" + "'", str3, "(157.2048455564244,244.83204082275623)");
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        code.src.Complex complex9 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex12 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex13 = complex9.multiply(complex12);
        java.lang.String str14 = complex9.toString();
        code.src.Complex complex17 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex20 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex21 = complex17.multiply(complex20);
        code.src.Complex complex22 = complex9.add(complex21);
        code.src.Complex complex25 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex28 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex29 = complex25.multiply(complex28);
        java.lang.String str30 = complex25.toString();
        code.src.Complex complex33 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex36 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex37 = complex33.multiply(complex36);
        code.src.Complex complex38 = complex25.add(complex37);
        code.src.Complex complex39 = complex22.add(complex38);
        code.src.Complex complex42 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex45 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex46 = complex42.multiply(complex45);
        code.src.Complex complex47 = complex22.sub(complex42);
        code.src.Complex complex48 = complex5.add(complex47);
        double double49 = complex48.abs();
        code.src.Complex complex52 = new code.src.Complex(10.0d, (double) 10L);
        code.src.Complex complex55 = code.src.Complex.polar((double) '#', (double) (byte) 100);
        code.src.Complex complex56 = complex52.multiply(complex55);
        code.src.Complex complex57 = complex48.add(complex56);
        double double58 = complex57.abs();
        double double59 = complex57.real;
        code.src.Complex complex62 = code.src.Complex.polar(291.95719905143267d, 103.87188973436588d);
        code.src.Complex complex63 = complex57.multiply(complex62);
        java.lang.Class<?> wildcardClass64 = complex63.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(10.0,0.0)" + "'", str14, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(10.0,0.0)" + "'", str30, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 572.0d + "'", double49 == 572.0d);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 994.0878718290595d + "'", double58 == 994.0878718290595d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 788.0924986456808d + "'", double59 == 788.0924986456808d);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        code.src.Complex complex2 = new code.src.Complex(611.0101180080086d, (double) 100L);
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        java.lang.String str8 = complex2.toString();
        code.src.Complex complex11 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex14 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex15 = complex11.multiply(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        java.lang.String str32 = complex18.toString();
        code.src.Complex complex33 = complex15.add(complex18);
        code.src.Complex complex34 = complex2.sub(complex18);
        double double35 = complex34.real;
        java.lang.Class<?> wildcardClass36 = complex34.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(10.0,0.0)" + "'", str8, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(10.0,0.0)" + "'", str32, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        code.src.Complex complex40 = complex15.sub(complex35);
        double double41 = complex15.imaginary;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 437.56491210010614d + "'", double41 == 437.56491210010614d);
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        code.src.Complex complex2 = new code.src.Complex((double) (byte) 100, (double) 'a');
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        double double10 = complex8.imaginary;
        java.lang.String str11 = complex8.toString();
        code.src.Complex complex12 = complex2.sub(complex8);
        code.src.Complex complex15 = code.src.Complex.polar((double) (byte) 100, 582.9143981028653d);
        complex15.real = 875.1298242002123d;
        complex15.imaginary = (-317.11773840932915d);
        complex15.real = 0.0d;
        code.src.Complex complex22 = complex12.sub(complex15);
        code.src.Complex complex25 = code.src.Complex.polar(141.4213562373095d, (-35.0d));
        code.src.Complex complex26 = complex12.sub(complex25);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 43.756491210010616d + "'", double10 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str11, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        code.src.Complex complex2 = new code.src.Complex((double) (byte) 100, 437.56491210010614d);
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        double double40 = complex39.real;
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        code.src.Complex complex48 = complex39.sub(complex46);
        code.src.Complex complex51 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex52 = complex46.add(complex51);
        code.src.Complex complex53 = complex2.add(complex51);
        double double54 = complex51.real;
        double double55 = complex51.abs();
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 582.9143981028653d + "'", double40 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 28.09571990514327d + "'", double54 == 28.09571990514327d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 52.0d + "'", double55 == 52.0d);
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        code.src.Complex complex40 = complex15.sub(complex35);
        double double41 = complex40.imaginary;
        code.src.Complex complex42 = new code.src.Complex();
        complex42.real = 1L;
        code.src.Complex complex47 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex50 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex51 = complex47.multiply(complex50);
        java.lang.String str52 = complex47.toString();
        code.src.Complex complex55 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex58 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex59 = complex55.multiply(complex58);
        code.src.Complex complex60 = complex47.add(complex59);
        code.src.Complex complex63 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex66 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex67 = complex63.multiply(complex66);
        java.lang.String str68 = complex63.toString();
        code.src.Complex complex71 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex74 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex75 = complex71.multiply(complex74);
        code.src.Complex complex76 = complex63.add(complex75);
        code.src.Complex complex77 = complex60.add(complex76);
        code.src.Complex complex78 = complex42.add(complex77);
        double double79 = complex78.real;
        code.src.Complex complex82 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex85 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex86 = complex82.multiply(complex85);
        code.src.Complex complex87 = complex78.sub(complex85);
        complex87.real = 0.0d;
        code.src.Complex complex90 = complex40.sub(complex87);
        complex90.real = 1050.9408051475186d;
        java.lang.String str93 = complex90.toString();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 437.56491210010614d + "'", double41 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(10.0,0.0)" + "'", str52, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(10.0,0.0)" + "'", str68, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 582.9143981028653d + "'", double79 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "(1050.9408051475186,-393.80842089009553)" + "'", str93, "(1050.9408051475186,-393.80842089009553)");
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        complex2.real = (byte) 1;
        complex2.imaginary = (short) 100;
        code.src.Complex complex9 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex12 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex13 = complex9.multiply(complex12);
        java.lang.String str14 = complex9.toString();
        code.src.Complex complex17 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex20 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex21 = complex17.multiply(complex20);
        code.src.Complex complex22 = complex9.add(complex21);
        double double23 = complex22.real;
        code.src.Complex complex26 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex27 = complex22.multiply(complex26);
        code.src.Complex complex28 = complex2.multiply(complex22);
        code.src.Complex complex31 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str32 = complex31.toString();
        code.src.Complex complex35 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        code.src.Complex complex36 = complex31.sub(complex35);
        complex31.imaginary = (-1.0f);
        code.src.Complex complex39 = complex2.sub(complex31);
        double double40 = complex2.abs();
        complex2.imaginary = 552267.7562221194d;
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(10.0,0.0)" + "'", str14, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 290.95719905143267d + "'", double23 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(100.0,10.0)" + "'", str32, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.00499987500625d + "'", double40 == 100.00499987500625d);
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        code.src.Complex complex2 = code.src.Complex.polar((double) 'a', (double) (short) 1);
        code.src.Complex complex5 = code.src.Complex.polar((-317.11773840932915d), (double) (-1.0f));
        code.src.Complex complex6 = new code.src.Complex();
        complex6.real = 1L;
        code.src.Complex complex11 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex14 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex15 = complex11.multiply(complex14);
        java.lang.String str16 = complex11.toString();
        code.src.Complex complex19 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex22 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex23 = complex19.multiply(complex22);
        code.src.Complex complex24 = complex11.add(complex23);
        code.src.Complex complex27 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex30 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex31 = complex27.multiply(complex30);
        java.lang.String str32 = complex27.toString();
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        code.src.Complex complex40 = complex27.add(complex39);
        code.src.Complex complex41 = complex24.add(complex40);
        code.src.Complex complex42 = complex6.add(complex41);
        double double43 = complex42.real;
        code.src.Complex complex46 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex49 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex50 = complex46.multiply(complex49);
        code.src.Complex complex51 = complex42.sub(complex49);
        double double52 = complex42.imaginary;
        code.src.Complex complex53 = complex5.sub(complex42);
        code.src.Complex complex56 = new code.src.Complex(290.95719905143267d, (-213613.9212426372d));
        code.src.Complex complex57 = complex42.sub(complex56);
        code.src.Complex complex58 = complex2.add(complex56);
        java.lang.Class<?> wildcardClass59 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(10.0,0.0)" + "'", str16, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(10.0,0.0)" + "'", str32, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 582.9143981028653d + "'", double43 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 875.1298242002123d + "'", double52 == 875.1298242002123d);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        double double7 = complex6.imaginary;
        java.lang.String str8 = complex6.toString();
        java.lang.String str9 = complex6.toString();
        code.src.Complex complex12 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex15 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex16 = complex12.multiply(complex15);
        java.lang.String str17 = complex12.toString();
        code.src.Complex complex20 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex23 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex24 = complex20.multiply(complex23);
        code.src.Complex complex25 = complex12.add(complex24);
        code.src.Complex complex28 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex31 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex32 = complex28.multiply(complex31);
        java.lang.String str33 = complex28.toString();
        code.src.Complex complex36 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex39 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex40 = complex36.multiply(complex39);
        code.src.Complex complex41 = complex28.add(complex40);
        code.src.Complex complex42 = complex25.add(complex41);
        java.lang.String str43 = complex25.toString();
        code.src.Complex complex46 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex46.imaginary = (short) 0;
        java.lang.String str49 = complex46.toString();
        code.src.Complex complex50 = complex25.sub(complex46);
        code.src.Complex complex51 = complex6.sub(complex46);
        code.src.Complex complex54 = code.src.Complex.polar(28.09571990514327d, (-213613.9212426372d));
        complex54.real = 1;
        code.src.Complex complex57 = complex51.multiply(complex54);
        java.lang.String str58 = complex57.toString();
        complex57.imaginary = (short) -1;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 437.56491210010614d + "'", double7 == 437.56491210010614d);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(280.95719905143267,437.56491210010614)" + "'", str8, "(280.95719905143267,437.56491210010614)");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(280.95719905143267,437.56491210010614)" + "'", str9, "(280.95719905143267,437.56491210010614)");
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(10.0,0.0)" + "'", str17, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(10.0,0.0)" + "'", str33, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str43, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(-0.0,0.0)" + "'", str49, "(-0.0,0.0)");
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(-11654.411539903023,8101.177047836208)" + "'", str58, "(-11654.411539903023,8101.177047836208)");
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 0, (double) ' ');
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        code.src.Complex complex40 = complex2.add(complex38);
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        double double48 = complex46.imaginary;
        java.lang.String str49 = complex46.toString();
        code.src.Complex complex52 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double53 = complex52.abs();
        double double54 = complex52.real;
        code.src.Complex complex55 = complex46.sub(complex52);
        code.src.Complex complex56 = complex38.sub(complex46);
        code.src.Complex complex57 = new code.src.Complex();
        complex57.real = 1L;
        code.src.Complex complex62 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex65 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex66 = complex62.multiply(complex65);
        java.lang.String str67 = complex62.toString();
        code.src.Complex complex70 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex73 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex74 = complex70.multiply(complex73);
        code.src.Complex complex75 = complex62.add(complex74);
        code.src.Complex complex78 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex81 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex82 = complex78.multiply(complex81);
        java.lang.String str83 = complex78.toString();
        code.src.Complex complex86 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex89 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex90 = complex86.multiply(complex89);
        code.src.Complex complex91 = complex78.add(complex90);
        code.src.Complex complex92 = complex75.add(complex91);
        code.src.Complex complex93 = complex57.add(complex92);
        double double94 = complex57.imaginary;
        code.src.Complex complex95 = complex56.add(complex57);
        complex95.imaginary = 280.95719905143267d;
        java.lang.Class<?> wildcardClass98 = complex95.getClass();
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 43.756491210010616d + "'", double48 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str49, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 52.0d + "'", double53 == 52.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 28.09571990514327d + "'", double54 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(10.0,0.0)" + "'", str67, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(10.0,0.0)" + "'", str83, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
        org.junit.Assert.assertNotNull(complex95);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        code.src.Complex complex2 = new code.src.Complex(906.2883532154044d, 10.04987562112089d);
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        code.src.Complex complex2 = new code.src.Complex((double) (byte) 100, 437.56491210010614d);
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        double double40 = complex39.real;
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        code.src.Complex complex48 = complex39.sub(complex46);
        code.src.Complex complex51 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex52 = complex46.add(complex51);
        code.src.Complex complex53 = complex2.add(complex51);
        complex53.real = 907.1298242002123d;
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 582.9143981028653d + "'", double40 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        java.lang.String str3 = complex2.toString();
        code.src.Complex complex6 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex9 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex10 = complex6.multiply(complex9);
        java.lang.String str11 = complex6.toString();
        code.src.Complex complex14 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex17 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex18 = complex14.multiply(complex17);
        code.src.Complex complex19 = complex6.add(complex18);
        code.src.Complex complex22 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex25 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex26 = complex22.multiply(complex25);
        java.lang.String str27 = complex22.toString();
        code.src.Complex complex30 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex33 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex34 = complex30.multiply(complex33);
        code.src.Complex complex35 = complex22.add(complex34);
        code.src.Complex complex36 = complex19.add(complex35);
        code.src.Complex complex39 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex42 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex43 = complex39.multiply(complex42);
        code.src.Complex complex44 = complex19.sub(complex39);
        complex39.imaginary = 52.0d;
        complex39.imaginary = 28.09571990514327d;
        code.src.Complex complex49 = complex2.multiply(complex39);
        double double50 = complex39.imaginary;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "(10.0,0.0)" + "'", str3, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(10.0,0.0)" + "'", str11, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(10.0,0.0)" + "'", str27, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 28.09571990514327d + "'", double50 == 28.09571990514327d);
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        code.src.Complex complex2 = new code.src.Complex(35.0d, 875.1298242002123d);
        double double3 = complex2.abs();
        code.src.Complex complex6 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        double double7 = complex6.abs();
        code.src.Complex complex10 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str11 = complex10.toString();
        code.src.Complex complex12 = complex6.multiply(complex10);
        double double13 = complex10.real;
        code.src.Complex complex16 = new code.src.Complex((double) 100, (double) 10.0f);
        complex16.real = (byte) 1;
        complex16.imaginary = (short) 100;
        code.src.Complex complex23 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex26 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex27 = complex23.multiply(complex26);
        java.lang.String str28 = complex23.toString();
        code.src.Complex complex31 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex34 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex35 = complex31.multiply(complex34);
        code.src.Complex complex36 = complex23.add(complex35);
        double double37 = complex36.real;
        code.src.Complex complex40 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex41 = complex36.multiply(complex40);
        code.src.Complex complex42 = complex16.multiply(complex36);
        code.src.Complex complex45 = code.src.Complex.polar((double) ' ', (double) (byte) 100);
        code.src.Complex complex46 = complex36.multiply(complex45);
        code.src.Complex complex47 = complex10.multiply(complex46);
        code.src.Complex complex48 = complex2.multiply(complex46);
        java.lang.Class<?> wildcardClass49 = complex2.getClass();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 875.8294407044641d + "'", double3 == 875.8294407044641d);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(100.0,10.0)" + "'", str11, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(10.0,0.0)" + "'", str28, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 290.95719905143267d + "'", double37 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        code.src.Complex complex2 = code.src.Complex.polar(324.9608082617091d, (double) (-1.0f));
        double double3 = complex2.imaginary;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-273.44509135195034d) + "'", double3 == (-273.44509135195034d));
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        code.src.Complex complex2 = code.src.Complex.polar(1018.3729221500101d, 0.0d);
        complex2.real = (-249.54290000761125d);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        code.src.Complex complex9 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex12 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex13 = complex9.multiply(complex12);
        java.lang.String str14 = complex9.toString();
        code.src.Complex complex17 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex20 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex21 = complex17.multiply(complex20);
        code.src.Complex complex22 = complex9.add(complex21);
        code.src.Complex complex25 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex28 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex29 = complex25.multiply(complex28);
        java.lang.String str30 = complex25.toString();
        code.src.Complex complex33 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex36 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex37 = complex33.multiply(complex36);
        code.src.Complex complex38 = complex25.add(complex37);
        code.src.Complex complex39 = complex22.add(complex38);
        code.src.Complex complex42 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex45 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex46 = complex42.multiply(complex45);
        code.src.Complex complex47 = complex22.sub(complex42);
        code.src.Complex complex48 = complex5.add(complex47);
        double double49 = complex48.abs();
        code.src.Complex complex50 = new code.src.Complex();
        complex50.real = 1L;
        code.src.Complex complex55 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex58 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex59 = complex55.multiply(complex58);
        java.lang.String str60 = complex55.toString();
        code.src.Complex complex63 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex66 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex67 = complex63.multiply(complex66);
        code.src.Complex complex68 = complex55.add(complex67);
        code.src.Complex complex71 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex74 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex75 = complex71.multiply(complex74);
        java.lang.String str76 = complex71.toString();
        code.src.Complex complex79 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex82 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex83 = complex79.multiply(complex82);
        code.src.Complex complex84 = complex71.add(complex83);
        code.src.Complex complex85 = complex68.add(complex84);
        code.src.Complex complex86 = complex50.add(complex85);
        code.src.Complex complex87 = complex48.sub(complex85);
        complex87.real = 1051.4948429356753d;
        double double90 = complex87.abs();
        code.src.Complex complex91 = null;
        // The following exception was thrown during execution in test generation
        try {
            code.src.Complex complex92 = complex87.sub(complex91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(10.0,0.0)" + "'", str14, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(10.0,0.0)" + "'", str30, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 572.0d + "'", double49 == 572.0d);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(10.0,0.0)" + "'", str60, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "(10.0,0.0)" + "'", str76, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 1122.8207680143216d + "'", double90 == 1122.8207680143216d);
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        double double7 = complex6.imaginary;
        java.lang.String str8 = complex6.toString();
        java.lang.String str9 = complex6.toString();
        code.src.Complex complex12 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex15 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex16 = complex12.multiply(complex15);
        java.lang.String str17 = complex12.toString();
        code.src.Complex complex20 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex23 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex24 = complex20.multiply(complex23);
        code.src.Complex complex25 = complex12.add(complex24);
        code.src.Complex complex28 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex31 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex32 = complex28.multiply(complex31);
        java.lang.String str33 = complex28.toString();
        code.src.Complex complex36 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex39 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex40 = complex36.multiply(complex39);
        code.src.Complex complex41 = complex28.add(complex40);
        code.src.Complex complex42 = complex25.add(complex41);
        java.lang.String str43 = complex25.toString();
        code.src.Complex complex46 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex46.imaginary = (short) 0;
        java.lang.String str49 = complex46.toString();
        code.src.Complex complex50 = complex25.sub(complex46);
        code.src.Complex complex51 = complex6.sub(complex46);
        double double52 = complex46.real;
        double double53 = complex46.imaginary;
        java.lang.Class<?> wildcardClass54 = complex46.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 437.56491210010614d + "'", double7 == 437.56491210010614d);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(280.95719905143267,437.56491210010614)" + "'", str8, "(280.95719905143267,437.56491210010614)");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(280.95719905143267,437.56491210010614)" + "'", str9, "(280.95719905143267,437.56491210010614)");
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(10.0,0.0)" + "'", str17, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(10.0,0.0)" + "'", str33, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str43, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(-0.0,0.0)" + "'", str49, "(-0.0,0.0)");
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-0.0d) + "'", double52 == (-0.0d));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        complex2.imaginary = 100L;
        code.src.Complex complex7 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex10 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex11 = complex7.multiply(complex10);
        code.src.Complex complex14 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex17 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex18 = complex14.multiply(complex17);
        java.lang.String str19 = complex14.toString();
        code.src.Complex complex22 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex25 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex26 = complex22.multiply(complex25);
        code.src.Complex complex27 = complex14.add(complex26);
        code.src.Complex complex30 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex33 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex34 = complex30.multiply(complex33);
        java.lang.String str35 = complex30.toString();
        code.src.Complex complex38 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex41 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex42 = complex38.multiply(complex41);
        code.src.Complex complex43 = complex30.add(complex42);
        code.src.Complex complex44 = complex27.add(complex43);
        code.src.Complex complex47 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex50 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex51 = complex47.multiply(complex50);
        code.src.Complex complex52 = complex27.sub(complex47);
        code.src.Complex complex53 = complex10.add(complex52);
        code.src.Complex complex54 = complex2.multiply(complex52);
        double double55 = complex2.real;
        code.src.Complex complex58 = new code.src.Complex(28.09571990514327d, (double) ' ');
        code.src.Complex complex59 = complex2.add(complex58);
        double double60 = complex58.real;
        double double61 = complex58.abs();
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(10.0,0.0)" + "'", str19, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(10.0,0.0)" + "'", str35, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 100.0d + "'", double55 == 100.0d);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 28.09571990514327d + "'", double60 == 28.09571990514327d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 42.5836761798258d + "'", double61 == 42.5836761798258d);
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        code.src.Complex complex2 = new code.src.Complex((-389.10687533685115d), 213623.9212426372d);
        complex2.imaginary = 611.0101180080086d;
        double double5 = complex2.real;
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-389.10687533685115d) + "'", double5 == (-389.10687533685115d));
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        code.src.Complex complex2 = code.src.Complex.polar(831.3733329902017d, 0.0d);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        code.src.Complex complex2 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        double double3 = complex2.abs();
        code.src.Complex complex6 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str7 = complex6.toString();
        code.src.Complex complex8 = complex2.multiply(complex6);
        complex6.real = 35.0d;
        code.src.Complex complex11 = new code.src.Complex();
        complex11.real = 1L;
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        java.lang.String str21 = complex16.toString();
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        code.src.Complex complex29 = complex16.add(complex28);
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        java.lang.String str37 = complex32.toString();
        code.src.Complex complex40 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex43 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex44 = complex40.multiply(complex43);
        code.src.Complex complex45 = complex32.add(complex44);
        code.src.Complex complex46 = complex29.add(complex45);
        code.src.Complex complex47 = complex11.add(complex46);
        double double48 = complex47.real;
        code.src.Complex complex51 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex54 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex55 = complex51.multiply(complex54);
        code.src.Complex complex56 = complex47.sub(complex54);
        code.src.Complex complex59 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex60 = complex54.add(complex59);
        code.src.Complex complex61 = complex6.multiply(complex60);
        double double62 = complex61.imaginary;
        complex61.real = 625.6708893128759d;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(100.0,10.0)" + "'", str7, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(10.0,0.0)" + "'", str21, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(10.0,0.0)" + "'", str37, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 582.9143981028653d + "'", double48 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 3624.868782803608d + "'", double62 == 3624.868782803608d);
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex2.add(complex18);
        code.src.Complex complex39 = code.src.Complex.polar((-317.11773840932915d), (double) (-1.0f));
        code.src.Complex complex40 = complex18.sub(complex39);
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        double double48 = complex47.imaginary;
        code.src.Complex complex49 = complex40.sub(complex47);
        java.lang.Class<?> wildcardClass50 = complex47.getClass();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 437.56491210010614d + "'", double48 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        code.src.Complex complex2 = new code.src.Complex((double) 0L, 1018.3729221500101d);
        code.src.Complex complex5 = new code.src.Complex((double) 10L, (double) '#');
        double double6 = complex5.imaginary;
        double double7 = complex5.abs();
        code.src.Complex complex8 = complex2.multiply(complex5);
        java.lang.Class<?> wildcardClass9 = complex2.getClass();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 36.40054944640259d + "'", double7 == 36.40054944640259d);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 1, 290.95719905143267d);
        java.lang.String str3 = complex2.toString();
        code.src.Complex complex6 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double7 = complex6.abs();
        double double8 = complex6.real;
        code.src.Complex complex11 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex14 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex15 = complex11.multiply(complex14);
        java.lang.String str16 = complex11.toString();
        code.src.Complex complex19 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex22 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex23 = complex19.multiply(complex22);
        code.src.Complex complex24 = complex11.add(complex23);
        code.src.Complex complex27 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex30 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex31 = complex27.multiply(complex30);
        java.lang.String str32 = complex27.toString();
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        code.src.Complex complex40 = complex27.add(complex39);
        code.src.Complex complex41 = complex24.add(complex40);
        java.lang.String str42 = complex24.toString();
        double double43 = complex24.abs();
        double double44 = complex24.real;
        code.src.Complex complex45 = complex6.sub(complex24);
        code.src.Complex complex46 = complex2.add(complex6);
        double double47 = complex6.real;
        code.src.Complex complex50 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex53 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex54 = complex50.multiply(complex53);
        code.src.Complex complex57 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex60 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex61 = complex57.multiply(complex60);
        java.lang.String str62 = complex57.toString();
        code.src.Complex complex65 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex68 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex69 = complex65.multiply(complex68);
        code.src.Complex complex70 = complex57.add(complex69);
        code.src.Complex complex73 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex76 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex77 = complex73.multiply(complex76);
        java.lang.String str78 = complex73.toString();
        code.src.Complex complex81 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex84 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex85 = complex81.multiply(complex84);
        code.src.Complex complex86 = complex73.add(complex85);
        code.src.Complex complex87 = complex70.add(complex86);
        code.src.Complex complex90 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex93 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex94 = complex90.multiply(complex93);
        code.src.Complex complex95 = complex70.sub(complex90);
        code.src.Complex complex96 = complex53.add(complex95);
        code.src.Complex complex97 = complex6.multiply(complex95);
        complex95.imaginary = 9.866275920404853d;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "(1.0,290.95719905143267)" + "'", str3, "(1.0,290.95719905143267)");
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 28.09571990514327d + "'", double8 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(10.0,0.0)" + "'", str16, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(10.0,0.0)" + "'", str32, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str42, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 525.4704025737593d + "'", double43 == 525.4704025737593d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 290.95719905143267d + "'", double44 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 28.09571990514327d + "'", double47 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(10.0,0.0)" + "'", str62, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(10.0,0.0)" + "'", str78, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertNotNull(complex94);
        org.junit.Assert.assertNotNull(complex95);
        org.junit.Assert.assertNotNull(complex96);
        org.junit.Assert.assertNotNull(complex97);
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        code.src.Complex complex40 = complex15.sub(complex35);
        code.src.Complex complex43 = new code.src.Complex((double) 1.0f, (double) 10.0f);
        code.src.Complex complex44 = complex40.sub(complex43);
        double double45 = complex44.abs();
        complex44.imaginary = 100.0d;
        double double48 = complex44.real;
        code.src.Complex complex51 = new code.src.Complex((-906.2883532154044d), 87.48639198643185d);
        code.src.Complex complex54 = code.src.Complex.polar(1018.3729221500101d, 0.0d);
        double double55 = complex54.abs();
        code.src.Complex complex56 = complex51.sub(complex54);
        code.src.Complex complex59 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex62 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex63 = complex59.multiply(complex62);
        java.lang.String str64 = complex59.toString();
        code.src.Complex complex67 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex70 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex71 = complex67.multiply(complex70);
        code.src.Complex complex72 = complex59.add(complex71);
        code.src.Complex complex75 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex78 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex79 = complex75.multiply(complex78);
        java.lang.String str80 = complex75.toString();
        code.src.Complex complex83 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex86 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex87 = complex83.multiply(complex86);
        code.src.Complex complex88 = complex75.add(complex87);
        code.src.Complex complex89 = complex72.add(complex88);
        code.src.Complex complex92 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex95 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex96 = complex92.multiply(complex95);
        code.src.Complex complex97 = complex72.sub(complex92);
        code.src.Complex complex98 = complex51.sub(complex72);
        code.src.Complex complex99 = complex44.add(complex98);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 511.0653454891018d + "'", double45 == 511.0653454891018d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 279.95719905143267d + "'", double48 == 279.95719905143267d);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1018.3729221500101d + "'", double55 == 1018.3729221500101d);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(10.0,0.0)" + "'", str64, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "(10.0,0.0)" + "'", str80, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex95);
        org.junit.Assert.assertNotNull(complex96);
        org.junit.Assert.assertNotNull(complex97);
        org.junit.Assert.assertNotNull(complex98);
        org.junit.Assert.assertNotNull(complex99);
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        code.src.Complex complex2 = code.src.Complex.polar(112.71202242884297d, 8101.177047836208d);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        code.src.Complex complex40 = complex15.sub(complex35);
        code.src.Complex complex43 = new code.src.Complex((double) 1.0f, (double) 10.0f);
        code.src.Complex complex44 = complex40.sub(complex43);
        double double45 = complex44.abs();
        complex44.imaginary = 528.7686600293723d;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 511.0653454891018d + "'", double45 == 511.0653454891018d);
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        code.src.Complex complex2 = code.src.Complex.polar((double) 1L, (double) 100);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.add(complex5);
        code.src.Complex complex9 = new code.src.Complex((double) 100, (double) 10.0f);
        complex9.imaginary = 100L;
        code.src.Complex complex14 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex17 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex18 = complex14.multiply(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex37 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex40 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex41 = complex37.multiply(complex40);
        java.lang.String str42 = complex37.toString();
        code.src.Complex complex45 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex45.multiply(complex48);
        code.src.Complex complex50 = complex37.add(complex49);
        code.src.Complex complex51 = complex34.add(complex50);
        code.src.Complex complex54 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex57 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex58 = complex54.multiply(complex57);
        code.src.Complex complex59 = complex34.sub(complex54);
        code.src.Complex complex60 = complex17.add(complex59);
        code.src.Complex complex61 = complex9.multiply(complex59);
        java.lang.String str62 = complex9.toString();
        code.src.Complex complex63 = complex2.multiply(complex9);
        code.src.Complex complex66 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double67 = complex66.abs();
        java.lang.String str68 = complex66.toString();
        code.src.Complex complex69 = complex9.add(complex66);
        code.src.Complex complex72 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        code.src.Complex complex73 = complex9.sub(complex72);
        java.lang.Class<?> wildcardClass74 = complex73.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(10.0,0.0)" + "'", str42, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(100.0,100.0)" + "'", str62, "(100.0,100.0)");
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 52.0d + "'", double67 == 52.0d);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str68, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        code.src.Complex complex2 = code.src.Complex.polar((double) 1L, (double) 100);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.add(complex5);
        code.src.Complex complex9 = code.src.Complex.polar((-317.11773840932915d), (double) (-1.0f));
        code.src.Complex complex10 = new code.src.Complex();
        complex10.real = 1L;
        code.src.Complex complex15 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex18 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex19 = complex15.multiply(complex18);
        java.lang.String str20 = complex15.toString();
        code.src.Complex complex23 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex26 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex27 = complex23.multiply(complex26);
        code.src.Complex complex28 = complex15.add(complex27);
        code.src.Complex complex31 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex34 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex35 = complex31.multiply(complex34);
        java.lang.String str36 = complex31.toString();
        code.src.Complex complex39 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex42 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex43 = complex39.multiply(complex42);
        code.src.Complex complex44 = complex31.add(complex43);
        code.src.Complex complex45 = complex28.add(complex44);
        code.src.Complex complex46 = complex10.add(complex45);
        double double47 = complex46.real;
        code.src.Complex complex50 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex53 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex54 = complex50.multiply(complex53);
        code.src.Complex complex55 = complex46.sub(complex53);
        double double56 = complex46.imaginary;
        code.src.Complex complex57 = complex9.sub(complex46);
        complex46.imaginary = (-317.11773840932915d);
        double double60 = complex46.abs();
        code.src.Complex complex61 = complex2.sub(complex46);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(10.0,0.0)" + "'", str20, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(10.0,0.0)" + "'", str36, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 582.9143981028653d + "'", double47 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 875.1298242002123d + "'", double56 == 875.1298242002123d);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 663.590879631022d + "'", double60 == 663.590879631022d);
        org.junit.Assert.assertNotNull(complex61);
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        code.src.Complex complex2 = new code.src.Complex((-28.09571990514327d), 1.0d);
        java.lang.Class<?> wildcardClass3 = complex2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        code.src.Complex complex2 = new code.src.Complex(100.0d, (double) (byte) 10);
        double double3 = complex2.imaginary;
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        code.src.Complex complex39 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex42 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex43 = complex39.multiply(complex42);
        java.lang.String str44 = complex39.toString();
        code.src.Complex complex47 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex50 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex51 = complex47.multiply(complex50);
        code.src.Complex complex52 = complex39.add(complex51);
        code.src.Complex complex55 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex58 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex59 = complex55.multiply(complex58);
        java.lang.String str60 = complex55.toString();
        code.src.Complex complex63 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex66 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex67 = complex63.multiply(complex66);
        code.src.Complex complex68 = complex55.add(complex67);
        code.src.Complex complex69 = complex52.add(complex68);
        code.src.Complex complex72 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex75 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex76 = complex72.multiply(complex75);
        code.src.Complex complex77 = complex52.sub(complex72);
        java.lang.String str78 = complex52.toString();
        code.src.Complex complex79 = complex35.multiply(complex52);
        double double80 = complex79.abs();
        double double81 = complex79.imaginary;
        double double82 = complex79.imaginary;
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(10.0,0.0)" + "'", str44, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(10.0,0.0)" + "'", str60, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str78, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 552238.2879620573d + "'", double80 == 552238.2879620573d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 509250.64491133287d + "'", double81 == 509250.64491133287d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 509250.64491133287d + "'", double82 == 509250.64491133287d);
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        code.src.Complex complex2 = new code.src.Complex(58911.02077697936d, (double) (byte) 1);
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        code.src.Complex complex2 = code.src.Complex.polar(907.5648116969368d, 35.0d);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        code.src.Complex complex2 = code.src.Complex.polar(875.1298242002123d, 291.13071236105446d);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        code.src.Complex complex2 = code.src.Complex.polar((double) (byte) 100, 582.9143981028653d);
        complex2.real = 875.1298242002123d;
        complex2.imaginary = (-317.11773840932915d);
        complex2.real = 875.1298242002123d;
        double double9 = complex2.imaginary;
        complex2.real = 309.0545367982484d;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-317.11773840932915d) + "'", double9 == (-317.11773840932915d));
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        code.src.Complex complex2 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        code.src.Complex complex5 = new code.src.Complex(290.95719905143267d, (-213613.9212426372d));
        code.src.Complex complex6 = complex2.add(complex5);
        double double7 = complex2.imaginary;
        complex2.imaginary = 1055.9594711542297d;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-317.11773840932915d) + "'", double7 == (-317.11773840932915d));
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        code.src.Complex complex2 = new code.src.Complex(572.0d, (double) 10);
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        code.src.Complex complex2 = code.src.Complex.polar(213613.92387355183d, 290.9589175121722d);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        code.src.Complex complex2 = code.src.Complex.polar((double) (short) 1, (-489.10687533685115d));
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        code.src.Complex complex9 = new code.src.Complex((double) 100, (double) 10.0f);
        complex9.real = (byte) 1;
        complex9.imaginary = (short) 100;
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        java.lang.String str21 = complex16.toString();
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        code.src.Complex complex29 = complex16.add(complex28);
        double double30 = complex29.real;
        code.src.Complex complex33 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex34 = complex29.multiply(complex33);
        code.src.Complex complex35 = complex9.multiply(complex29);
        code.src.Complex complex36 = complex2.sub(complex29);
        code.src.Complex complex39 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex42 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex43 = complex39.multiply(complex42);
        java.lang.String str44 = complex39.toString();
        code.src.Complex complex47 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex50 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex51 = complex47.multiply(complex50);
        code.src.Complex complex52 = complex39.add(complex51);
        code.src.Complex complex55 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex58 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex59 = complex55.multiply(complex58);
        java.lang.String str60 = complex55.toString();
        code.src.Complex complex63 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex66 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex67 = complex63.multiply(complex66);
        code.src.Complex complex68 = complex55.add(complex67);
        code.src.Complex complex69 = complex52.add(complex68);
        double double70 = complex52.real;
        double double71 = complex52.real;
        java.lang.String str72 = complex52.toString();
        complex52.real = 14827.945873355611d;
        code.src.Complex complex75 = complex2.sub(complex52);
        java.lang.String str76 = complex52.toString();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(10.0,0.0)" + "'", str21, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 290.95719905143267d + "'", double30 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(10.0,0.0)" + "'", str44, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(10.0,0.0)" + "'", str60, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 290.95719905143267d + "'", double70 == 290.95719905143267d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 290.95719905143267d + "'", double71 == 290.95719905143267d);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str72, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "(14827.945873355611,437.56491210010614)" + "'", str76, "(14827.945873355611,437.56491210010614)");
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        code.src.Complex complex2 = new code.src.Complex(663.590879631022d, 43.756491210010616d);
        complex2.imaginary = 581.9143981028653d;
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        code.src.Complex complex2 = code.src.Complex.polar(148.66068747318505d, 430.3716436914759d);
        double double3 = complex2.imaginary;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.946455324461428d + "'", double3 == 3.946455324461428d);
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        code.src.Complex complex2 = new code.src.Complex(10.04987562112089d, (double) '#');
        double double3 = complex2.imaginary;
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 35.0d + "'", double3 == 35.0d);
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        code.src.Complex complex2 = new code.src.Complex(214489.24976920983d, 0.0d);
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex38 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex41 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex42 = complex38.multiply(complex41);
        code.src.Complex complex43 = complex18.sub(complex38);
        code.src.Complex complex44 = new code.src.Complex();
        code.src.Complex complex47 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex50 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex51 = complex47.multiply(complex50);
        java.lang.String str52 = complex47.toString();
        code.src.Complex complex55 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex58 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex59 = complex55.multiply(complex58);
        code.src.Complex complex60 = complex47.add(complex59);
        code.src.Complex complex63 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex66 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex67 = complex63.multiply(complex66);
        java.lang.String str68 = complex63.toString();
        code.src.Complex complex71 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex74 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex75 = complex71.multiply(complex74);
        code.src.Complex complex76 = complex63.add(complex75);
        code.src.Complex complex77 = complex60.add(complex76);
        double double78 = complex77.real;
        code.src.Complex complex79 = complex44.multiply(complex77);
        code.src.Complex complex80 = complex18.multiply(complex77);
        code.src.Complex complex81 = complex2.sub(complex80);
        double double82 = complex80.real;
        double double83 = complex80.real;
        double double84 = complex80.abs();
        java.lang.Class<?> wildcardClass85 = complex80.getClass();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(10.0,0.0)" + "'", str52, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(10.0,0.0)" + "'", str68, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 581.9143981028653d + "'", double78 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + (-213613.9212426372d) + "'", double82 == (-213613.9212426372d));
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + (-213613.9212426372d) + "'", double83 == (-213613.9212426372d));
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 552238.2879620573d + "'", double84 == 552238.2879620573d);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        code.src.Complex complex2 = new code.src.Complex((-280.95719905143267d), 213613.9212426372d);
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        code.src.Complex complex2 = code.src.Complex.polar(52.0d, 9.866275920404853d);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        code.src.Complex complex2 = code.src.Complex.polar((double) 1L, (double) 100);
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        double double40 = complex39.real;
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        code.src.Complex complex48 = complex39.sub(complex46);
        code.src.Complex complex51 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex52 = complex46.add(complex51);
        code.src.Complex complex55 = new code.src.Complex((double) 10L, (double) '#');
        code.src.Complex complex56 = complex51.add(complex55);
        complex51.real = 43.756491210010616d;
        complex51.imaginary = 100.0d;
        complex51.imaginary = (-317.11773840932915d);
        code.src.Complex complex65 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex68 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex69 = complex65.multiply(complex68);
        java.lang.String str70 = complex65.toString();
        code.src.Complex complex73 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex76 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex77 = complex73.multiply(complex76);
        code.src.Complex complex78 = complex65.add(complex77);
        code.src.Complex complex79 = complex51.multiply(complex77);
        code.src.Complex complex80 = complex2.sub(complex77);
        double double81 = complex2.imaginary;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 582.9143981028653d + "'", double40 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(10.0,0.0)" + "'", str70, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + (-0.5063656411097588d) + "'", double81 == (-0.5063656411097588d));
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        code.src.Complex complex40 = complex15.sub(complex35);
        complex35.imaginary = 52.0d;
        complex35.imaginary = 290.9589175121722d;
        code.src.Complex complex47 = new code.src.Complex(28.09571990514327d, 907.1298242002123d);
        code.src.Complex complex50 = code.src.Complex.polar((double) (byte) 10, (double) (short) 0);
        code.src.Complex complex51 = complex47.multiply(complex50);
        code.src.Complex complex52 = complex35.sub(complex47);
        code.src.Complex complex53 = null;
        // The following exception was thrown during execution in test generation
        try {
            code.src.Complex complex54 = complex47.multiply(complex53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        java.lang.String str33 = complex15.toString();
        double double34 = complex15.abs();
        double double35 = complex15.real;
        complex15.imaginary = 0;
        java.lang.Class<?> wildcardClass38 = complex15.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str33, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 525.4704025737593d + "'", double34 == 525.4704025737593d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 290.95719905143267d + "'", double35 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        code.src.Complex complex0 = new code.src.Complex();
        code.src.Complex complex3 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex6 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex7 = complex3.multiply(complex6);
        java.lang.String str8 = complex3.toString();
        code.src.Complex complex11 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex14 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex15 = complex11.multiply(complex14);
        code.src.Complex complex16 = complex3.add(complex15);
        code.src.Complex complex19 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex22 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex23 = complex19.multiply(complex22);
        java.lang.String str24 = complex19.toString();
        code.src.Complex complex27 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex30 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex31 = complex27.multiply(complex30);
        code.src.Complex complex32 = complex19.add(complex31);
        code.src.Complex complex33 = complex16.add(complex32);
        double double34 = complex33.real;
        code.src.Complex complex35 = complex0.multiply(complex33);
        code.src.Complex complex36 = new code.src.Complex();
        complex36.real = 1L;
        code.src.Complex complex41 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex44 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex45 = complex41.multiply(complex44);
        java.lang.String str46 = complex41.toString();
        code.src.Complex complex49 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex52 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex53 = complex49.multiply(complex52);
        code.src.Complex complex54 = complex41.add(complex53);
        code.src.Complex complex57 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex60 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex61 = complex57.multiply(complex60);
        java.lang.String str62 = complex57.toString();
        code.src.Complex complex65 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex68 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex69 = complex65.multiply(complex68);
        code.src.Complex complex70 = complex57.add(complex69);
        code.src.Complex complex71 = complex54.add(complex70);
        code.src.Complex complex72 = complex36.add(complex71);
        double double73 = complex72.real;
        code.src.Complex complex76 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex79 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex80 = complex76.multiply(complex79);
        code.src.Complex complex81 = complex72.sub(complex79);
        code.src.Complex complex84 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex85 = complex79.add(complex84);
        code.src.Complex complex88 = new code.src.Complex((double) 10L, (double) '#');
        code.src.Complex complex89 = complex84.add(complex88);
        code.src.Complex complex90 = complex33.multiply(complex89);
        complex33.real = (-1.0f);
        double double93 = complex33.imaginary;
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(10.0,0.0)" + "'", str8, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(10.0,0.0)" + "'", str24, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 581.9143981028653d + "'", double34 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(10.0,0.0)" + "'", str46, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(10.0,0.0)" + "'", str62, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 582.9143981028653d + "'", double73 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 875.1298242002123d + "'", double93 == 875.1298242002123d);
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        code.src.Complex complex2 = code.src.Complex.polar((double) 0L, 214489.24976920983d);
        java.lang.String str3 = complex2.toString();
        java.lang.Class<?> wildcardClass4 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "(0.0,0.0)" + "'", str3, "(0.0,0.0)");
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 0, (double) ' ');
        code.src.Complex complex5 = new code.src.Complex((double) 10L, (double) '#');
        double double6 = complex5.imaginary;
        code.src.Complex complex7 = complex2.multiply(complex5);
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        double double15 = complex14.imaginary;
        code.src.Complex complex16 = complex7.multiply(complex14);
        code.src.Complex complex19 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex22 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex23 = complex19.multiply(complex22);
        java.lang.String str24 = complex19.toString();
        code.src.Complex complex27 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex30 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex31 = complex27.multiply(complex30);
        code.src.Complex complex32 = complex19.add(complex31);
        double double33 = complex32.real;
        code.src.Complex complex36 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex39 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex40 = complex36.multiply(complex39);
        double double41 = complex40.imaginary;
        code.src.Complex complex42 = complex32.sub(complex40);
        code.src.Complex complex45 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex45.multiply(complex48);
        code.src.Complex complex52 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex55 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex56 = complex52.multiply(complex55);
        java.lang.String str57 = complex52.toString();
        code.src.Complex complex60 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex63 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex64 = complex60.multiply(complex63);
        code.src.Complex complex65 = complex52.add(complex64);
        code.src.Complex complex68 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex71 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex72 = complex68.multiply(complex71);
        java.lang.String str73 = complex68.toString();
        code.src.Complex complex76 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex79 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex80 = complex76.multiply(complex79);
        code.src.Complex complex81 = complex68.add(complex80);
        code.src.Complex complex82 = complex65.add(complex81);
        code.src.Complex complex85 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex88 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex89 = complex85.multiply(complex88);
        code.src.Complex complex90 = complex65.sub(complex85);
        code.src.Complex complex91 = complex48.add(complex90);
        code.src.Complex complex92 = complex42.add(complex48);
        code.src.Complex complex93 = complex14.sub(complex48);
        double double94 = complex93.real;
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 437.56491210010614d + "'", double15 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(10.0,0.0)" + "'", str24, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 290.95719905143267d + "'", double33 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 437.56491210010614d + "'", double41 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(10.0,0.0)" + "'", str57, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(10.0,0.0)" + "'", str73, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 252.8614791462894d + "'", double94 == 252.8614791462894d);
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        code.src.Complex complex2 = code.src.Complex.polar((-180.95719905143267d), 553.5830136072623d);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        code.src.Complex complex2 = code.src.Complex.polar(35.0d, 554.8186781977221d);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        double double37 = complex36.real;
        code.src.Complex complex40 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex43 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex44 = complex40.multiply(complex43);
        code.src.Complex complex45 = complex36.sub(complex43);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex43.add(complex48);
        code.src.Complex complex52 = new code.src.Complex((double) 10L, (double) '#');
        code.src.Complex complex53 = complex48.add(complex52);
        complex48.real = 43.756491210010616d;
        complex48.imaginary = 100.0d;
        code.src.Complex complex60 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        double double61 = complex60.abs();
        code.src.Complex complex62 = complex48.add(complex60);
        complex48.real = 100.00499987500625d;
        double double65 = complex48.imaginary;
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 582.9143981028653d + "'", double37 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 100.0d + "'", double65 == 100.0d);
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        code.src.Complex complex2 = new code.src.Complex(831.3733329902017d, 875.8294407044641d);
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        code.src.Complex complex2 = new code.src.Complex((-280.95719905143267d), 552267.7562221194d);
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        code.src.Complex complex2 = code.src.Complex.polar((double) (short) -1, (double) (-1L));
        double double3 = complex2.abs();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        code.src.Complex complex2 = code.src.Complex.polar(589.1068753368511d, (double) (byte) -1);
        code.src.Complex complex5 = new code.src.Complex((-438.0712777412159d), 58910.68753368511d);
        code.src.Complex complex6 = complex2.add(complex5);
        java.lang.Class<?> wildcardClass7 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 100, (-54.40211108893698d));
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex34 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex37 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex38 = complex34.multiply(complex37);
        java.lang.String str39 = complex34.toString();
        code.src.Complex complex42 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex45 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex46 = complex42.multiply(complex45);
        code.src.Complex complex47 = complex34.add(complex46);
        code.src.Complex complex48 = complex31.add(complex47);
        java.lang.String str49 = complex31.toString();
        double double50 = complex31.abs();
        code.src.Complex complex51 = complex15.multiply(complex31);
        double double52 = complex51.imaginary;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(10.0,0.0)" + "'", str39, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str49, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 525.4704025737593d + "'", double50 == 525.4704025737593d);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 254625.32245566644d + "'", double52 == 254625.32245566644d);
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        complex2.real = (byte) 1;
        complex2.imaginary = (short) 100;
        code.src.Complex complex9 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex12 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex13 = complex9.multiply(complex12);
        java.lang.String str14 = complex9.toString();
        code.src.Complex complex17 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex20 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex21 = complex17.multiply(complex20);
        code.src.Complex complex22 = complex9.add(complex21);
        double double23 = complex22.real;
        code.src.Complex complex26 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex27 = complex22.multiply(complex26);
        code.src.Complex complex28 = complex2.multiply(complex22);
        code.src.Complex complex31 = new code.src.Complex((double) 100, (double) 10.0f);
        complex31.imaginary = 100L;
        code.src.Complex complex36 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex39 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex40 = complex36.multiply(complex39);
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        java.lang.String str48 = complex43.toString();
        code.src.Complex complex51 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex54 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex55 = complex51.multiply(complex54);
        code.src.Complex complex56 = complex43.add(complex55);
        code.src.Complex complex59 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex62 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex63 = complex59.multiply(complex62);
        java.lang.String str64 = complex59.toString();
        code.src.Complex complex67 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex70 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex71 = complex67.multiply(complex70);
        code.src.Complex complex72 = complex59.add(complex71);
        code.src.Complex complex73 = complex56.add(complex72);
        code.src.Complex complex76 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex79 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex80 = complex76.multiply(complex79);
        code.src.Complex complex81 = complex56.sub(complex76);
        code.src.Complex complex82 = complex39.add(complex81);
        code.src.Complex complex83 = complex31.multiply(complex81);
        code.src.Complex complex84 = complex2.sub(complex31);
        double double85 = complex31.imaginary;
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(10.0,0.0)" + "'", str14, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 290.95719905143267d + "'", double23 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(10.0,0.0)" + "'", str48, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(10.0,0.0)" + "'", str64, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 100.0d + "'", double85 == 100.0d);
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        code.src.Complex complex2 = new code.src.Complex((double) (byte) 100, (double) 'a');
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        double double10 = complex8.imaginary;
        java.lang.String str11 = complex8.toString();
        code.src.Complex complex12 = complex2.sub(complex8);
        code.src.Complex complex15 = new code.src.Complex((double) 100, (double) 10.0f);
        complex15.real = (byte) 1;
        code.src.Complex complex18 = complex8.multiply(complex15);
        complex8.real = 518.518416496393d;
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 43.756491210010616d + "'", double10 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str11, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex18);
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex38 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex41 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex42 = complex38.multiply(complex41);
        code.src.Complex complex43 = complex18.sub(complex38);
        code.src.Complex complex44 = new code.src.Complex();
        code.src.Complex complex47 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex50 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex51 = complex47.multiply(complex50);
        java.lang.String str52 = complex47.toString();
        code.src.Complex complex55 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex58 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex59 = complex55.multiply(complex58);
        code.src.Complex complex60 = complex47.add(complex59);
        code.src.Complex complex63 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex66 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex67 = complex63.multiply(complex66);
        java.lang.String str68 = complex63.toString();
        code.src.Complex complex71 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex74 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex75 = complex71.multiply(complex74);
        code.src.Complex complex76 = complex63.add(complex75);
        code.src.Complex complex77 = complex60.add(complex76);
        double double78 = complex77.real;
        code.src.Complex complex79 = complex44.multiply(complex77);
        code.src.Complex complex80 = complex18.multiply(complex77);
        code.src.Complex complex81 = complex2.sub(complex80);
        double double82 = complex80.real;
        java.lang.String str83 = complex80.toString();
        double double84 = complex80.abs();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(10.0,0.0)" + "'", str52, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(10.0,0.0)" + "'", str68, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 581.9143981028653d + "'", double78 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + (-213613.9212426372d) + "'", double82 == (-213613.9212426372d));
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(-213613.9212426372,509250.64491133287)" + "'", str83, "(-213613.9212426372,509250.64491133287)");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 552238.2879620573d + "'", double84 == 552238.2879620573d);
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        code.src.Complex complex2 = code.src.Complex.polar((-437.56491210010614d), (-180.95719905143267d));
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        double double37 = complex36.real;
        code.src.Complex complex40 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex43 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex44 = complex40.multiply(complex43);
        code.src.Complex complex45 = complex36.sub(complex43);
        complex45.real = 0.0d;
        code.src.Complex complex50 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double51 = complex50.abs();
        double double52 = complex50.real;
        code.src.Complex complex55 = code.src.Complex.polar(445.65251212240173d, 525.4704025737593d);
        code.src.Complex complex56 = complex50.multiply(complex55);
        code.src.Complex complex57 = complex45.add(complex50);
        java.lang.String str58 = complex50.toString();
        code.src.Complex complex61 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex64 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex65 = complex61.multiply(complex64);
        java.lang.String str66 = complex61.toString();
        code.src.Complex complex69 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex72 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex73 = complex69.multiply(complex72);
        code.src.Complex complex74 = complex61.add(complex73);
        double double75 = complex74.real;
        code.src.Complex complex78 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex81 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex82 = complex78.multiply(complex81);
        double double83 = complex82.imaginary;
        code.src.Complex complex84 = complex74.sub(complex82);
        code.src.Complex complex85 = complex50.multiply(complex82);
        complex82.real = 1L;
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 582.9143981028653d + "'", double37 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 52.0d + "'", double51 == 52.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 28.09571990514327d + "'", double52 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str58, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(10.0,0.0)" + "'", str66, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 290.95719905143267d + "'", double75 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 437.56491210010614d + "'", double83 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        code.src.Complex complex2 = code.src.Complex.polar((double) (-1L), 52.0d);
        complex2.imaginary = 511.0653454891018d;
        java.lang.String str5 = complex2.toString();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(0.16299078079570548,511.0653454891018)" + "'", str5, "(0.16299078079570548,511.0653454891018)");
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        code.src.Complex complex2 = code.src.Complex.polar((double) '4', (-1.0d));
        double double3 = complex2.imaginary;
        code.src.Complex complex6 = new code.src.Complex(100.0d, (double) (short) 10);
        code.src.Complex complex9 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex12 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex13 = complex9.multiply(complex12);
        java.lang.String str14 = complex9.toString();
        code.src.Complex complex17 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex20 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex21 = complex17.multiply(complex20);
        code.src.Complex complex22 = complex9.add(complex21);
        code.src.Complex complex25 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex28 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex29 = complex25.multiply(complex28);
        java.lang.String str30 = complex25.toString();
        code.src.Complex complex33 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex36 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex37 = complex33.multiply(complex36);
        code.src.Complex complex38 = complex25.add(complex37);
        code.src.Complex complex39 = complex22.add(complex38);
        code.src.Complex complex40 = new code.src.Complex();
        code.src.Complex complex41 = complex39.add(complex40);
        code.src.Complex complex44 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double45 = complex44.abs();
        double double46 = complex44.real;
        code.src.Complex complex49 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex52 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex53 = complex49.multiply(complex52);
        java.lang.String str54 = complex49.toString();
        code.src.Complex complex57 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex60 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex61 = complex57.multiply(complex60);
        code.src.Complex complex62 = complex49.add(complex61);
        code.src.Complex complex65 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex68 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex69 = complex65.multiply(complex68);
        java.lang.String str70 = complex65.toString();
        code.src.Complex complex73 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex76 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex77 = complex73.multiply(complex76);
        code.src.Complex complex78 = complex65.add(complex77);
        code.src.Complex complex79 = complex62.add(complex78);
        java.lang.String str80 = complex62.toString();
        double double81 = complex62.abs();
        double double82 = complex62.real;
        code.src.Complex complex83 = complex44.sub(complex62);
        code.src.Complex complex84 = complex40.add(complex62);
        code.src.Complex complex85 = complex6.sub(complex84);
        code.src.Complex complex86 = complex2.add(complex85);
        code.src.Complex complex89 = code.src.Complex.polar((double) 1L, (double) 100);
        code.src.Complex complex92 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex93 = complex89.add(complex92);
        code.src.Complex complex94 = complex86.sub(complex89);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-43.756491210010616d) + "'", double3 == (-43.756491210010616d));
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(10.0,0.0)" + "'", str14, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(10.0,0.0)" + "'", str30, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 52.0d + "'", double45 == 52.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 28.09571990514327d + "'", double46 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(10.0,0.0)" + "'", str54, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(10.0,0.0)" + "'", str70, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str80, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 525.4704025737593d + "'", double81 == 525.4704025737593d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 290.95719905143267d + "'", double82 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertNotNull(complex94);
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        double double33 = complex15.real;
        double double34 = complex15.real;
        code.src.Complex complex37 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex40 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex41 = complex37.multiply(complex40);
        java.lang.String str42 = complex37.toString();
        code.src.Complex complex45 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex45.multiply(complex48);
        code.src.Complex complex50 = complex37.add(complex49);
        code.src.Complex complex53 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex56 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex57 = complex53.multiply(complex56);
        java.lang.String str58 = complex53.toString();
        code.src.Complex complex61 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex64 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex65 = complex61.multiply(complex64);
        code.src.Complex complex66 = complex53.add(complex65);
        code.src.Complex complex67 = complex50.add(complex66);
        code.src.Complex complex68 = complex15.sub(complex50);
        code.src.Complex complex71 = new code.src.Complex(525.4704025737593d, 0.0d);
        code.src.Complex complex72 = complex68.add(complex71);
        complex71.real = (-62.9683262670583d);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 290.95719905143267d + "'", double33 == 290.95719905143267d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 290.95719905143267d + "'", double34 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(10.0,0.0)" + "'", str42, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(10.0,0.0)" + "'", str58, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex72);
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        double double8 = complex2.real;
        code.src.Complex complex11 = new code.src.Complex(28.09571990514327d, 907.1298242002123d);
        code.src.Complex complex12 = complex2.multiply(complex11);
        double double13 = complex2.abs();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        double double33 = complex15.real;
        double double34 = complex15.real;
        code.src.Complex complex37 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex40 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex41 = complex37.multiply(complex40);
        java.lang.String str42 = complex37.toString();
        code.src.Complex complex45 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex45.multiply(complex48);
        code.src.Complex complex50 = complex37.add(complex49);
        code.src.Complex complex53 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex56 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex57 = complex53.multiply(complex56);
        java.lang.String str58 = complex53.toString();
        code.src.Complex complex61 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex64 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex65 = complex61.multiply(complex64);
        code.src.Complex complex66 = complex53.add(complex65);
        code.src.Complex complex67 = complex50.add(complex66);
        code.src.Complex complex68 = complex15.sub(complex50);
        double double69 = complex68.abs();
        code.src.Complex complex72 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex72.imaginary = (short) 0;
        complex72.imaginary = 100.0f;
        code.src.Complex complex77 = complex68.multiply(complex72);
        complex77.real = (short) 1;
        complex77.imaginary = 553.5830136072623d;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 290.95719905143267d + "'", double33 == 290.95719905143267d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 290.95719905143267d + "'", double34 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(10.0,0.0)" + "'", str42, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(10.0,0.0)" + "'", str58, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex77);
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        code.src.Complex complex2 = new code.src.Complex(10.04987562112089d, (-213613.9212426372d));
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        code.src.Complex complex2 = new code.src.Complex((double) 100.0f, (double) (short) -1);
        java.lang.Class<?> wildcardClass3 = complex2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        code.src.Complex complex2 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        double double40 = complex39.real;
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        code.src.Complex complex48 = complex39.sub(complex46);
        double double49 = complex39.imaginary;
        code.src.Complex complex50 = complex2.sub(complex39);
        complex2.imaginary = (-43.756491210010616d);
        code.src.Complex complex55 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex58 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex59 = complex55.multiply(complex58);
        java.lang.String str60 = complex55.toString();
        code.src.Complex complex63 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex66 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex67 = complex63.multiply(complex66);
        code.src.Complex complex68 = complex55.add(complex67);
        code.src.Complex complex71 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex74 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex75 = complex71.multiply(complex74);
        java.lang.String str76 = complex71.toString();
        code.src.Complex complex79 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex82 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex83 = complex79.multiply(complex82);
        code.src.Complex complex84 = complex71.add(complex83);
        code.src.Complex complex85 = complex68.add(complex84);
        double double86 = complex85.real;
        code.src.Complex complex89 = code.src.Complex.polar((double) (byte) 100, 582.9143981028653d);
        code.src.Complex complex90 = complex85.sub(complex89);
        complex90.real = 'a';
        double double93 = complex90.real;
        code.src.Complex complex94 = complex2.add(complex90);
        complex94.real = (-489.10687533685115d);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 582.9143981028653d + "'", double40 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 875.1298242002123d + "'", double49 == 875.1298242002123d);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(10.0,0.0)" + "'", str60, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "(10.0,0.0)" + "'", str76, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 581.9143981028653d + "'", double86 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 97.0d + "'", double93 == 97.0d);
        org.junit.Assert.assertNotNull(complex94);
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 1, 290.95719905143267d);
        java.lang.String str3 = complex2.toString();
        code.src.Complex complex6 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double7 = complex6.abs();
        double double8 = complex6.real;
        code.src.Complex complex11 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex14 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex15 = complex11.multiply(complex14);
        java.lang.String str16 = complex11.toString();
        code.src.Complex complex19 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex22 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex23 = complex19.multiply(complex22);
        code.src.Complex complex24 = complex11.add(complex23);
        code.src.Complex complex27 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex30 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex31 = complex27.multiply(complex30);
        java.lang.String str32 = complex27.toString();
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        code.src.Complex complex40 = complex27.add(complex39);
        code.src.Complex complex41 = complex24.add(complex40);
        java.lang.String str42 = complex24.toString();
        double double43 = complex24.abs();
        double double44 = complex24.real;
        code.src.Complex complex45 = complex6.sub(complex24);
        code.src.Complex complex46 = complex2.add(complex6);
        double double47 = complex6.real;
        code.src.Complex complex50 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex53 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex54 = complex50.multiply(complex53);
        code.src.Complex complex57 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex60 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex61 = complex57.multiply(complex60);
        java.lang.String str62 = complex57.toString();
        code.src.Complex complex65 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex68 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex69 = complex65.multiply(complex68);
        code.src.Complex complex70 = complex57.add(complex69);
        code.src.Complex complex73 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex76 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex77 = complex73.multiply(complex76);
        java.lang.String str78 = complex73.toString();
        code.src.Complex complex81 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex84 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex85 = complex81.multiply(complex84);
        code.src.Complex complex86 = complex73.add(complex85);
        code.src.Complex complex87 = complex70.add(complex86);
        code.src.Complex complex90 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex93 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex94 = complex90.multiply(complex93);
        code.src.Complex complex95 = complex70.sub(complex90);
        code.src.Complex complex96 = complex53.add(complex95);
        code.src.Complex complex97 = complex6.multiply(complex95);
        double double98 = complex95.real;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "(1.0,290.95719905143267)" + "'", str3, "(1.0,290.95719905143267)");
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 28.09571990514327d + "'", double8 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(10.0,0.0)" + "'", str16, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(10.0,0.0)" + "'", str32, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str42, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 525.4704025737593d + "'", double43 == 525.4704025737593d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 290.95719905143267d + "'", double44 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 28.09571990514327d + "'", double47 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(10.0,0.0)" + "'", str62, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(10.0,0.0)" + "'", str78, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertNotNull(complex94);
        org.junit.Assert.assertNotNull(complex95);
        org.junit.Assert.assertNotNull(complex96);
        org.junit.Assert.assertNotNull(complex97);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 280.95719905143267d + "'", double98 == 280.95719905143267d);
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        double double33 = complex15.real;
        code.src.Complex complex36 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        code.src.Complex complex37 = complex15.sub(complex36);
        double double38 = complex37.abs();
        java.lang.Class<?> wildcardClass39 = complex37.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 290.95719905143267d + "'", double33 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 525.4704025737593d + "'", double38 == 525.4704025737593d);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = code.src.Complex.polar((double) (short) -1, 52.0d);
        code.src.Complex complex13 = new code.src.Complex((double) 100, (double) 10.0f);
        complex13.real = (byte) 1;
        complex13.real = 589.1068753368511d;
        java.lang.String str18 = complex13.toString();
        code.src.Complex complex21 = new code.src.Complex((double) (short) 100, 43.756491210010616d);
        code.src.Complex complex22 = new code.src.Complex();
        complex22.real = 1L;
        code.src.Complex complex27 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex30 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex31 = complex27.multiply(complex30);
        java.lang.String str32 = complex27.toString();
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        code.src.Complex complex40 = complex27.add(complex39);
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        java.lang.String str48 = complex43.toString();
        code.src.Complex complex51 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex54 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex55 = complex51.multiply(complex54);
        code.src.Complex complex56 = complex43.add(complex55);
        code.src.Complex complex57 = complex40.add(complex56);
        code.src.Complex complex58 = complex22.add(complex57);
        double double59 = complex58.real;
        code.src.Complex complex62 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex65 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex66 = complex62.multiply(complex65);
        code.src.Complex complex67 = complex58.sub(complex65);
        code.src.Complex complex68 = complex21.add(complex65);
        code.src.Complex complex69 = complex13.sub(complex65);
        code.src.Complex complex70 = complex10.add(complex13);
        complex70.imaginary = (-0.0d);
        code.src.Complex complex73 = complex2.multiply(complex70);
        java.lang.Class<?> wildcardClass74 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(589.1068753368511,10.0)" + "'", str18, "(589.1068753368511,10.0)");
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(10.0,0.0)" + "'", str32, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(10.0,0.0)" + "'", str48, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 582.9143981028653d + "'", double59 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 1, 290.95719905143267d);
        java.lang.String str3 = complex2.toString();
        code.src.Complex complex6 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double7 = complex6.abs();
        double double8 = complex6.real;
        code.src.Complex complex11 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex14 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex15 = complex11.multiply(complex14);
        java.lang.String str16 = complex11.toString();
        code.src.Complex complex19 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex22 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex23 = complex19.multiply(complex22);
        code.src.Complex complex24 = complex11.add(complex23);
        code.src.Complex complex27 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex30 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex31 = complex27.multiply(complex30);
        java.lang.String str32 = complex27.toString();
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        code.src.Complex complex40 = complex27.add(complex39);
        code.src.Complex complex41 = complex24.add(complex40);
        java.lang.String str42 = complex24.toString();
        double double43 = complex24.abs();
        double double44 = complex24.real;
        code.src.Complex complex45 = complex6.sub(complex24);
        code.src.Complex complex46 = complex2.add(complex6);
        double double47 = complex6.real;
        code.src.Complex complex50 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex53 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex54 = complex50.multiply(complex53);
        code.src.Complex complex57 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex60 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex61 = complex57.multiply(complex60);
        java.lang.String str62 = complex57.toString();
        code.src.Complex complex65 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex68 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex69 = complex65.multiply(complex68);
        code.src.Complex complex70 = complex57.add(complex69);
        code.src.Complex complex73 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex76 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex77 = complex73.multiply(complex76);
        java.lang.String str78 = complex73.toString();
        code.src.Complex complex81 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex84 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex85 = complex81.multiply(complex84);
        code.src.Complex complex86 = complex73.add(complex85);
        code.src.Complex complex87 = complex70.add(complex86);
        code.src.Complex complex90 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex93 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex94 = complex90.multiply(complex93);
        code.src.Complex complex95 = complex70.sub(complex90);
        code.src.Complex complex96 = complex53.add(complex95);
        code.src.Complex complex97 = complex6.multiply(complex95);
        complex95.imaginary = 492.8116754934422d;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "(1.0,290.95719905143267)" + "'", str3, "(1.0,290.95719905143267)");
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 28.09571990514327d + "'", double8 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(10.0,0.0)" + "'", str16, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(10.0,0.0)" + "'", str32, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str42, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 525.4704025737593d + "'", double43 == 525.4704025737593d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 290.95719905143267d + "'", double44 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 28.09571990514327d + "'", double47 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(10.0,0.0)" + "'", str62, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(10.0,0.0)" + "'", str78, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertNotNull(complex94);
        org.junit.Assert.assertNotNull(complex95);
        org.junit.Assert.assertNotNull(complex96);
        org.junit.Assert.assertNotNull(complex97);
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 10, (-317.11773840932915d));
        complex2.imaginary = 10L;
        code.src.Complex complex7 = new code.src.Complex((double) 1, 28.09571990514327d);
        code.src.Complex complex10 = new code.src.Complex((double) (short) 0, (double) ' ');
        code.src.Complex complex11 = new code.src.Complex();
        complex11.real = 1L;
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        java.lang.String str21 = complex16.toString();
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        code.src.Complex complex29 = complex16.add(complex28);
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        java.lang.String str37 = complex32.toString();
        code.src.Complex complex40 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex43 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex44 = complex40.multiply(complex43);
        code.src.Complex complex45 = complex32.add(complex44);
        code.src.Complex complex46 = complex29.add(complex45);
        code.src.Complex complex47 = complex11.add(complex46);
        code.src.Complex complex48 = complex10.add(complex46);
        code.src.Complex complex51 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double52 = complex51.abs();
        code.src.Complex complex53 = complex10.add(complex51);
        code.src.Complex complex54 = complex7.add(complex10);
        code.src.Complex complex55 = complex2.sub(complex54);
        code.src.Complex complex58 = new code.src.Complex(525.4704025737593d, (double) 10L);
        code.src.Complex complex59 = complex55.multiply(complex58);
        complex55.imaginary = 213613.92147670433d;
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(10.0,0.0)" + "'", str21, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(10.0,0.0)" + "'", str37, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 52.0d + "'", double52 == 52.0d);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex59);
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        code.src.Complex complex40 = complex15.sub(complex35);
        double double41 = complex40.imaginary;
        code.src.Complex complex42 = new code.src.Complex();
        complex42.real = 1L;
        code.src.Complex complex47 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex50 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex51 = complex47.multiply(complex50);
        java.lang.String str52 = complex47.toString();
        code.src.Complex complex55 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex58 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex59 = complex55.multiply(complex58);
        code.src.Complex complex60 = complex47.add(complex59);
        code.src.Complex complex63 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex66 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex67 = complex63.multiply(complex66);
        java.lang.String str68 = complex63.toString();
        code.src.Complex complex71 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex74 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex75 = complex71.multiply(complex74);
        code.src.Complex complex76 = complex63.add(complex75);
        code.src.Complex complex77 = complex60.add(complex76);
        code.src.Complex complex78 = complex42.add(complex77);
        double double79 = complex78.real;
        code.src.Complex complex82 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex85 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex86 = complex82.multiply(complex85);
        code.src.Complex complex87 = complex78.sub(complex85);
        complex87.real = 0.0d;
        code.src.Complex complex90 = complex40.sub(complex87);
        double double91 = complex90.imaginary;
        java.lang.String str92 = complex90.toString();
        double double93 = complex90.abs();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 437.56491210010614d + "'", double41 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(10.0,0.0)" + "'", str52, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(10.0,0.0)" + "'", str68, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 582.9143981028653d + "'", double79 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + (-393.80842089009553d) + "'", double91 == (-393.80842089009553d));
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "(280.95719905143267,-393.80842089009553)" + "'", str92, "(280.95719905143267,-393.80842089009553)");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 483.75822480116756d + "'", double93 == 483.75822480116756d);
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        code.src.Complex complex2 = code.src.Complex.polar((double) 1L, (double) 100);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.add(complex5);
        code.src.Complex complex9 = new code.src.Complex((double) 100, (double) 10.0f);
        complex9.imaginary = 100L;
        code.src.Complex complex14 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex17 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex18 = complex14.multiply(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex37 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex40 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex41 = complex37.multiply(complex40);
        java.lang.String str42 = complex37.toString();
        code.src.Complex complex45 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex45.multiply(complex48);
        code.src.Complex complex50 = complex37.add(complex49);
        code.src.Complex complex51 = complex34.add(complex50);
        code.src.Complex complex54 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex57 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex58 = complex54.multiply(complex57);
        code.src.Complex complex59 = complex34.sub(complex54);
        code.src.Complex complex60 = complex17.add(complex59);
        code.src.Complex complex61 = complex9.multiply(complex59);
        java.lang.String str62 = complex9.toString();
        code.src.Complex complex63 = complex2.multiply(complex9);
        code.src.Complex complex66 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double67 = complex66.abs();
        java.lang.String str68 = complex66.toString();
        code.src.Complex complex69 = complex9.add(complex66);
        code.src.Complex complex72 = code.src.Complex.polar(1018.3729221500101d, 0.0d);
        double double73 = complex72.abs();
        code.src.Complex complex74 = complex9.add(complex72);
        java.lang.Class<?> wildcardClass75 = complex72.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(10.0,0.0)" + "'", str42, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(100.0,100.0)" + "'", str62, "(100.0,100.0)");
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 52.0d + "'", double67 == 52.0d);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str68, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 1018.3729221500101d + "'", double73 == 1018.3729221500101d);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        code.src.Complex complex2 = new code.src.Complex(0.0d, 437.56491210010614d);
        java.lang.String str3 = complex2.toString();
        java.lang.String str4 = complex2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "(0.0,437.56491210010614)" + "'", str3, "(0.0,437.56491210010614)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(0.0,437.56491210010614)" + "'", str4, "(0.0,437.56491210010614)");
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        code.src.Complex complex2 = code.src.Complex.polar(525.4704025737593d, (double) '#');
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        double double19 = complex18.real;
        code.src.Complex complex22 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex25 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex26 = complex22.multiply(complex25);
        double double27 = complex26.imaginary;
        code.src.Complex complex28 = complex18.sub(complex26);
        code.src.Complex complex29 = complex2.add(complex28);
        complex28.imaginary = 100L;
        double double32 = complex28.abs();
        java.lang.String str33 = complex28.toString();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 290.95719905143267d + "'", double19 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 437.56491210010614d + "'", double27 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 100.4987562112089d + "'", double32 == 100.4987562112089d);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(10.0,100.0)" + "'", str33, "(10.0,100.0)");
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        code.src.Complex complex2 = new code.src.Complex((-198.14967628541848d), (-363960.5478434686d));
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        code.src.Complex complex2 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex2.imaginary = (short) 0;
        complex2.imaginary = 100.0f;
        code.src.Complex complex9 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str10 = complex9.toString();
        code.src.Complex complex13 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        code.src.Complex complex14 = complex9.sub(complex13);
        code.src.Complex complex15 = complex2.multiply(complex14);
        code.src.Complex complex16 = new code.src.Complex();
        code.src.Complex complex19 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex22 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex23 = complex19.multiply(complex22);
        java.lang.String str24 = complex19.toString();
        code.src.Complex complex27 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex30 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex31 = complex27.multiply(complex30);
        code.src.Complex complex32 = complex19.add(complex31);
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        java.lang.String str40 = complex35.toString();
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        code.src.Complex complex48 = complex35.add(complex47);
        code.src.Complex complex49 = complex32.add(complex48);
        double double50 = complex49.real;
        code.src.Complex complex51 = complex16.multiply(complex49);
        code.src.Complex complex54 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex57 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex58 = complex54.multiply(complex57);
        java.lang.String str59 = complex54.toString();
        code.src.Complex complex62 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex65 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex66 = complex62.multiply(complex65);
        code.src.Complex complex67 = complex54.add(complex66);
        code.src.Complex complex70 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex73 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex74 = complex70.multiply(complex73);
        java.lang.String str75 = complex70.toString();
        code.src.Complex complex78 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex81 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex82 = complex78.multiply(complex81);
        code.src.Complex complex83 = complex70.add(complex82);
        code.src.Complex complex84 = complex67.add(complex83);
        java.lang.String str85 = complex67.toString();
        double double86 = complex67.abs();
        code.src.Complex complex87 = complex16.multiply(complex67);
        code.src.Complex complex88 = complex15.add(complex87);
        complex87.imaginary = (-363960.5478434686d);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(100.0,10.0)" + "'", str10, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(10.0,0.0)" + "'", str24, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(10.0,0.0)" + "'", str40, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 581.9143981028653d + "'", double50 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(10.0,0.0)" + "'", str59, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(10.0,0.0)" + "'", str75, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str85, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 525.4704025737593d + "'", double86 == 525.4704025737593d);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        complex2.real = (byte) 1;
        double double5 = complex2.imaginary;
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        code.src.Complex complex2 = new code.src.Complex(10.04987562112089d, (double) '#');
        java.lang.String str3 = complex2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "(10.04987562112089,35.0)" + "'", str3, "(10.04987562112089,35.0)");
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        code.src.Complex complex2 = new code.src.Complex(317.11773840932915d, 170.71953646075502d);
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        code.src.Complex complex2 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double3 = complex2.abs();
        double double4 = complex2.real;
        code.src.Complex complex7 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex10 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex11 = complex7.multiply(complex10);
        java.lang.String str12 = complex7.toString();
        code.src.Complex complex15 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex18 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex19 = complex15.multiply(complex18);
        code.src.Complex complex20 = complex7.add(complex19);
        code.src.Complex complex23 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex26 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex27 = complex23.multiply(complex26);
        java.lang.String str28 = complex23.toString();
        code.src.Complex complex31 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex34 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex35 = complex31.multiply(complex34);
        code.src.Complex complex36 = complex23.add(complex35);
        code.src.Complex complex37 = complex20.add(complex36);
        java.lang.String str38 = complex20.toString();
        double double39 = complex20.abs();
        double double40 = complex20.real;
        code.src.Complex complex41 = complex2.sub(complex20);
        double double42 = complex2.imaginary;
        code.src.Complex complex45 = new code.src.Complex((double) 1, 28.09571990514327d);
        code.src.Complex complex48 = new code.src.Complex((double) (short) 0, (double) ' ');
        code.src.Complex complex49 = new code.src.Complex();
        complex49.real = 1L;
        code.src.Complex complex54 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex57 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex58 = complex54.multiply(complex57);
        java.lang.String str59 = complex54.toString();
        code.src.Complex complex62 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex65 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex66 = complex62.multiply(complex65);
        code.src.Complex complex67 = complex54.add(complex66);
        code.src.Complex complex70 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex73 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex74 = complex70.multiply(complex73);
        java.lang.String str75 = complex70.toString();
        code.src.Complex complex78 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex81 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex82 = complex78.multiply(complex81);
        code.src.Complex complex83 = complex70.add(complex82);
        code.src.Complex complex84 = complex67.add(complex83);
        code.src.Complex complex85 = complex49.add(complex84);
        code.src.Complex complex86 = complex48.add(complex84);
        code.src.Complex complex89 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double90 = complex89.abs();
        code.src.Complex complex91 = complex48.add(complex89);
        code.src.Complex complex92 = complex45.add(complex48);
        code.src.Complex complex93 = complex2.multiply(complex48);
        double double94 = complex48.abs();
        double double95 = complex48.abs();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 52.0d + "'", double3 == 52.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 28.09571990514327d + "'", double4 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(10.0,0.0)" + "'", str12, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(10.0,0.0)" + "'", str28, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str38, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 525.4704025737593d + "'", double39 == 525.4704025737593d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 290.95719905143267d + "'", double40 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 43.756491210010616d + "'", double42 == 43.756491210010616d);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(10.0,0.0)" + "'", str59, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(10.0,0.0)" + "'", str75, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 52.0d + "'", double90 == 52.0d);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 32.0d + "'", double94 == 32.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 32.0d + "'", double95 == 32.0d);
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        double double33 = complex15.real;
        double double34 = complex15.real;
        code.src.Complex complex37 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex40 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex41 = complex37.multiply(complex40);
        java.lang.String str42 = complex37.toString();
        code.src.Complex complex45 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex45.multiply(complex48);
        code.src.Complex complex50 = complex37.add(complex49);
        code.src.Complex complex53 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex56 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex57 = complex53.multiply(complex56);
        java.lang.String str58 = complex53.toString();
        code.src.Complex complex61 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex64 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex65 = complex61.multiply(complex64);
        code.src.Complex complex66 = complex53.add(complex65);
        code.src.Complex complex67 = complex50.add(complex66);
        code.src.Complex complex68 = complex15.sub(complex50);
        double double69 = complex68.abs();
        code.src.Complex complex72 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex72.imaginary = (short) 0;
        complex72.imaginary = 100.0f;
        code.src.Complex complex77 = complex68.multiply(complex72);
        code.src.Complex complex80 = new code.src.Complex((double) (byte) 100, (double) 'a');
        code.src.Complex complex83 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex86 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex87 = complex83.multiply(complex86);
        double double88 = complex86.imaginary;
        java.lang.String str89 = complex86.toString();
        code.src.Complex complex90 = complex80.sub(complex86);
        code.src.Complex complex93 = new code.src.Complex((double) 100, (double) 10.0f);
        complex93.real = (byte) 1;
        code.src.Complex complex96 = complex86.multiply(complex93);
        code.src.Complex complex97 = complex72.sub(complex96);
        complex97.real = 87.48639198643185d;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 290.95719905143267d + "'", double33 == 290.95719905143267d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 290.95719905143267d + "'", double34 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(10.0,0.0)" + "'", str42, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(10.0,0.0)" + "'", str58, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 43.756491210010616d + "'", double88 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str89, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex96);
        org.junit.Assert.assertNotNull(complex97);
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = code.src.Complex.polar((double) (short) -1, 52.0d);
        code.src.Complex complex13 = new code.src.Complex((double) 100, (double) 10.0f);
        complex13.real = (byte) 1;
        complex13.real = 589.1068753368511d;
        java.lang.String str18 = complex13.toString();
        code.src.Complex complex21 = new code.src.Complex((double) (short) 100, 43.756491210010616d);
        code.src.Complex complex22 = new code.src.Complex();
        complex22.real = 1L;
        code.src.Complex complex27 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex30 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex31 = complex27.multiply(complex30);
        java.lang.String str32 = complex27.toString();
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        code.src.Complex complex40 = complex27.add(complex39);
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        java.lang.String str48 = complex43.toString();
        code.src.Complex complex51 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex54 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex55 = complex51.multiply(complex54);
        code.src.Complex complex56 = complex43.add(complex55);
        code.src.Complex complex57 = complex40.add(complex56);
        code.src.Complex complex58 = complex22.add(complex57);
        double double59 = complex58.real;
        code.src.Complex complex62 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex65 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex66 = complex62.multiply(complex65);
        code.src.Complex complex67 = complex58.sub(complex65);
        code.src.Complex complex68 = complex21.add(complex65);
        code.src.Complex complex69 = complex13.sub(complex65);
        code.src.Complex complex70 = complex10.add(complex13);
        complex70.imaginary = (-0.0d);
        code.src.Complex complex73 = complex2.multiply(complex70);
        java.lang.String str74 = complex2.toString();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(589.1068753368511,10.0)" + "'", str18, "(589.1068753368511,10.0)");
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(10.0,0.0)" + "'", str32, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(10.0,0.0)" + "'", str48, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 582.9143981028653d + "'", double59 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(10.0,0.0)" + "'", str74, "(10.0,0.0)");
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        code.src.Complex complex2 = new code.src.Complex((-5.063656411097588d), 103.87188973436588d);
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        code.src.Complex complex33 = new code.src.Complex();
        code.src.Complex complex34 = complex32.add(complex33);
        complex32.real = 10;
        double double37 = complex32.imaginary;
        java.lang.String str38 = complex32.toString();
        code.src.Complex complex41 = new code.src.Complex(10.04987562112089d, (double) '#');
        double double42 = complex41.abs();
        code.src.Complex complex43 = complex32.sub(complex41);
        complex32.imaginary = '#';
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 875.1298242002123d + "'", double37 == 875.1298242002123d);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(10.0,875.1298242002123)" + "'", str38, "(10.0,875.1298242002123)");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 36.41428291206625d + "'", double42 == 36.41428291206625d);
        org.junit.Assert.assertNotNull(complex43);
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 100, 43.756491210010616d);
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        double double40 = complex39.real;
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        code.src.Complex complex48 = complex39.sub(complex46);
        code.src.Complex complex49 = complex2.add(complex46);
        code.src.Complex complex52 = new code.src.Complex((double) (byte) 100, (double) 'a');
        code.src.Complex complex55 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex58 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex59 = complex55.multiply(complex58);
        double double60 = complex58.imaginary;
        java.lang.String str61 = complex58.toString();
        code.src.Complex complex62 = complex52.sub(complex58);
        code.src.Complex complex63 = complex2.multiply(complex62);
        code.src.Complex complex64 = null;
        // The following exception was thrown during execution in test generation
        try {
            code.src.Complex complex65 = complex62.add(complex64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 582.9143981028653d + "'", double40 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 43.756491210010616d + "'", double60 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str61, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        code.src.Complex complex2 = new code.src.Complex(100.0d, (double) (byte) 10);
        java.lang.String str3 = complex2.toString();
        code.src.Complex complex4 = null;
        // The following exception was thrown during execution in test generation
        try {
            code.src.Complex complex5 = complex2.sub(complex4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "(100.0,10.0)" + "'", str3, "(100.0,10.0)");
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        code.src.Complex complex2 = new code.src.Complex((double) '4', 320.0d);
        code.src.Complex complex5 = new code.src.Complex((double) 100L, 907.1298242002123d);
        code.src.Complex complex6 = complex2.multiply(complex5);
        org.junit.Assert.assertNotNull(complex6);
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        double double33 = complex15.real;
        double double34 = complex15.real;
        java.lang.String str35 = complex15.toString();
        complex15.real = 14827.945873355611d;
        double double38 = complex15.imaginary;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 290.95719905143267d + "'", double33 == 290.95719905143267d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 290.95719905143267d + "'", double34 == 290.95719905143267d);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str35, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 437.56491210010614d + "'", double38 == 437.56491210010614d);
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 0, (double) ' ');
        complex2.imaginary = (-1.0d);
        double double5 = complex2.real;
        java.lang.String str6 = complex2.toString();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(0.0,-1.0)" + "'", str6, "(0.0,-1.0)");
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        code.src.Complex complex2 = code.src.Complex.polar((-273.44509135195034d), 58910.68753368511d);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        double double37 = complex36.real;
        code.src.Complex complex40 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex43 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex44 = complex40.multiply(complex43);
        code.src.Complex complex45 = complex36.sub(complex43);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex43.add(complex48);
        code.src.Complex complex52 = new code.src.Complex((double) 10L, (double) '#');
        code.src.Complex complex53 = complex48.add(complex52);
        code.src.Complex complex56 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        double double57 = complex56.abs();
        code.src.Complex complex60 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str61 = complex60.toString();
        code.src.Complex complex62 = complex56.multiply(complex60);
        code.src.Complex complex63 = complex52.add(complex56);
        complex52.real = 907.5648116969368d;
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 582.9143981028653d + "'", double37 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(100.0,10.0)" + "'", str61, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        code.src.Complex complex2 = code.src.Complex.polar(432.1247009912124d, (double) 100);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        code.src.Complex complex2 = code.src.Complex.polar((-317.11773840932915d), 170.71953646075502d);
        java.lang.Class<?> wildcardClass3 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        code.src.Complex complex2 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex2.imaginary = (short) 0;
        double double5 = complex2.abs();
        double double6 = complex2.real;
        double double7 = complex2.real;
        complex2.imaginary = 612077.1638882305d;
        code.src.Complex complex10 = null;
        // The following exception was thrown during execution in test generation
        try {
            code.src.Complex complex11 = complex2.multiply(complex10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-0.0d) + "'", double6 == (-0.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-0.0d) + "'", double7 == (-0.0d));
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 0, (double) ' ');
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        code.src.Complex complex40 = complex2.add(complex38);
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        java.lang.String str48 = complex43.toString();
        code.src.Complex complex51 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex54 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex55 = complex51.multiply(complex54);
        code.src.Complex complex56 = complex43.add(complex55);
        code.src.Complex complex59 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex62 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex63 = complex59.multiply(complex62);
        java.lang.String str64 = complex59.toString();
        code.src.Complex complex67 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex70 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex71 = complex67.multiply(complex70);
        code.src.Complex complex72 = complex59.add(complex71);
        code.src.Complex complex73 = complex56.add(complex72);
        code.src.Complex complex74 = new code.src.Complex();
        code.src.Complex complex75 = complex73.add(complex74);
        code.src.Complex complex76 = complex40.add(complex74);
        java.lang.String str77 = complex40.toString();
        double double78 = complex40.real;
        java.lang.String str79 = complex40.toString();
        java.lang.String str80 = complex40.toString();
        java.lang.String str81 = complex40.toString();
        double double82 = complex40.imaginary;
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(10.0,0.0)" + "'", str48, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(10.0,0.0)" + "'", str64, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(581.9143981028653,907.1298242002123)" + "'", str77, "(581.9143981028653,907.1298242002123)");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 581.9143981028653d + "'", double78 == 581.9143981028653d);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "(581.9143981028653,907.1298242002123)" + "'", str79, "(581.9143981028653,907.1298242002123)");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "(581.9143981028653,907.1298242002123)" + "'", str80, "(581.9143981028653,907.1298242002123)");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "(581.9143981028653,907.1298242002123)" + "'", str81, "(581.9143981028653,907.1298242002123)");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 907.1298242002123d + "'", double82 == 907.1298242002123d);
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        code.src.Complex complex2 = new code.src.Complex(52.0d, 112.71202242884297d);
        java.lang.String str3 = complex2.toString();
        code.src.Complex complex6 = new code.src.Complex(10.0d, (double) 10L);
        complex6.real = 290.95719905143267d;
        code.src.Complex complex9 = complex2.add(complex6);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "(52.0,112.71202242884297)" + "'", str3, "(52.0,112.71202242884297)");
        org.junit.Assert.assertNotNull(complex9);
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        code.src.Complex complex2 = code.src.Complex.polar((-4749.336038853687d), 445.65251212240173d);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        code.src.Complex complex2 = new code.src.Complex(43.756491210010616d, 0.0d);
        code.src.Complex complex5 = new code.src.Complex(10.0d, (-906.2883532154044d));
        code.src.Complex complex6 = complex2.add(complex5);
        complex6.real = 0.0d;
        code.src.Complex complex11 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex11.imaginary = (short) 0;
        complex11.imaginary = 100.0f;
        code.src.Complex complex18 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str19 = complex18.toString();
        code.src.Complex complex22 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        code.src.Complex complex23 = complex18.sub(complex22);
        code.src.Complex complex24 = complex11.multiply(complex23);
        java.lang.String str25 = complex23.toString();
        double double26 = complex23.real;
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        java.lang.String str34 = complex29.toString();
        code.src.Complex complex37 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex40 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex41 = complex37.multiply(complex40);
        code.src.Complex complex42 = complex29.add(complex41);
        code.src.Complex complex45 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex45.multiply(complex48);
        java.lang.String str50 = complex45.toString();
        code.src.Complex complex53 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex56 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex57 = complex53.multiply(complex56);
        code.src.Complex complex58 = complex45.add(complex57);
        code.src.Complex complex59 = complex42.add(complex58);
        code.src.Complex complex62 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex65 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex66 = complex62.multiply(complex65);
        code.src.Complex complex67 = complex42.sub(complex62);
        double double68 = complex42.abs();
        code.src.Complex complex69 = complex23.multiply(complex42);
        code.src.Complex complex70 = complex6.add(complex42);
        double double71 = complex6.imaginary;
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(100.0,10.0)" + "'", str19, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(589.1068753368511,327.11773840932915)" + "'", str25, "(589.1068753368511,327.11773840932915)");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 589.1068753368511d + "'", double26 == 589.1068753368511d);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(10.0,0.0)" + "'", str34, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(10.0,0.0)" + "'", str50, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 525.4704025737593d + "'", double68 == 525.4704025737593d);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + (-906.2883532154044d) + "'", double71 == (-906.2883532154044d));
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        code.src.Complex complex33 = new code.src.Complex();
        code.src.Complex complex34 = complex32.add(complex33);
        code.src.Complex complex37 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex40 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex41 = complex37.multiply(complex40);
        double double42 = complex40.imaginary;
        java.lang.String str43 = complex40.toString();
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double47 = complex46.abs();
        double double48 = complex46.real;
        code.src.Complex complex49 = complex40.sub(complex46);
        code.src.Complex complex50 = complex33.sub(complex40);
        double double51 = complex50.real;
        complex50.imaginary = (-489.10687533685115d);
        complex50.real = 121.44752674007574d;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 43.756491210010616d + "'", double42 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str43, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 52.0d + "'", double47 == 52.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 28.09571990514327d + "'", double48 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + (-28.09571990514327d) + "'", double51 == (-28.09571990514327d));
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        double double16 = complex15.real;
        code.src.Complex complex19 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex22 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex23 = complex19.multiply(complex22);
        double double24 = complex23.imaginary;
        code.src.Complex complex25 = complex15.sub(complex23);
        code.src.Complex complex28 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex31 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex32 = complex28.multiply(complex31);
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        java.lang.String str40 = complex35.toString();
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        code.src.Complex complex48 = complex35.add(complex47);
        code.src.Complex complex51 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex54 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex55 = complex51.multiply(complex54);
        java.lang.String str56 = complex51.toString();
        code.src.Complex complex59 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex62 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex63 = complex59.multiply(complex62);
        code.src.Complex complex64 = complex51.add(complex63);
        code.src.Complex complex65 = complex48.add(complex64);
        code.src.Complex complex68 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex71 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex72 = complex68.multiply(complex71);
        code.src.Complex complex73 = complex48.sub(complex68);
        code.src.Complex complex74 = complex31.add(complex73);
        code.src.Complex complex75 = complex25.add(complex31);
        double double76 = complex75.abs();
        double double77 = complex75.imaginary;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 290.95719905143267d + "'", double16 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 437.56491210010614d + "'", double24 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(10.0,0.0)" + "'", str40, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "(10.0,0.0)" + "'", str56, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 58.01650108462993d + "'", double76 == 58.01650108462993d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 43.756491210010616d + "'", double77 == 43.756491210010616d);
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        code.src.Complex complex2 = new code.src.Complex((double) (byte) -1, 1018.3729221500101d);
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        code.src.Complex complex2 = new code.src.Complex(15118.903072407044d, 16815.052882360298d);
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        code.src.Complex complex2 = code.src.Complex.polar((double) (byte) -1, 100.4987562112089d);
        double double3 = complex2.abs();
        double double4 = complex2.real;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-0.9994813445442423d) + "'", double4 == (-0.9994813445442423d));
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        code.src.Complex complex2 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex2.imaginary = (short) 0;
        complex2.imaginary = 100.0f;
        code.src.Complex complex9 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str10 = complex9.toString();
        code.src.Complex complex13 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        code.src.Complex complex14 = complex9.sub(complex13);
        code.src.Complex complex15 = complex2.multiply(complex14);
        java.lang.String str16 = complex14.toString();
        java.lang.String str17 = complex14.toString();
        complex14.real = 100.00499987500625d;
        java.lang.String str20 = complex14.toString();
        java.lang.Class<?> wildcardClass21 = complex14.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(100.0,10.0)" + "'", str10, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(589.1068753368511,327.11773840932915)" + "'", str16, "(589.1068753368511,327.11773840932915)");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(589.1068753368511,327.11773840932915)" + "'", str17, "(589.1068753368511,327.11773840932915)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(100.00499987500625,327.11773840932915)" + "'", str20, "(100.00499987500625,327.11773840932915)");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        double double33 = complex15.real;
        double double34 = complex15.real;
        code.src.Complex complex37 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex40 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex41 = complex37.multiply(complex40);
        java.lang.String str42 = complex37.toString();
        code.src.Complex complex45 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex45.multiply(complex48);
        code.src.Complex complex50 = complex37.add(complex49);
        code.src.Complex complex53 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex56 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex57 = complex53.multiply(complex56);
        java.lang.String str58 = complex53.toString();
        code.src.Complex complex61 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex64 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex65 = complex61.multiply(complex64);
        code.src.Complex complex66 = complex53.add(complex65);
        code.src.Complex complex67 = complex50.add(complex66);
        code.src.Complex complex68 = complex15.sub(complex50);
        double double69 = complex50.abs();
        double double70 = complex50.abs();
        double double71 = complex50.real;
        java.lang.Class<?> wildcardClass72 = complex50.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 290.95719905143267d + "'", double33 == 290.95719905143267d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 290.95719905143267d + "'", double34 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(10.0,0.0)" + "'", str42, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(10.0,0.0)" + "'", str58, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 525.4704025737593d + "'", double69 == 525.4704025737593d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 525.4704025737593d + "'", double70 == 525.4704025737593d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 290.95719905143267d + "'", double71 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        code.src.Complex complex33 = new code.src.Complex();
        code.src.Complex complex34 = complex32.add(complex33);
        double double35 = complex32.imaginary;
        double double36 = complex32.abs();
        double double37 = complex32.imaginary;
        code.src.Complex complex40 = new code.src.Complex((double) 1.0f, (double) 10.0f);
        code.src.Complex complex41 = complex32.sub(complex40);
        double double42 = complex40.imaginary;
        double double43 = complex40.real;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 875.1298242002123d + "'", double35 == 875.1298242002123d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1050.9408051475186d + "'", double36 == 1050.9408051475186d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 875.1298242002123d + "'", double37 == 875.1298242002123d);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 10.0d + "'", double42 == 10.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        code.src.Complex complex2 = new code.src.Complex((double) 100.0f, (double) 100.0f);
        double double3 = complex2.abs();
        double double4 = complex2.imaginary;
        code.src.Complex complex7 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex10 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex11 = complex7.multiply(complex10);
        java.lang.String str12 = complex7.toString();
        java.lang.String str13 = complex7.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex23 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex26 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex27 = complex23.multiply(complex26);
        java.lang.String str28 = complex23.toString();
        code.src.Complex complex31 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex34 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex35 = complex31.multiply(complex34);
        code.src.Complex complex36 = complex23.add(complex35);
        java.lang.String str37 = complex23.toString();
        code.src.Complex complex38 = complex20.add(complex23);
        code.src.Complex complex39 = complex7.sub(complex23);
        double double40 = complex39.real;
        code.src.Complex complex41 = new code.src.Complex();
        complex41.real = 1L;
        code.src.Complex complex46 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex49 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex50 = complex46.multiply(complex49);
        java.lang.String str51 = complex46.toString();
        code.src.Complex complex54 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex57 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex58 = complex54.multiply(complex57);
        code.src.Complex complex59 = complex46.add(complex58);
        code.src.Complex complex62 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex65 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex66 = complex62.multiply(complex65);
        java.lang.String str67 = complex62.toString();
        code.src.Complex complex70 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex73 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex74 = complex70.multiply(complex73);
        code.src.Complex complex75 = complex62.add(complex74);
        code.src.Complex complex76 = complex59.add(complex75);
        code.src.Complex complex77 = complex41.add(complex76);
        double double78 = complex77.real;
        code.src.Complex complex81 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex84 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex85 = complex81.multiply(complex84);
        code.src.Complex complex86 = complex77.sub(complex84);
        code.src.Complex complex89 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex90 = complex84.add(complex89);
        complex89.imaginary = (short) 100;
        code.src.Complex complex93 = complex39.sub(complex89);
        code.src.Complex complex94 = complex2.multiply(complex89);
        double double95 = complex94.imaginary;
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 141.4213562373095d + "'", double3 == 141.4213562373095d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 100.0d + "'", double4 == 100.0d);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(10.0,0.0)" + "'", str12, "(10.0,0.0)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(10.0,0.0)" + "'", str28, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(10.0,0.0)" + "'", str37, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "(10.0,0.0)" + "'", str51, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(10.0,0.0)" + "'", str67, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 582.9143981028653d + "'", double78 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertNotNull(complex94);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 12809.571990514327d + "'", double95 == 12809.571990514327d);
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        code.src.Complex complex2 = code.src.Complex.polar(525.4704025737593d, (double) '#');
        code.src.Complex complex5 = code.src.Complex.polar((double) 10L, 100.0d);
        code.src.Complex complex8 = new code.src.Complex((double) 100, (double) 10.0f);
        complex8.real = (byte) 1;
        complex8.imaginary = (short) 100;
        code.src.Complex complex13 = new code.src.Complex();
        complex13.real = 1L;
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex34 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex37 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex38 = complex34.multiply(complex37);
        java.lang.String str39 = complex34.toString();
        code.src.Complex complex42 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex45 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex46 = complex42.multiply(complex45);
        code.src.Complex complex47 = complex34.add(complex46);
        code.src.Complex complex48 = complex31.add(complex47);
        code.src.Complex complex49 = complex13.add(complex48);
        double double50 = complex13.imaginary;
        double double51 = complex13.imaginary;
        java.lang.String str52 = complex13.toString();
        code.src.Complex complex53 = complex8.sub(complex13);
        code.src.Complex complex56 = new code.src.Complex((double) (byte) 100, (double) 'a');
        code.src.Complex complex59 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex62 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex63 = complex59.multiply(complex62);
        double double64 = complex62.imaginary;
        java.lang.String str65 = complex62.toString();
        code.src.Complex complex66 = complex56.sub(complex62);
        code.src.Complex complex69 = new code.src.Complex((double) 100, (double) 10.0f);
        complex69.real = (byte) 1;
        code.src.Complex complex72 = complex62.multiply(complex69);
        code.src.Complex complex73 = complex53.sub(complex72);
        code.src.Complex complex74 = complex5.multiply(complex72);
        code.src.Complex complex75 = complex2.sub(complex5);
        complex2.imaginary = (byte) 10;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(10.0,0.0)" + "'", str39, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(1.0,0.0)" + "'", str52, "(1.0,0.0)");
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 43.756491210010616d + "'", double64 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str65, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 100, 43.756491210010616d);
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        double double40 = complex39.real;
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        code.src.Complex complex48 = complex39.sub(complex46);
        code.src.Complex complex49 = complex2.add(complex46);
        code.src.Complex complex52 = new code.src.Complex((double) (short) 1, 290.95719905143267d);
        java.lang.String str53 = complex52.toString();
        code.src.Complex complex56 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double57 = complex56.abs();
        double double58 = complex56.real;
        code.src.Complex complex61 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex64 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex65 = complex61.multiply(complex64);
        java.lang.String str66 = complex61.toString();
        code.src.Complex complex69 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex72 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex73 = complex69.multiply(complex72);
        code.src.Complex complex74 = complex61.add(complex73);
        code.src.Complex complex77 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex80 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex81 = complex77.multiply(complex80);
        java.lang.String str82 = complex77.toString();
        code.src.Complex complex85 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex88 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex89 = complex85.multiply(complex88);
        code.src.Complex complex90 = complex77.add(complex89);
        code.src.Complex complex91 = complex74.add(complex90);
        java.lang.String str92 = complex74.toString();
        double double93 = complex74.abs();
        double double94 = complex74.real;
        code.src.Complex complex95 = complex56.sub(complex74);
        code.src.Complex complex96 = complex52.add(complex56);
        code.src.Complex complex97 = complex2.add(complex56);
        double double98 = complex56.imaginary;
        double double99 = complex56.real;
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 582.9143981028653d + "'", double40 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(1.0,290.95719905143267)" + "'", str53, "(1.0,290.95719905143267)");
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 52.0d + "'", double57 == 52.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 28.09571990514327d + "'", double58 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(10.0,0.0)" + "'", str66, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "(10.0,0.0)" + "'", str82, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str92, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 525.4704025737593d + "'", double93 == 525.4704025737593d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 290.95719905143267d + "'", double94 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex95);
        org.junit.Assert.assertNotNull(complex96);
        org.junit.Assert.assertNotNull(complex97);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 43.756491210010616d + "'", double98 == 43.756491210010616d);
        org.junit.Assert.assertTrue("'" + double99 + "' != '" + 28.09571990514327d + "'", double99 == 28.09571990514327d);
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        double double7 = complex5.imaginary;
        double double8 = complex5.imaginary;
        code.src.Complex complex11 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex14 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex15 = complex11.multiply(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex34 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex37 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex38 = complex34.multiply(complex37);
        java.lang.String str39 = complex34.toString();
        code.src.Complex complex42 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex45 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex46 = complex42.multiply(complex45);
        code.src.Complex complex47 = complex34.add(complex46);
        code.src.Complex complex48 = complex31.add(complex47);
        code.src.Complex complex51 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex54 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex55 = complex51.multiply(complex54);
        code.src.Complex complex56 = complex31.sub(complex51);
        code.src.Complex complex57 = complex14.add(complex56);
        double double58 = complex57.abs();
        double double59 = complex57.imaginary;
        complex57.imaginary = 1L;
        code.src.Complex complex62 = complex5.sub(complex57);
        complex62.real = 112.71202242884297d;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 43.756491210010616d + "'", double7 == 43.756491210010616d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 43.756491210010616d + "'", double8 == 43.756491210010616d);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(10.0,0.0)" + "'", str39, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 572.0d + "'", double58 == 572.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 481.32140331011675d + "'", double59 == 481.32140331011675d);
        org.junit.Assert.assertNotNull(complex62);
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        code.src.Complex complex2 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex2.imaginary = (short) 0;
        complex2.imaginary = 100.0f;
        code.src.Complex complex9 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex12 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex13 = complex9.multiply(complex12);
        java.lang.String str14 = complex9.toString();
        code.src.Complex complex17 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex20 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex21 = complex17.multiply(complex20);
        code.src.Complex complex22 = complex9.add(complex21);
        code.src.Complex complex25 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex28 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex29 = complex25.multiply(complex28);
        java.lang.String str30 = complex25.toString();
        code.src.Complex complex33 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex36 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex37 = complex33.multiply(complex36);
        code.src.Complex complex38 = complex25.add(complex37);
        code.src.Complex complex39 = complex22.add(complex38);
        java.lang.String str40 = complex22.toString();
        code.src.Complex complex43 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex43.imaginary = (short) 0;
        java.lang.String str46 = complex43.toString();
        code.src.Complex complex47 = complex22.sub(complex43);
        code.src.Complex complex48 = complex2.add(complex47);
        complex48.imaginary = 0;
        complex48.real = 10.0f;
        complex48.imaginary = 481.32140331011675d;
        code.src.Complex complex57 = new code.src.Complex(290.9589175121722d, (double) 10);
        code.src.Complex complex58 = complex48.add(complex57);
        complex48.real = 352.8614791462894d;
        java.lang.String str61 = complex48.toString();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(10.0,0.0)" + "'", str14, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(10.0,0.0)" + "'", str30, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str40, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(-0.0,0.0)" + "'", str46, "(-0.0,0.0)");
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(352.8614791462894,481.32140331011675)" + "'", str61, "(352.8614791462894,481.32140331011675)");
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        complex2.real = (byte) 1;
        complex2.imaginary = (short) 100;
        code.src.Complex complex9 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex12 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex13 = complex9.multiply(complex12);
        java.lang.String str14 = complex9.toString();
        code.src.Complex complex17 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex20 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex21 = complex17.multiply(complex20);
        code.src.Complex complex22 = complex9.add(complex21);
        double double23 = complex22.real;
        code.src.Complex complex26 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex27 = complex22.multiply(complex26);
        code.src.Complex complex28 = complex2.multiply(complex22);
        complex22.imaginary = 611.0101180080086d;
        code.src.Complex complex33 = code.src.Complex.polar((double) (short) -1, 52.0d);
        code.src.Complex complex36 = new code.src.Complex((double) 100, (double) 10.0f);
        complex36.real = (byte) 1;
        complex36.real = 589.1068753368511d;
        java.lang.String str41 = complex36.toString();
        code.src.Complex complex44 = new code.src.Complex((double) (short) 100, 43.756491210010616d);
        code.src.Complex complex45 = new code.src.Complex();
        complex45.real = 1L;
        code.src.Complex complex50 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex53 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex54 = complex50.multiply(complex53);
        java.lang.String str55 = complex50.toString();
        code.src.Complex complex58 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex61 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex62 = complex58.multiply(complex61);
        code.src.Complex complex63 = complex50.add(complex62);
        code.src.Complex complex66 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex69 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex70 = complex66.multiply(complex69);
        java.lang.String str71 = complex66.toString();
        code.src.Complex complex74 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex77 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex78 = complex74.multiply(complex77);
        code.src.Complex complex79 = complex66.add(complex78);
        code.src.Complex complex80 = complex63.add(complex79);
        code.src.Complex complex81 = complex45.add(complex80);
        double double82 = complex81.real;
        code.src.Complex complex85 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex88 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex89 = complex85.multiply(complex88);
        code.src.Complex complex90 = complex81.sub(complex88);
        code.src.Complex complex91 = complex44.add(complex88);
        code.src.Complex complex92 = complex36.sub(complex88);
        code.src.Complex complex93 = complex33.add(complex36);
        code.src.Complex complex94 = complex22.multiply(complex33);
        complex94.real = 1926.648617074226d;
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(10.0,0.0)" + "'", str14, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 290.95719905143267d + "'", double23 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(589.1068753368511,10.0)" + "'", str41, "(589.1068753368511,10.0)");
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(10.0,0.0)" + "'", str55, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(10.0,0.0)" + "'", str71, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 582.9143981028653d + "'", double82 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertNotNull(complex94);
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        code.src.Complex complex2 = new code.src.Complex((double) (byte) 10, (-44.52533050340393d));
        complex2.real = (-10.0d);
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        java.lang.String str8 = complex2.toString();
        code.src.Complex complex11 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex14 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex15 = complex11.multiply(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        java.lang.String str32 = complex18.toString();
        code.src.Complex complex33 = complex15.add(complex18);
        code.src.Complex complex34 = complex2.sub(complex18);
        java.lang.Class<?> wildcardClass35 = complex34.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(10.0,0.0)" + "'", str8, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(10.0,0.0)" + "'", str32, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        code.src.Complex complex2 = new code.src.Complex(213931.13074726702d, 922.8939813892761d);
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, (double) '#');
        complex2.imaginary = (byte) 10;
        java.lang.String str5 = complex2.toString();
        double double6 = complex2.imaginary;
        complex2.real = 'a';
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(10.0,10.0)" + "'", str5, "(10.0,10.0)");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        code.src.Complex complex2 = code.src.Complex.polar((double) (short) 0, (double) (byte) 10);
        code.src.Complex complex3 = new code.src.Complex();
        code.src.Complex complex6 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex9 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex10 = complex6.multiply(complex9);
        java.lang.String str11 = complex6.toString();
        code.src.Complex complex14 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex17 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex18 = complex14.multiply(complex17);
        code.src.Complex complex19 = complex6.add(complex18);
        code.src.Complex complex22 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex25 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex26 = complex22.multiply(complex25);
        java.lang.String str27 = complex22.toString();
        code.src.Complex complex30 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex33 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex34 = complex30.multiply(complex33);
        code.src.Complex complex35 = complex22.add(complex34);
        code.src.Complex complex36 = complex19.add(complex35);
        double double37 = complex36.real;
        code.src.Complex complex38 = complex3.multiply(complex36);
        double double39 = complex36.abs();
        code.src.Complex complex40 = complex2.sub(complex36);
        code.src.Complex complex43 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex43.imaginary = (short) 0;
        complex43.imaginary = 100.0f;
        code.src.Complex complex50 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str51 = complex50.toString();
        code.src.Complex complex54 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        code.src.Complex complex55 = complex50.sub(complex54);
        code.src.Complex complex56 = complex43.multiply(complex55);
        java.lang.String str57 = complex55.toString();
        double double58 = complex55.real;
        code.src.Complex complex59 = complex2.add(complex55);
        double double60 = complex2.imaginary;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(10.0,0.0)" + "'", str11, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(10.0,0.0)" + "'", str27, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 581.9143981028653d + "'", double37 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1050.9408051475186d + "'", double39 == 1050.9408051475186d);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "(100.0,10.0)" + "'", str51, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(589.1068753368511,327.11773840932915)" + "'", str57, "(589.1068753368511,327.11773840932915)");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 589.1068753368511d + "'", double58 == 589.1068753368511d);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + (-0.0d) + "'", double60 == (-0.0d));
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        code.src.Complex complex2 = code.src.Complex.polar((-495.7163425468028d), 1926.648617074226d);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        double double37 = complex36.real;
        code.src.Complex complex40 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex43 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex44 = complex40.multiply(complex43);
        code.src.Complex complex45 = complex36.sub(complex43);
        code.src.Complex complex46 = null;
        // The following exception was thrown during execution in test generation
        try {
            code.src.Complex complex47 = complex45.add(complex46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 582.9143981028653d + "'", double37 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        code.src.Complex complex33 = new code.src.Complex();
        code.src.Complex complex34 = complex32.add(complex33);
        code.src.Complex complex37 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex40 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex41 = complex37.multiply(complex40);
        java.lang.String str42 = complex37.toString();
        code.src.Complex complex45 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex45.multiply(complex48);
        code.src.Complex complex50 = complex37.add(complex49);
        code.src.Complex complex53 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex56 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex57 = complex53.multiply(complex56);
        java.lang.String str58 = complex53.toString();
        code.src.Complex complex61 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex64 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex65 = complex61.multiply(complex64);
        code.src.Complex complex66 = complex53.add(complex65);
        code.src.Complex complex67 = complex50.add(complex66);
        code.src.Complex complex68 = new code.src.Complex();
        code.src.Complex complex69 = complex67.add(complex68);
        code.src.Complex complex72 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex75 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex76 = complex72.multiply(complex75);
        double double77 = complex75.imaginary;
        java.lang.String str78 = complex75.toString();
        code.src.Complex complex81 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double82 = complex81.abs();
        double double83 = complex81.real;
        code.src.Complex complex84 = complex75.sub(complex81);
        code.src.Complex complex85 = complex68.sub(complex75);
        code.src.Complex complex86 = complex33.add(complex68);
        double double87 = complex86.real;
        java.lang.String str88 = complex86.toString();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(10.0,0.0)" + "'", str42, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(10.0,0.0)" + "'", str58, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 43.756491210010616d + "'", double77 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str78, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 52.0d + "'", double82 == 52.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 28.09571990514327d + "'", double83 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "(0.0,0.0)" + "'", str88, "(0.0,0.0)");
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        code.src.Complex complex2 = code.src.Complex.polar((double) (byte) 100, 52.0d);
        complex2.imaginary = 28.09571990514327d;
        double double5 = complex2.abs();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 32.481216467863405d + "'", double5 == 32.481216467863405d);
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        code.src.Complex complex2 = code.src.Complex.polar(52.0d, 27.594203913205885d);
        double double3 = complex2.abs();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 52.00000000000001d + "'", double3 == 52.00000000000001d);
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        code.src.Complex complex2 = code.src.Complex.polar(518.518416496393d, 939.1298242002123d);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        code.src.Complex complex2 = new code.src.Complex((double) 100.0f, (double) (byte) 0);
        complex2.real = 12809.571990514327d;
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        code.src.Complex complex2 = new code.src.Complex(335.9759148588362d, (-393.80842089009553d));
        double double3 = complex2.abs();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 517.6532504767864d + "'", double3 == 517.6532504767864d);
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        code.src.Complex complex2 = new code.src.Complex(0.0d, 3.946455324461428d);
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        code.src.Complex complex2 = code.src.Complex.polar((double) '#', 280.95719905143267d);
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex38 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex41 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex42 = complex38.multiply(complex41);
        code.src.Complex complex43 = complex18.sub(complex38);
        double double44 = complex43.imaginary;
        code.src.Complex complex45 = new code.src.Complex();
        complex45.real = 1L;
        code.src.Complex complex50 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex53 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex54 = complex50.multiply(complex53);
        java.lang.String str55 = complex50.toString();
        code.src.Complex complex58 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex61 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex62 = complex58.multiply(complex61);
        code.src.Complex complex63 = complex50.add(complex62);
        code.src.Complex complex66 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex69 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex70 = complex66.multiply(complex69);
        java.lang.String str71 = complex66.toString();
        code.src.Complex complex74 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex77 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex78 = complex74.multiply(complex77);
        code.src.Complex complex79 = complex66.add(complex78);
        code.src.Complex complex80 = complex63.add(complex79);
        code.src.Complex complex81 = complex45.add(complex80);
        double double82 = complex81.real;
        code.src.Complex complex85 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex88 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex89 = complex85.multiply(complex88);
        code.src.Complex complex90 = complex81.sub(complex88);
        complex90.real = 0.0d;
        code.src.Complex complex93 = complex43.sub(complex90);
        complex43.imaginary = 290.95719905143267d;
        code.src.Complex complex96 = complex2.sub(complex43);
        double double97 = complex96.real;
        double double98 = complex96.real;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 437.56491210010614d + "'", double44 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(10.0,0.0)" + "'", str55, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(10.0,0.0)" + "'", str71, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 582.9143981028653d + "'", double82 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertNotNull(complex96);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + (-288.4361024143587d) + "'", double97 == (-288.4361024143587d));
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + (-288.4361024143587d) + "'", double98 == (-288.4361024143587d));
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 0, (double) ' ');
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        code.src.Complex complex40 = complex2.add(complex38);
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        java.lang.String str48 = complex43.toString();
        code.src.Complex complex51 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex54 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex55 = complex51.multiply(complex54);
        code.src.Complex complex56 = complex43.add(complex55);
        code.src.Complex complex59 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex62 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex63 = complex59.multiply(complex62);
        java.lang.String str64 = complex59.toString();
        code.src.Complex complex67 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex70 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex71 = complex67.multiply(complex70);
        code.src.Complex complex72 = complex59.add(complex71);
        code.src.Complex complex73 = complex56.add(complex72);
        code.src.Complex complex74 = new code.src.Complex();
        code.src.Complex complex75 = complex73.add(complex74);
        code.src.Complex complex76 = complex40.add(complex74);
        complex40.imaginary = (-1);
        code.src.Complex complex81 = new code.src.Complex(10.0d, 875.1298242002123d);
        code.src.Complex complex82 = complex40.sub(complex81);
        java.lang.Class<?> wildcardClass83 = complex81.getClass();
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(10.0,0.0)" + "'", str48, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(10.0,0.0)" + "'", str64, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        code.src.Complex complex2 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex2.imaginary = (short) 0;
        double double5 = complex2.abs();
        double double6 = complex2.real;
        code.src.Complex complex9 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex12 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex13 = complex9.multiply(complex12);
        code.src.Complex complex14 = complex2.multiply(complex9);
        double double15 = complex9.real;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-0.0d) + "'", double6 == (-0.0d));
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        code.src.Complex complex2 = new code.src.Complex(100.0d, (double) (short) 10);
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = new code.src.Complex();
        code.src.Complex complex37 = complex35.add(complex36);
        code.src.Complex complex40 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double41 = complex40.abs();
        double double42 = complex40.real;
        code.src.Complex complex45 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex45.multiply(complex48);
        java.lang.String str50 = complex45.toString();
        code.src.Complex complex53 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex56 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex57 = complex53.multiply(complex56);
        code.src.Complex complex58 = complex45.add(complex57);
        code.src.Complex complex61 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex64 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex65 = complex61.multiply(complex64);
        java.lang.String str66 = complex61.toString();
        code.src.Complex complex69 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex72 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex73 = complex69.multiply(complex72);
        code.src.Complex complex74 = complex61.add(complex73);
        code.src.Complex complex75 = complex58.add(complex74);
        java.lang.String str76 = complex58.toString();
        double double77 = complex58.abs();
        double double78 = complex58.real;
        code.src.Complex complex79 = complex40.sub(complex58);
        code.src.Complex complex80 = complex36.add(complex58);
        code.src.Complex complex81 = complex2.sub(complex80);
        complex80.imaginary = 119.9377093343606d;
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 52.0d + "'", double41 == 52.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 28.09571990514327d + "'", double42 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(10.0,0.0)" + "'", str50, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(10.0,0.0)" + "'", str66, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str76, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 525.4704025737593d + "'", double77 == 525.4704025737593d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 290.95719905143267d + "'", double78 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 0, (double) ' ');
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        code.src.Complex complex40 = complex2.add(complex38);
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        java.lang.String str48 = complex43.toString();
        code.src.Complex complex51 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex54 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex55 = complex51.multiply(complex54);
        code.src.Complex complex56 = complex43.add(complex55);
        code.src.Complex complex59 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex62 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex63 = complex59.multiply(complex62);
        java.lang.String str64 = complex59.toString();
        code.src.Complex complex67 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex70 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex71 = complex67.multiply(complex70);
        code.src.Complex complex72 = complex59.add(complex71);
        code.src.Complex complex73 = complex56.add(complex72);
        code.src.Complex complex74 = new code.src.Complex();
        code.src.Complex complex75 = complex73.add(complex74);
        code.src.Complex complex76 = complex40.add(complex74);
        double double77 = complex40.abs();
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(10.0,0.0)" + "'", str48, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(10.0,0.0)" + "'", str64, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 1077.733215908709d + "'", double77 == 1077.733215908709d);
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        code.src.Complex complex2 = code.src.Complex.polar(525.4704025737593d, (double) '#');
        double double3 = complex2.abs();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 525.4704025737593d + "'", double3 == 525.4704025737593d);
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        code.src.Complex complex2 = code.src.Complex.polar((-317.11773840932915d), (double) (-1.0f));
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        double double40 = complex39.real;
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        code.src.Complex complex48 = complex39.sub(complex46);
        double double49 = complex39.imaginary;
        code.src.Complex complex50 = complex2.sub(complex39);
        complex2.real = 28.09571990514327d;
        java.lang.Class<?> wildcardClass53 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 582.9143981028653d + "'", double40 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 875.1298242002123d + "'", double49 == 875.1298242002123d);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        code.src.Complex complex2 = code.src.Complex.polar((double) 10.0f, 393.80842089009553d);
        code.src.Complex complex5 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex5.imaginary = (short) 0;
        complex5.imaginary = 100.0f;
        code.src.Complex complex12 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str13 = complex12.toString();
        code.src.Complex complex16 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        code.src.Complex complex17 = complex12.sub(complex16);
        code.src.Complex complex18 = complex5.multiply(complex17);
        code.src.Complex complex19 = new code.src.Complex();
        code.src.Complex complex22 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex25 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex26 = complex22.multiply(complex25);
        java.lang.String str27 = complex22.toString();
        code.src.Complex complex30 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex33 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex34 = complex30.multiply(complex33);
        code.src.Complex complex35 = complex22.add(complex34);
        code.src.Complex complex38 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex41 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex42 = complex38.multiply(complex41);
        java.lang.String str43 = complex38.toString();
        code.src.Complex complex46 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex49 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex50 = complex46.multiply(complex49);
        code.src.Complex complex51 = complex38.add(complex50);
        code.src.Complex complex52 = complex35.add(complex51);
        double double53 = complex52.real;
        code.src.Complex complex54 = complex19.multiply(complex52);
        code.src.Complex complex57 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex60 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex61 = complex57.multiply(complex60);
        java.lang.String str62 = complex57.toString();
        code.src.Complex complex65 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex68 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex69 = complex65.multiply(complex68);
        code.src.Complex complex70 = complex57.add(complex69);
        code.src.Complex complex73 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex76 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex77 = complex73.multiply(complex76);
        java.lang.String str78 = complex73.toString();
        code.src.Complex complex81 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex84 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex85 = complex81.multiply(complex84);
        code.src.Complex complex86 = complex73.add(complex85);
        code.src.Complex complex87 = complex70.add(complex86);
        java.lang.String str88 = complex70.toString();
        double double89 = complex70.abs();
        code.src.Complex complex90 = complex19.multiply(complex70);
        code.src.Complex complex91 = complex18.add(complex90);
        complex18.real = (-198.14967628541848d);
        double double94 = complex18.abs();
        code.src.Complex complex95 = complex2.multiply(complex18);
        java.lang.Class<?> wildcardClass96 = complex18.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(100.0,10.0)" + "'", str13, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(10.0,0.0)" + "'", str27, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(10.0,0.0)" + "'", str43, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 581.9143981028653d + "'", double53 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(10.0,0.0)" + "'", str62, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(10.0,0.0)" + "'", str78, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str88, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 525.4704025737593d + "'", double89 == 525.4704025737593d);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 58911.02077697936d + "'", double94 == 58911.02077697936d);
        org.junit.Assert.assertNotNull(complex95);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        code.src.Complex complex2 = new code.src.Complex(0.0d, (double) 1L);
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        code.src.Complex complex2 = new code.src.Complex(8.414709848078965d, 0.0d);
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        code.src.Complex complex2 = code.src.Complex.polar((double) 1L, (double) 100);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.add(complex5);
        code.src.Complex complex9 = new code.src.Complex((double) 100, (double) 10.0f);
        complex9.imaginary = 100L;
        code.src.Complex complex14 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex17 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex18 = complex14.multiply(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex37 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex40 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex41 = complex37.multiply(complex40);
        java.lang.String str42 = complex37.toString();
        code.src.Complex complex45 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex45.multiply(complex48);
        code.src.Complex complex50 = complex37.add(complex49);
        code.src.Complex complex51 = complex34.add(complex50);
        code.src.Complex complex54 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex57 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex58 = complex54.multiply(complex57);
        code.src.Complex complex59 = complex34.sub(complex54);
        code.src.Complex complex60 = complex17.add(complex59);
        code.src.Complex complex61 = complex9.multiply(complex59);
        java.lang.String str62 = complex9.toString();
        code.src.Complex complex63 = complex2.multiply(complex9);
        code.src.Complex complex66 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double67 = complex66.abs();
        java.lang.String str68 = complex66.toString();
        code.src.Complex complex69 = complex9.add(complex66);
        code.src.Complex complex72 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        code.src.Complex complex73 = complex9.sub(complex72);
        java.lang.String str74 = complex73.toString();
        double double75 = complex73.real;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(10.0,0.0)" + "'", str42, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(100.0,100.0)" + "'", str62, "(100.0,100.0)");
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 52.0d + "'", double67 == 52.0d);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str68, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(100.0,100.0)" + "'", str74, "(100.0,100.0)");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 100.0d + "'", double75 == 100.0d);
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        code.src.Complex complex2 = code.src.Complex.polar((double) '#', 280.95719905143267d);
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex38 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex41 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex42 = complex38.multiply(complex41);
        code.src.Complex complex43 = complex18.sub(complex38);
        double double44 = complex43.imaginary;
        code.src.Complex complex45 = new code.src.Complex();
        complex45.real = 1L;
        code.src.Complex complex50 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex53 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex54 = complex50.multiply(complex53);
        java.lang.String str55 = complex50.toString();
        code.src.Complex complex58 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex61 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex62 = complex58.multiply(complex61);
        code.src.Complex complex63 = complex50.add(complex62);
        code.src.Complex complex66 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex69 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex70 = complex66.multiply(complex69);
        java.lang.String str71 = complex66.toString();
        code.src.Complex complex74 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex77 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex78 = complex74.multiply(complex77);
        code.src.Complex complex79 = complex66.add(complex78);
        code.src.Complex complex80 = complex63.add(complex79);
        code.src.Complex complex81 = complex45.add(complex80);
        double double82 = complex81.real;
        code.src.Complex complex85 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex88 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex89 = complex85.multiply(complex88);
        code.src.Complex complex90 = complex81.sub(complex88);
        complex90.real = 0.0d;
        code.src.Complex complex93 = complex43.sub(complex90);
        complex43.imaginary = 290.95719905143267d;
        code.src.Complex complex96 = complex2.sub(complex43);
        double double97 = complex96.imaginary;
        double double98 = complex96.imaginary;
        java.lang.String str99 = complex96.toString();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 437.56491210010614d + "'", double44 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(10.0,0.0)" + "'", str55, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(10.0,0.0)" + "'", str71, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 582.9143981028653d + "'", double82 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertNotNull(complex96);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + (-325.1488062743758d) + "'", double97 == (-325.1488062743758d));
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + (-325.1488062743758d) + "'", double98 == (-325.1488062743758d));
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "(-288.4361024143587,-325.1488062743758)" + "'", str99, "(-288.4361024143587,-325.1488062743758)");
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        code.src.Complex complex9 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex12 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex13 = complex9.multiply(complex12);
        java.lang.String str14 = complex9.toString();
        code.src.Complex complex17 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex20 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex21 = complex17.multiply(complex20);
        code.src.Complex complex22 = complex9.add(complex21);
        code.src.Complex complex25 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex28 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex29 = complex25.multiply(complex28);
        java.lang.String str30 = complex25.toString();
        code.src.Complex complex33 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex36 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex37 = complex33.multiply(complex36);
        code.src.Complex complex38 = complex25.add(complex37);
        code.src.Complex complex39 = complex22.add(complex38);
        code.src.Complex complex42 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex45 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex46 = complex42.multiply(complex45);
        code.src.Complex complex47 = complex22.sub(complex42);
        code.src.Complex complex48 = complex5.add(complex47);
        double double49 = complex48.abs();
        code.src.Complex complex52 = new code.src.Complex(10.0d, (double) 10L);
        code.src.Complex complex55 = code.src.Complex.polar((double) '#', (double) (byte) 100);
        code.src.Complex complex56 = complex52.multiply(complex55);
        code.src.Complex complex57 = complex48.add(complex56);
        code.src.Complex complex60 = code.src.Complex.polar((double) '4', (-1.0d));
        code.src.Complex complex61 = complex56.multiply(complex60);
        double double62 = complex60.imaginary;
        double double63 = complex60.real;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(10.0,0.0)" + "'", str14, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(10.0,0.0)" + "'", str30, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 572.0d + "'", double49 == 572.0d);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + (-43.756491210010616d) + "'", double62 == (-43.756491210010616d));
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 28.09571990514327d + "'", double63 == 28.09571990514327d);
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        double double37 = complex0.imaginary;
        double double38 = complex0.imaginary;
        code.src.Complex complex41 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex44 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex45 = complex41.multiply(complex44);
        java.lang.String str46 = complex41.toString();
        code.src.Complex complex49 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex52 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex53 = complex49.multiply(complex52);
        code.src.Complex complex54 = complex41.add(complex53);
        code.src.Complex complex57 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex60 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex61 = complex57.multiply(complex60);
        java.lang.String str62 = complex57.toString();
        code.src.Complex complex65 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex68 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex69 = complex65.multiply(complex68);
        code.src.Complex complex70 = complex57.add(complex69);
        code.src.Complex complex71 = complex54.add(complex70);
        code.src.Complex complex72 = new code.src.Complex();
        code.src.Complex complex73 = complex71.add(complex72);
        code.src.Complex complex76 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex79 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex80 = complex76.multiply(complex79);
        double double81 = complex79.imaginary;
        java.lang.String str82 = complex79.toString();
        code.src.Complex complex85 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double86 = complex85.abs();
        double double87 = complex85.real;
        code.src.Complex complex88 = complex79.sub(complex85);
        code.src.Complex complex89 = complex72.sub(complex79);
        code.src.Complex complex90 = complex0.add(complex79);
        java.lang.Class<?> wildcardClass91 = complex79.getClass();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(10.0,0.0)" + "'", str46, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(10.0,0.0)" + "'", str62, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 43.756491210010616d + "'", double81 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str82, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 52.0d + "'", double86 == 52.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 28.09571990514327d + "'", double87 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        double double37 = complex36.real;
        java.lang.String str38 = complex36.toString();
        code.src.Complex complex41 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex44 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex45 = complex41.multiply(complex44);
        java.lang.String str46 = complex41.toString();
        code.src.Complex complex49 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex52 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex53 = complex49.multiply(complex52);
        code.src.Complex complex54 = complex41.add(complex53);
        double double55 = complex54.real;
        code.src.Complex complex58 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex61 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex62 = complex58.multiply(complex61);
        double double63 = complex62.imaginary;
        code.src.Complex complex64 = complex54.sub(complex62);
        double double65 = complex54.imaginary;
        code.src.Complex complex66 = complex36.multiply(complex54);
        java.lang.String str67 = complex54.toString();
        complex54.imaginary = (-1L);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 582.9143981028653d + "'", double37 == 582.9143981028653d);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(582.9143981028653,875.1298242002123)" + "'", str38, "(582.9143981028653,875.1298242002123)");
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(10.0,0.0)" + "'", str46, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 290.95719905143267d + "'", double55 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 437.56491210010614d + "'", double63 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 437.56491210010614d + "'", double65 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str67, "(290.95719905143267,437.56491210010614)");
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        code.src.Complex complex2 = code.src.Complex.polar(1136.0754242392372d, 467.07736184459986d);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        java.lang.String str8 = complex2.toString();
        code.src.Complex complex11 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex14 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex15 = complex11.multiply(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        java.lang.String str32 = complex18.toString();
        code.src.Complex complex33 = complex15.add(complex18);
        code.src.Complex complex34 = complex2.sub(complex18);
        double double35 = complex34.real;
        code.src.Complex complex36 = new code.src.Complex();
        complex36.real = 1L;
        code.src.Complex complex41 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex44 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex45 = complex41.multiply(complex44);
        java.lang.String str46 = complex41.toString();
        code.src.Complex complex49 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex52 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex53 = complex49.multiply(complex52);
        code.src.Complex complex54 = complex41.add(complex53);
        code.src.Complex complex57 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex60 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex61 = complex57.multiply(complex60);
        java.lang.String str62 = complex57.toString();
        code.src.Complex complex65 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex68 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex69 = complex65.multiply(complex68);
        code.src.Complex complex70 = complex57.add(complex69);
        code.src.Complex complex71 = complex54.add(complex70);
        code.src.Complex complex72 = complex36.add(complex71);
        double double73 = complex72.real;
        code.src.Complex complex76 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex79 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex80 = complex76.multiply(complex79);
        code.src.Complex complex81 = complex72.sub(complex79);
        code.src.Complex complex84 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex85 = complex79.add(complex84);
        complex84.imaginary = (short) 100;
        code.src.Complex complex88 = complex34.sub(complex84);
        complex34.imaginary = 612077.1638882305d;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(10.0,0.0)" + "'", str8, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(10.0,0.0)" + "'", str32, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(10.0,0.0)" + "'", str46, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(10.0,0.0)" + "'", str62, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 582.9143981028653d + "'", double73 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex88);
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        code.src.Complex complex2 = new code.src.Complex(100.0d, (double) 100);
        code.src.Complex complex5 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex5.imaginary = (short) 0;
        complex5.imaginary = 100.0f;
        code.src.Complex complex12 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex15 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex16 = complex12.multiply(complex15);
        java.lang.String str17 = complex12.toString();
        code.src.Complex complex20 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex23 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex24 = complex20.multiply(complex23);
        code.src.Complex complex25 = complex12.add(complex24);
        code.src.Complex complex28 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex31 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex32 = complex28.multiply(complex31);
        java.lang.String str33 = complex28.toString();
        code.src.Complex complex36 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex39 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex40 = complex36.multiply(complex39);
        code.src.Complex complex41 = complex28.add(complex40);
        code.src.Complex complex42 = complex25.add(complex41);
        java.lang.String str43 = complex25.toString();
        code.src.Complex complex46 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex46.imaginary = (short) 0;
        java.lang.String str49 = complex46.toString();
        code.src.Complex complex50 = complex25.sub(complex46);
        code.src.Complex complex51 = complex5.add(complex50);
        complex51.imaginary = 0;
        complex51.real = 10.0f;
        complex51.imaginary = 481.32140331011675d;
        code.src.Complex complex58 = complex2.multiply(complex51);
        double double59 = complex58.imaginary;
        java.lang.String str60 = complex58.toString();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(10.0,0.0)" + "'", str17, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(10.0,0.0)" + "'", str33, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str43, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(-0.0,0.0)" + "'", str49, "(-0.0,0.0)");
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 49132.14033101167d + "'", double59 == 49132.14033101167d);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(-47132.14033101167,49132.14033101167)" + "'", str60, "(-47132.14033101167,49132.14033101167)");
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        code.src.Complex complex2 = new code.src.Complex(309.0545367982484d, 109.15415943981125d);
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 0, 663.590879631022d);
        double double3 = complex2.real;
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        code.src.Complex complex9 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex12 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex13 = complex9.multiply(complex12);
        java.lang.String str14 = complex9.toString();
        code.src.Complex complex17 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex20 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex21 = complex17.multiply(complex20);
        code.src.Complex complex22 = complex9.add(complex21);
        java.lang.String str23 = complex9.toString();
        code.src.Complex complex24 = complex6.add(complex9);
        code.src.Complex complex27 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex30 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex31 = complex27.multiply(complex30);
        java.lang.String str32 = complex27.toString();
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        code.src.Complex complex40 = complex27.add(complex39);
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        java.lang.String str48 = complex43.toString();
        code.src.Complex complex51 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex54 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex55 = complex51.multiply(complex54);
        code.src.Complex complex56 = complex43.add(complex55);
        code.src.Complex complex57 = complex40.add(complex56);
        code.src.Complex complex58 = new code.src.Complex();
        code.src.Complex complex59 = complex57.add(complex58);
        double double60 = complex57.imaginary;
        double double61 = complex57.abs();
        double double62 = complex57.imaginary;
        code.src.Complex complex65 = new code.src.Complex((double) 1.0f, (double) 10.0f);
        code.src.Complex complex66 = complex57.sub(complex65);
        code.src.Complex complex67 = complex24.multiply(complex65);
        java.lang.Class<?> wildcardClass68 = complex67.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(10.0,0.0)" + "'", str14, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(10.0,0.0)" + "'", str32, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(10.0,0.0)" + "'", str48, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 875.1298242002123d + "'", double60 == 875.1298242002123d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1050.9408051475186d + "'", double61 == 1050.9408051475186d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 875.1298242002123d + "'", double62 == 875.1298242002123d);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        code.src.Complex complex33 = new code.src.Complex();
        code.src.Complex complex34 = complex32.add(complex33);
        code.src.Complex complex37 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex40 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex41 = complex37.multiply(complex40);
        java.lang.String str42 = complex37.toString();
        code.src.Complex complex45 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex45.multiply(complex48);
        code.src.Complex complex50 = complex37.add(complex49);
        code.src.Complex complex53 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex56 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex57 = complex53.multiply(complex56);
        java.lang.String str58 = complex53.toString();
        code.src.Complex complex61 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex64 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex65 = complex61.multiply(complex64);
        code.src.Complex complex66 = complex53.add(complex65);
        code.src.Complex complex67 = complex50.add(complex66);
        code.src.Complex complex68 = new code.src.Complex();
        code.src.Complex complex69 = complex67.add(complex68);
        code.src.Complex complex72 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex75 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex76 = complex72.multiply(complex75);
        double double77 = complex75.imaginary;
        java.lang.String str78 = complex75.toString();
        code.src.Complex complex81 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double82 = complex81.abs();
        double double83 = complex81.real;
        code.src.Complex complex84 = complex75.sub(complex81);
        code.src.Complex complex85 = complex68.sub(complex75);
        code.src.Complex complex86 = complex33.add(complex68);
        double double87 = complex86.abs();
        complex86.imaginary = (short) 10;
        double double90 = complex86.imaginary;
        complex86.real = 907.5648116969368d;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(10.0,0.0)" + "'", str42, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(10.0,0.0)" + "'", str58, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 43.756491210010616d + "'", double77 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str78, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 52.0d + "'", double82 == 52.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 28.09571990514327d + "'", double83 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 10.0d + "'", double90 == 10.0d);
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        code.src.Complex complex2 = new code.src.Complex((-273.44509135195034d), (-0.0d));
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        code.src.Complex complex2 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        double double3 = complex2.abs();
        code.src.Complex complex6 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str7 = complex6.toString();
        code.src.Complex complex8 = complex2.multiply(complex6);
        code.src.Complex complex11 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex14 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex15 = complex11.multiply(complex14);
        double double16 = complex14.imaginary;
        double double17 = complex14.imaginary;
        code.src.Complex complex20 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex23 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex24 = complex20.multiply(complex23);
        code.src.Complex complex27 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex30 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex31 = complex27.multiply(complex30);
        java.lang.String str32 = complex27.toString();
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        code.src.Complex complex40 = complex27.add(complex39);
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        java.lang.String str48 = complex43.toString();
        code.src.Complex complex51 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex54 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex55 = complex51.multiply(complex54);
        code.src.Complex complex56 = complex43.add(complex55);
        code.src.Complex complex57 = complex40.add(complex56);
        code.src.Complex complex60 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex63 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex64 = complex60.multiply(complex63);
        code.src.Complex complex65 = complex40.sub(complex60);
        code.src.Complex complex66 = complex23.add(complex65);
        double double67 = complex66.abs();
        double double68 = complex66.imaginary;
        complex66.imaginary = 1L;
        code.src.Complex complex71 = complex14.sub(complex66);
        double double72 = complex71.real;
        code.src.Complex complex73 = complex2.multiply(complex71);
        double double74 = complex2.real;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(100.0,10.0)" + "'", str7, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 43.756491210010616d + "'", double16 == 43.756491210010616d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 43.756491210010616d + "'", double17 == 43.756491210010616d);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(10.0,0.0)" + "'", str32, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(10.0,0.0)" + "'", str48, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 572.0d + "'", double67 == 572.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 481.32140331011675d + "'", double68 == 481.32140331011675d);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + (-280.95719905143267d) + "'", double72 == (-280.95719905143267d));
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + (-0.0d) + "'", double74 == (-0.0d));
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 0, (double) ' ');
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        code.src.Complex complex40 = complex2.add(complex38);
        double double41 = complex38.imaginary;
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 875.1298242002123d + "'", double41 == 875.1298242002123d);
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        code.src.Complex complex2 = new code.src.Complex((double) 100.0f, (double) 100.0f);
        double double3 = complex2.abs();
        double double4 = complex2.imaginary;
        code.src.Complex complex7 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex10 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex11 = complex7.multiply(complex10);
        java.lang.String str12 = complex7.toString();
        java.lang.String str13 = complex7.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex23 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex26 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex27 = complex23.multiply(complex26);
        java.lang.String str28 = complex23.toString();
        code.src.Complex complex31 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex34 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex35 = complex31.multiply(complex34);
        code.src.Complex complex36 = complex23.add(complex35);
        java.lang.String str37 = complex23.toString();
        code.src.Complex complex38 = complex20.add(complex23);
        code.src.Complex complex39 = complex7.sub(complex23);
        double double40 = complex39.real;
        code.src.Complex complex41 = new code.src.Complex();
        complex41.real = 1L;
        code.src.Complex complex46 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex49 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex50 = complex46.multiply(complex49);
        java.lang.String str51 = complex46.toString();
        code.src.Complex complex54 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex57 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex58 = complex54.multiply(complex57);
        code.src.Complex complex59 = complex46.add(complex58);
        code.src.Complex complex62 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex65 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex66 = complex62.multiply(complex65);
        java.lang.String str67 = complex62.toString();
        code.src.Complex complex70 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex73 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex74 = complex70.multiply(complex73);
        code.src.Complex complex75 = complex62.add(complex74);
        code.src.Complex complex76 = complex59.add(complex75);
        code.src.Complex complex77 = complex41.add(complex76);
        double double78 = complex77.real;
        code.src.Complex complex81 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex84 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex85 = complex81.multiply(complex84);
        code.src.Complex complex86 = complex77.sub(complex84);
        code.src.Complex complex89 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex90 = complex84.add(complex89);
        complex89.imaginary = (short) 100;
        code.src.Complex complex93 = complex39.sub(complex89);
        code.src.Complex complex94 = complex2.multiply(complex89);
        java.lang.String str95 = complex2.toString();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 141.4213562373095d + "'", double3 == 141.4213562373095d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 100.0d + "'", double4 == 100.0d);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(10.0,0.0)" + "'", str12, "(10.0,0.0)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(10.0,0.0)" + "'", str28, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(10.0,0.0)" + "'", str37, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "(10.0,0.0)" + "'", str51, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(10.0,0.0)" + "'", str67, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 582.9143981028653d + "'", double78 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertNotNull(complex94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "(100.0,100.0)" + "'", str95, "(100.0,100.0)");
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        code.src.Complex complex2 = new code.src.Complex(119.9377093343606d, 213613.92147670433d);
        java.lang.Class<?> wildcardClass3 = complex2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        complex6.imaginary = (-438.0712777412159d);
        double double9 = complex6.abs();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 520.4261639086258d + "'", double9 == 520.4261639086258d);
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        double double33 = complex15.real;
        double double34 = complex15.real;
        code.src.Complex complex37 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex40 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex41 = complex37.multiply(complex40);
        java.lang.String str42 = complex37.toString();
        code.src.Complex complex45 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex45.multiply(complex48);
        code.src.Complex complex50 = complex37.add(complex49);
        code.src.Complex complex53 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex56 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex57 = complex53.multiply(complex56);
        java.lang.String str58 = complex53.toString();
        code.src.Complex complex61 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex64 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex65 = complex61.multiply(complex64);
        code.src.Complex complex66 = complex53.add(complex65);
        code.src.Complex complex67 = complex50.add(complex66);
        code.src.Complex complex68 = complex15.sub(complex50);
        double double69 = complex68.imaginary;
        double double70 = complex68.real;
        code.src.Complex complex71 = null;
        // The following exception was thrown during execution in test generation
        try {
            code.src.Complex complex72 = complex68.add(complex71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 290.95719905143267d + "'", double33 == 290.95719905143267d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 290.95719905143267d + "'", double34 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(10.0,0.0)" + "'", str42, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(10.0,0.0)" + "'", str58, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        code.src.Complex complex2 = new code.src.Complex((double) 100.0f, (double) 100.0f);
        code.src.Complex complex5 = code.src.Complex.polar(10.0d, (double) '4');
        code.src.Complex complex6 = complex2.add(complex5);
        complex6.real = 481.32140331011675d;
        code.src.Complex complex11 = new code.src.Complex((double) (short) 0, (double) ' ');
        code.src.Complex complex12 = new code.src.Complex();
        complex12.real = 1L;
        code.src.Complex complex17 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex20 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex21 = complex17.multiply(complex20);
        java.lang.String str22 = complex17.toString();
        code.src.Complex complex25 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex28 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex29 = complex25.multiply(complex28);
        code.src.Complex complex30 = complex17.add(complex29);
        code.src.Complex complex33 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex36 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex37 = complex33.multiply(complex36);
        java.lang.String str38 = complex33.toString();
        code.src.Complex complex41 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex44 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex45 = complex41.multiply(complex44);
        code.src.Complex complex46 = complex33.add(complex45);
        code.src.Complex complex47 = complex30.add(complex46);
        code.src.Complex complex48 = complex12.add(complex47);
        code.src.Complex complex49 = complex11.add(complex47);
        code.src.Complex complex52 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex55 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex56 = complex52.multiply(complex55);
        java.lang.String str57 = complex52.toString();
        code.src.Complex complex60 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex63 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex64 = complex60.multiply(complex63);
        code.src.Complex complex65 = complex52.add(complex64);
        code.src.Complex complex68 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex71 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex72 = complex68.multiply(complex71);
        java.lang.String str73 = complex68.toString();
        code.src.Complex complex76 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex79 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex80 = complex76.multiply(complex79);
        code.src.Complex complex81 = complex68.add(complex80);
        code.src.Complex complex82 = complex65.add(complex81);
        code.src.Complex complex83 = new code.src.Complex();
        code.src.Complex complex84 = complex82.add(complex83);
        code.src.Complex complex85 = complex49.add(complex83);
        double double86 = complex85.imaginary;
        code.src.Complex complex87 = complex6.sub(complex85);
        code.src.Complex complex90 = new code.src.Complex((double) (short) 1, 290.95719905143267d);
        double double91 = complex90.imaginary;
        code.src.Complex complex92 = complex6.add(complex90);
        code.src.Complex complex93 = null;
        // The following exception was thrown during execution in test generation
        try {
            code.src.Complex complex94 = complex92.add(complex93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(10.0,0.0)" + "'", str22, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(10.0,0.0)" + "'", str38, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(10.0,0.0)" + "'", str57, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(10.0,0.0)" + "'", str73, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 907.1298242002123d + "'", double86 == 907.1298242002123d);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 290.95719905143267d + "'", double91 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex92);
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex10.real = 10;
        code.src.Complex complex13 = complex2.multiply(complex10);
        java.lang.String str14 = complex10.toString();
        code.src.Complex complex17 = new code.src.Complex((double) 100, (double) 10.0f);
        complex17.imaginary = 100L;
        code.src.Complex complex22 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex25 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex26 = complex22.multiply(complex25);
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        java.lang.String str34 = complex29.toString();
        code.src.Complex complex37 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex40 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex41 = complex37.multiply(complex40);
        code.src.Complex complex42 = complex29.add(complex41);
        code.src.Complex complex45 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex45.multiply(complex48);
        java.lang.String str50 = complex45.toString();
        code.src.Complex complex53 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex56 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex57 = complex53.multiply(complex56);
        code.src.Complex complex58 = complex45.add(complex57);
        code.src.Complex complex59 = complex42.add(complex58);
        code.src.Complex complex62 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex65 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex66 = complex62.multiply(complex65);
        code.src.Complex complex67 = complex42.sub(complex62);
        code.src.Complex complex68 = complex25.add(complex67);
        code.src.Complex complex69 = complex17.multiply(complex67);
        double double70 = complex17.real;
        code.src.Complex complex73 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        double double74 = complex73.imaginary;
        code.src.Complex complex75 = complex17.add(complex73);
        code.src.Complex complex76 = complex10.multiply(complex75);
        double double77 = complex76.real;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(10.0,0.0)" + "'", str14, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(10.0,0.0)" + "'", str34, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(10.0,0.0)" + "'", str50, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 100.0d + "'", double70 == 100.0d);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + (-317.11773840932915d) + "'", double74 == (-317.11773840932915d));
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + (-3891.0687533685114d) + "'", double77 == (-3891.0687533685114d));
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        code.src.Complex complex2 = code.src.Complex.polar(0.0d, (-54.40211108893698d));
        double double3 = complex2.real;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-0.0d) + "'", double3 == (-0.0d));
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 10, (-317.11773840932915d));
        code.src.Complex complex5 = code.src.Complex.polar(28.09571990514327d, (double) 0);
        code.src.Complex complex6 = new code.src.Complex();
        complex6.real = 1L;
        code.src.Complex complex11 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex14 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex15 = complex11.multiply(complex14);
        java.lang.String str16 = complex11.toString();
        code.src.Complex complex19 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex22 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex23 = complex19.multiply(complex22);
        code.src.Complex complex24 = complex11.add(complex23);
        code.src.Complex complex27 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex30 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex31 = complex27.multiply(complex30);
        java.lang.String str32 = complex27.toString();
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        code.src.Complex complex40 = complex27.add(complex39);
        code.src.Complex complex41 = complex24.add(complex40);
        code.src.Complex complex42 = complex6.add(complex41);
        double double43 = complex42.real;
        code.src.Complex complex44 = complex5.add(complex42);
        code.src.Complex complex45 = complex2.multiply(complex44);
        double double46 = complex2.imaginary;
        code.src.Complex complex49 = code.src.Complex.polar((-317.11773840932915d), (double) (-1.0f));
        code.src.Complex complex50 = complex2.add(complex49);
        complex50.imaginary = 998.947820022602d;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(10.0,0.0)" + "'", str16, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(10.0,0.0)" + "'", str32, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 582.9143981028653d + "'", double43 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-317.11773840932915d) + "'", double46 == (-317.11773840932915d));
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        double double37 = complex36.real;
        code.src.Complex complex40 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex43 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex44 = complex40.multiply(complex43);
        code.src.Complex complex45 = complex36.sub(complex43);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex43.add(complex48);
        code.src.Complex complex52 = new code.src.Complex((double) 10L, (double) '#');
        code.src.Complex complex53 = complex48.add(complex52);
        code.src.Complex complex56 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex56.imaginary = (short) 0;
        complex56.imaginary = 100.0f;
        code.src.Complex complex61 = complex48.multiply(complex56);
        double double62 = complex61.imaginary;
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 582.9143981028653d + "'", double37 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 2809.571990514327d + "'", double62 == 2809.571990514327d);
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        code.src.Complex complex0 = new code.src.Complex();
        code.src.Complex complex3 = new code.src.Complex((double) (byte) 0, (double) 100L);
        code.src.Complex complex6 = code.src.Complex.polar((double) (short) -1, (double) (byte) 0);
        code.src.Complex complex9 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex12 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex13 = complex9.multiply(complex12);
        java.lang.String str14 = complex9.toString();
        code.src.Complex complex17 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex20 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex21 = complex17.multiply(complex20);
        code.src.Complex complex22 = complex9.add(complex21);
        code.src.Complex complex25 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex28 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex29 = complex25.multiply(complex28);
        java.lang.String str30 = complex25.toString();
        code.src.Complex complex33 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex36 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex37 = complex33.multiply(complex36);
        code.src.Complex complex38 = complex25.add(complex37);
        code.src.Complex complex39 = complex22.add(complex38);
        double double40 = complex22.real;
        double double41 = complex22.real;
        code.src.Complex complex44 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex47 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex48 = complex44.multiply(complex47);
        java.lang.String str49 = complex44.toString();
        code.src.Complex complex52 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex55 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex56 = complex52.multiply(complex55);
        code.src.Complex complex57 = complex44.add(complex56);
        code.src.Complex complex60 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex63 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex64 = complex60.multiply(complex63);
        java.lang.String str65 = complex60.toString();
        code.src.Complex complex68 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex71 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex72 = complex68.multiply(complex71);
        code.src.Complex complex73 = complex60.add(complex72);
        code.src.Complex complex74 = complex57.add(complex73);
        code.src.Complex complex75 = complex22.sub(complex57);
        double double76 = complex57.imaginary;
        code.src.Complex complex77 = complex6.add(complex57);
        double double78 = complex6.imaginary;
        code.src.Complex complex81 = new code.src.Complex((double) (short) 0, (double) ' ');
        code.src.Complex complex84 = new code.src.Complex((double) 10L, (double) '#');
        double double85 = complex84.imaginary;
        code.src.Complex complex86 = complex81.multiply(complex84);
        code.src.Complex complex89 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex92 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex93 = complex89.multiply(complex92);
        double double94 = complex93.imaginary;
        code.src.Complex complex95 = complex86.multiply(complex93);
        code.src.Complex complex96 = complex6.multiply(complex86);
        code.src.Complex complex97 = complex3.sub(complex96);
        code.src.Complex complex98 = complex0.sub(complex96);
        java.lang.Class<?> wildcardClass99 = complex96.getClass();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(10.0,0.0)" + "'", str14, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(10.0,0.0)" + "'", str30, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 290.95719905143267d + "'", double40 == 290.95719905143267d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 290.95719905143267d + "'", double41 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(10.0,0.0)" + "'", str49, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(10.0,0.0)" + "'", str65, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 437.56491210010614d + "'", double76 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + (-0.0d) + "'", double78 == (-0.0d));
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 35.0d + "'", double85 == 35.0d);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 437.56491210010614d + "'", double94 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex95);
        org.junit.Assert.assertNotNull(complex96);
        org.junit.Assert.assertNotNull(complex97);
        org.junit.Assert.assertNotNull(complex98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        code.src.Complex complex33 = new code.src.Complex();
        code.src.Complex complex34 = complex32.add(complex33);
        complex32.real = 10;
        code.src.Complex complex39 = new code.src.Complex(28.09571990514327d, 907.1298242002123d);
        code.src.Complex complex42 = code.src.Complex.polar((double) (byte) 10, (double) (short) 0);
        code.src.Complex complex43 = complex39.multiply(complex42);
        code.src.Complex complex44 = complex32.multiply(complex43);
        double double45 = complex43.real;
        code.src.Complex complex48 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex51 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex52 = complex48.multiply(complex51);
        java.lang.String str53 = complex48.toString();
        code.src.Complex complex56 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex56.real = 10;
        code.src.Complex complex59 = complex48.multiply(complex56);
        code.src.Complex complex62 = new code.src.Complex(100.0d, (double) 100);
        code.src.Complex complex63 = complex56.add(complex62);
        double double64 = complex63.abs();
        code.src.Complex complex65 = complex43.add(complex63);
        complex65.real = 2809.571990514327d;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 280.95719905143267d + "'", double45 == 280.95719905143267d);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(10.0,0.0)" + "'", str53, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 148.66068747318505d + "'", double64 == 148.66068747318505d);
        org.junit.Assert.assertNotNull(complex65);
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        code.src.Complex complex2 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        complex2.real = 582.9143981028653d;
        code.src.Complex complex7 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str8 = complex7.toString();
        code.src.Complex complex11 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        code.src.Complex complex12 = complex7.sub(complex11);
        code.src.Complex complex13 = complex2.sub(complex11);
        double double14 = complex2.imaginary;
        double double15 = complex2.imaginary;
        code.src.Complex complex16 = null;
        // The following exception was thrown during execution in test generation
        try {
            code.src.Complex complex17 = complex2.add(complex16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(100.0,10.0)" + "'", str8, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 43.756491210010616d + "'", double14 == 43.756491210010616d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 43.756491210010616d + "'", double15 == 43.756491210010616d);
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        complex2.imaginary = 100L;
        code.src.Complex complex7 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex10 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex11 = complex7.multiply(complex10);
        code.src.Complex complex14 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex17 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex18 = complex14.multiply(complex17);
        java.lang.String str19 = complex14.toString();
        code.src.Complex complex22 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex25 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex26 = complex22.multiply(complex25);
        code.src.Complex complex27 = complex14.add(complex26);
        code.src.Complex complex30 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex33 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex34 = complex30.multiply(complex33);
        java.lang.String str35 = complex30.toString();
        code.src.Complex complex38 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex41 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex42 = complex38.multiply(complex41);
        code.src.Complex complex43 = complex30.add(complex42);
        code.src.Complex complex44 = complex27.add(complex43);
        code.src.Complex complex47 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex50 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex51 = complex47.multiply(complex50);
        code.src.Complex complex52 = complex27.sub(complex47);
        code.src.Complex complex53 = complex10.add(complex52);
        code.src.Complex complex54 = complex2.multiply(complex52);
        double double55 = complex2.real;
        double double56 = complex2.abs();
        double double57 = complex2.imaginary;
        java.lang.Class<?> wildcardClass58 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(10.0,0.0)" + "'", str19, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(10.0,0.0)" + "'", str35, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 100.0d + "'", double55 == 100.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 141.4213562373095d + "'", double56 == 141.4213562373095d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 100.0d + "'", double57 == 100.0d);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        code.src.Complex complex2 = code.src.Complex.polar(663.590879631022d, 35.014282800023196d);
        complex2.real = 994.0878718290595d;
        complex2.real = 0.0d;
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        code.src.Complex complex2 = code.src.Complex.polar((-317.11773840932915d), (double) (-1.0f));
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        double double40 = complex39.real;
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        code.src.Complex complex48 = complex39.sub(complex46);
        double double49 = complex39.imaginary;
        code.src.Complex complex50 = complex2.sub(complex39);
        code.src.Complex complex53 = new code.src.Complex(290.95719905143267d, (-213613.9212426372d));
        code.src.Complex complex54 = complex39.sub(complex53);
        complex39.real = (byte) -1;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 582.9143981028653d + "'", double40 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 875.1298242002123d + "'", double49 == 875.1298242002123d);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex54);
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        code.src.Complex complex2 = code.src.Complex.polar(1077.733215908709d, 291.95719905143267d);
        code.src.Complex complex5 = new code.src.Complex((double) 1.0f, (double) 10.0f);
        code.src.Complex complex6 = complex2.add(complex5);
        code.src.Complex complex9 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex12 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex13 = complex9.multiply(complex12);
        java.lang.String str14 = complex9.toString();
        code.src.Complex complex17 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex20 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex21 = complex17.multiply(complex20);
        code.src.Complex complex22 = complex9.add(complex21);
        code.src.Complex complex25 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex28 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex29 = complex25.multiply(complex28);
        java.lang.String str30 = complex25.toString();
        code.src.Complex complex33 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex36 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex37 = complex33.multiply(complex36);
        code.src.Complex complex38 = complex25.add(complex37);
        code.src.Complex complex39 = complex22.add(complex38);
        code.src.Complex complex40 = new code.src.Complex();
        code.src.Complex complex41 = complex39.add(complex40);
        complex39.real = 10;
        code.src.Complex complex44 = complex2.sub(complex39);
        double double45 = complex44.abs();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(10.0,0.0)" + "'", str14, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(10.0,0.0)" + "'", str30, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1246.4447622874072d + "'", double45 == 1246.4447622874072d);
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        code.src.Complex complex2 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex2.imaginary = (short) 0;
        complex2.imaginary = 100.0f;
        code.src.Complex complex9 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str10 = complex9.toString();
        code.src.Complex complex13 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        code.src.Complex complex14 = complex9.sub(complex13);
        code.src.Complex complex15 = complex2.multiply(complex14);
        code.src.Complex complex16 = new code.src.Complex();
        code.src.Complex complex19 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex22 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex23 = complex19.multiply(complex22);
        java.lang.String str24 = complex19.toString();
        code.src.Complex complex27 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex30 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex31 = complex27.multiply(complex30);
        code.src.Complex complex32 = complex19.add(complex31);
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        java.lang.String str40 = complex35.toString();
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        code.src.Complex complex48 = complex35.add(complex47);
        code.src.Complex complex49 = complex32.add(complex48);
        double double50 = complex49.real;
        code.src.Complex complex51 = complex16.multiply(complex49);
        code.src.Complex complex54 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex57 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex58 = complex54.multiply(complex57);
        java.lang.String str59 = complex54.toString();
        code.src.Complex complex62 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex65 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex66 = complex62.multiply(complex65);
        code.src.Complex complex67 = complex54.add(complex66);
        code.src.Complex complex70 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex73 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex74 = complex70.multiply(complex73);
        java.lang.String str75 = complex70.toString();
        code.src.Complex complex78 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex81 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex82 = complex78.multiply(complex81);
        code.src.Complex complex83 = complex70.add(complex82);
        code.src.Complex complex84 = complex67.add(complex83);
        java.lang.String str85 = complex67.toString();
        double double86 = complex67.abs();
        code.src.Complex complex87 = complex16.multiply(complex67);
        code.src.Complex complex88 = complex15.add(complex87);
        complex15.real = (-198.14967628541848d);
        double double91 = complex15.abs();
        code.src.Complex complex94 = code.src.Complex.polar(0.0d, (double) (short) -1);
        java.lang.String str95 = complex94.toString();
        code.src.Complex complex96 = complex15.multiply(complex94);
        double double97 = complex15.abs();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(100.0,10.0)" + "'", str10, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(10.0,0.0)" + "'", str24, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(10.0,0.0)" + "'", str40, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 581.9143981028653d + "'", double50 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(10.0,0.0)" + "'", str59, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(10.0,0.0)" + "'", str75, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str85, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 525.4704025737593d + "'", double86 == 525.4704025737593d);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 58911.02077697936d + "'", double91 == 58911.02077697936d);
        org.junit.Assert.assertNotNull(complex94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "(0.0,-0.0)" + "'", str95, "(0.0,-0.0)");
        org.junit.Assert.assertNotNull(complex96);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 58911.02077697936d + "'", double97 == 58911.02077697936d);
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex2.add(complex18);
        code.src.Complex complex39 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex39.imaginary = (short) 0;
        complex39.imaginary = 100.0f;
        code.src.Complex complex46 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str47 = complex46.toString();
        code.src.Complex complex50 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        code.src.Complex complex51 = complex46.sub(complex50);
        code.src.Complex complex52 = complex39.multiply(complex51);
        java.lang.String str53 = complex51.toString();
        code.src.Complex complex54 = complex2.sub(complex51);
        double double55 = complex2.real;
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(100.0,10.0)" + "'", str47, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(589.1068753368511,327.11773840932915)" + "'", str53, "(589.1068753368511,327.11773840932915)");
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 10.0d + "'", double55 == 10.0d);
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        code.src.Complex complex2 = new code.src.Complex(43.756491210010616d, 0.0d);
        code.src.Complex complex5 = new code.src.Complex(10.0d, (-906.2883532154044d));
        code.src.Complex complex6 = complex2.add(complex5);
        complex6.real = 0.0d;
        code.src.Complex complex11 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex11.imaginary = (short) 0;
        complex11.imaginary = 100.0f;
        code.src.Complex complex18 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str19 = complex18.toString();
        code.src.Complex complex22 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        code.src.Complex complex23 = complex18.sub(complex22);
        code.src.Complex complex24 = complex11.multiply(complex23);
        java.lang.String str25 = complex23.toString();
        double double26 = complex23.real;
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        java.lang.String str34 = complex29.toString();
        code.src.Complex complex37 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex40 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex41 = complex37.multiply(complex40);
        code.src.Complex complex42 = complex29.add(complex41);
        code.src.Complex complex45 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex45.multiply(complex48);
        java.lang.String str50 = complex45.toString();
        code.src.Complex complex53 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex56 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex57 = complex53.multiply(complex56);
        code.src.Complex complex58 = complex45.add(complex57);
        code.src.Complex complex59 = complex42.add(complex58);
        code.src.Complex complex62 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex65 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex66 = complex62.multiply(complex65);
        code.src.Complex complex67 = complex42.sub(complex62);
        double double68 = complex42.abs();
        code.src.Complex complex69 = complex23.multiply(complex42);
        code.src.Complex complex70 = complex6.add(complex42);
        java.lang.String str71 = complex70.toString();
        complex70.real = (-5.063656411097588d);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(100.0,10.0)" + "'", str19, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(589.1068753368511,327.11773840932915)" + "'", str25, "(589.1068753368511,327.11773840932915)");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 589.1068753368511d + "'", double26 == 589.1068753368511d);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(10.0,0.0)" + "'", str34, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(10.0,0.0)" + "'", str50, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 525.4704025737593d + "'", double68 == 525.4704025737593d);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(290.95719905143267,-468.7234411152983)" + "'", str71, "(290.95719905143267,-468.7234411152983)");
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex2.add(complex18);
        code.src.Complex complex39 = code.src.Complex.polar((double) 100.0f, (double) 10.0f);
        double double40 = complex39.imaginary;
        double double41 = complex39.imaginary;
        code.src.Complex complex42 = complex18.sub(complex39);
        double double43 = complex18.abs();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + (-54.40211108893698d) + "'", double40 == (-54.40211108893698d));
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + (-54.40211108893698d) + "'", double41 == (-54.40211108893698d));
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 525.4704025737593d + "'", double43 == 525.4704025737593d);
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        code.src.Complex complex2 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex2.real = 10;
        double double5 = complex2.imaginary;
        java.lang.Class<?> wildcardClass6 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        code.src.Complex complex9 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex12 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex13 = complex9.multiply(complex12);
        java.lang.String str14 = complex9.toString();
        code.src.Complex complex17 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex20 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex21 = complex17.multiply(complex20);
        code.src.Complex complex22 = complex9.add(complex21);
        code.src.Complex complex25 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex28 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex29 = complex25.multiply(complex28);
        java.lang.String str30 = complex25.toString();
        code.src.Complex complex33 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex36 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex37 = complex33.multiply(complex36);
        code.src.Complex complex38 = complex25.add(complex37);
        code.src.Complex complex39 = complex22.add(complex38);
        code.src.Complex complex42 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex45 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex46 = complex42.multiply(complex45);
        code.src.Complex complex47 = complex22.sub(complex42);
        code.src.Complex complex48 = complex5.add(complex47);
        double double49 = complex48.abs();
        double double50 = complex48.imaginary;
        complex48.real = (short) -1;
        java.lang.String str53 = complex48.toString();
        complex48.imaginary = 109.15415943981125d;
        code.src.Complex complex58 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex61 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex62 = complex58.multiply(complex61);
        double double63 = complex61.imaginary;
        java.lang.String str64 = complex61.toString();
        code.src.Complex complex67 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double68 = complex67.abs();
        double double69 = complex67.real;
        code.src.Complex complex70 = complex61.sub(complex67);
        double double71 = complex70.real;
        code.src.Complex complex72 = complex48.add(complex70);
        double double73 = complex48.abs();
        complex48.imaginary = 335.9759148588362d;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(10.0,0.0)" + "'", str14, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(10.0,0.0)" + "'", str30, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 572.0d + "'", double49 == 572.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 481.32140331011675d + "'", double50 == 481.32140331011675d);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(-1.0,481.32140331011675)" + "'", str53, "(-1.0,481.32140331011675)");
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 43.756491210010616d + "'", double63 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str64, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 52.0d + "'", double68 == 52.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 28.09571990514327d + "'", double69 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 109.15874002118079d + "'", double73 == 109.15874002118079d);
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        code.src.Complex complex2 = code.src.Complex.polar((-317.11773840932915d), (double) (-1.0f));
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        double double40 = complex39.real;
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        code.src.Complex complex48 = complex39.sub(complex46);
        double double49 = complex39.imaginary;
        code.src.Complex complex50 = complex2.sub(complex39);
        code.src.Complex complex53 = new code.src.Complex((double) (short) 0, (double) ' ');
        code.src.Complex complex54 = new code.src.Complex();
        complex54.real = 1L;
        code.src.Complex complex59 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex62 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex63 = complex59.multiply(complex62);
        java.lang.String str64 = complex59.toString();
        code.src.Complex complex67 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex70 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex71 = complex67.multiply(complex70);
        code.src.Complex complex72 = complex59.add(complex71);
        code.src.Complex complex75 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex78 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex79 = complex75.multiply(complex78);
        java.lang.String str80 = complex75.toString();
        code.src.Complex complex83 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex86 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex87 = complex83.multiply(complex86);
        code.src.Complex complex88 = complex75.add(complex87);
        code.src.Complex complex89 = complex72.add(complex88);
        code.src.Complex complex90 = complex54.add(complex89);
        code.src.Complex complex91 = complex53.add(complex89);
        code.src.Complex complex92 = complex2.multiply(complex89);
        double double93 = complex92.real;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 582.9143981028653d + "'", double40 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 875.1298242002123d + "'", double49 == 875.1298242002123d);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(10.0,0.0)" + "'", str64, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "(10.0,0.0)" + "'", str80, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + (-333229.2368515873d) + "'", double93 == (-333229.2368515873d));
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        java.lang.String str33 = complex15.toString();
        code.src.Complex complex36 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex36.imaginary = (short) 0;
        java.lang.String str39 = complex36.toString();
        code.src.Complex complex40 = complex15.sub(complex36);
        java.lang.String str41 = complex15.toString();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str33, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(-0.0,0.0)" + "'", str39, "(-0.0,0.0)");
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str41, "(290.95719905143267,437.56491210010614)");
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        code.src.Complex complex40 = complex15.sub(complex35);
        complex35.imaginary = 52.0d;
        complex35.imaginary = 290.9589175121722d;
        double double45 = complex35.abs();
        code.src.Complex complex46 = new code.src.Complex();
        complex46.real = 1L;
        double double49 = complex46.abs();
        code.src.Complex complex50 = complex35.add(complex46);
        complex50.imaginary = 572.0d;
        java.lang.Class<?> wildcardClass53 = complex50.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 291.13071236105446d + "'", double45 == 291.13071236105446d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        code.src.Complex complex2 = code.src.Complex.polar(0.0d, 280.95719905143267d);
        complex2.real = (-288.4361024143587d);
        double double5 = complex2.imaginary;
        java.lang.Class<?> wildcardClass6 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-0.0d) + "'", double5 == (-0.0d));
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 0, (double) ' ');
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        code.src.Complex complex40 = complex2.add(complex38);
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        double double48 = complex46.imaginary;
        java.lang.String str49 = complex46.toString();
        code.src.Complex complex52 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double53 = complex52.abs();
        double double54 = complex52.real;
        code.src.Complex complex55 = complex46.sub(complex52);
        code.src.Complex complex56 = complex38.sub(complex46);
        code.src.Complex complex57 = new code.src.Complex();
        complex57.real = 1L;
        code.src.Complex complex62 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex65 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex66 = complex62.multiply(complex65);
        java.lang.String str67 = complex62.toString();
        code.src.Complex complex70 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex73 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex74 = complex70.multiply(complex73);
        code.src.Complex complex75 = complex62.add(complex74);
        code.src.Complex complex78 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex81 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex82 = complex78.multiply(complex81);
        java.lang.String str83 = complex78.toString();
        code.src.Complex complex86 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex89 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex90 = complex86.multiply(complex89);
        code.src.Complex complex91 = complex78.add(complex90);
        code.src.Complex complex92 = complex75.add(complex91);
        code.src.Complex complex93 = complex57.add(complex92);
        double double94 = complex57.imaginary;
        code.src.Complex complex95 = complex56.add(complex57);
        double double96 = complex56.abs();
        java.lang.Class<?> wildcardClass97 = complex56.getClass();
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 43.756491210010616d + "'", double48 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str49, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 52.0d + "'", double53 == 52.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 28.09571990514327d + "'", double54 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(10.0,0.0)" + "'", str67, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(10.0,0.0)" + "'", str83, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
        org.junit.Assert.assertNotNull(complex95);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 998.947820022602d + "'", double96 == 998.947820022602d);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        code.src.Complex complex2 = code.src.Complex.polar((-317.11773840932915d), 445.65251212240173d);
        code.src.Complex complex5 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        double double6 = complex5.abs();
        code.src.Complex complex9 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str10 = complex9.toString();
        code.src.Complex complex11 = complex5.multiply(complex9);
        double double12 = complex9.real;
        complex9.imaginary = (-198.14967628541848d);
        code.src.Complex complex17 = code.src.Complex.polar((-489.10687533685115d), 520.0d);
        code.src.Complex complex20 = new code.src.Complex(1.0d, 28.09571990514327d);
        code.src.Complex complex21 = complex17.add(complex20);
        code.src.Complex complex22 = complex9.sub(complex20);
        code.src.Complex complex23 = complex2.multiply(complex22);
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        java.lang.String str31 = complex26.toString();
        code.src.Complex complex34 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex34.real = 10;
        code.src.Complex complex37 = complex26.multiply(complex34);
        complex37.imaginary = 280.95719905143267d;
        code.src.Complex complex40 = complex2.add(complex37);
        java.lang.String str41 = complex37.toString();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(100.0,10.0)" + "'", str10, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(10.0,0.0)" + "'", str31, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(100.0,280.95719905143267)" + "'", str41, "(100.0,280.95719905143267)");
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        code.src.Complex complex2 = new code.src.Complex(589.1068753368511d, 481.32140331011675d);
        complex2.imaginary = 112.71202242884297d;
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        complex2.imaginary = 100L;
        code.src.Complex complex7 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex10 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex11 = complex7.multiply(complex10);
        code.src.Complex complex14 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex17 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex18 = complex14.multiply(complex17);
        java.lang.String str19 = complex14.toString();
        code.src.Complex complex22 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex25 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex26 = complex22.multiply(complex25);
        code.src.Complex complex27 = complex14.add(complex26);
        code.src.Complex complex30 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex33 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex34 = complex30.multiply(complex33);
        java.lang.String str35 = complex30.toString();
        code.src.Complex complex38 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex41 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex42 = complex38.multiply(complex41);
        code.src.Complex complex43 = complex30.add(complex42);
        code.src.Complex complex44 = complex27.add(complex43);
        code.src.Complex complex47 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex50 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex51 = complex47.multiply(complex50);
        code.src.Complex complex52 = complex27.sub(complex47);
        code.src.Complex complex53 = complex10.add(complex52);
        code.src.Complex complex54 = complex2.multiply(complex52);
        double double55 = complex2.real;
        code.src.Complex complex58 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        double double59 = complex58.imaginary;
        code.src.Complex complex60 = complex2.add(complex58);
        double double61 = complex60.real;
        code.src.Complex complex64 = code.src.Complex.polar(663.590879631022d, (double) ' ');
        code.src.Complex complex65 = complex60.sub(complex64);
        code.src.Complex complex68 = new code.src.Complex((double) 100, (double) 10.0f);
        complex68.imaginary = '4';
        double double71 = complex68.real;
        code.src.Complex complex72 = complex60.add(complex68);
        double double73 = complex60.imaginary;
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(10.0,0.0)" + "'", str19, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(10.0,0.0)" + "'", str35, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 100.0d + "'", double55 == 100.0d);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + (-317.11773840932915d) + "'", double59 == (-317.11773840932915d));
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + (-389.10687533685115d) + "'", double61 == (-389.10687533685115d));
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 100.0d + "'", double71 == 100.0d);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + (-217.11773840932915d) + "'", double73 == (-217.11773840932915d));
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        code.src.Complex complex0 = new code.src.Complex();
        code.src.Complex complex3 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex6 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex7 = complex3.multiply(complex6);
        java.lang.String str8 = complex3.toString();
        code.src.Complex complex11 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex14 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex15 = complex11.multiply(complex14);
        code.src.Complex complex16 = complex3.add(complex15);
        code.src.Complex complex19 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex22 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex23 = complex19.multiply(complex22);
        java.lang.String str24 = complex19.toString();
        code.src.Complex complex27 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex30 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex31 = complex27.multiply(complex30);
        code.src.Complex complex32 = complex19.add(complex31);
        code.src.Complex complex33 = complex16.add(complex32);
        double double34 = complex33.real;
        code.src.Complex complex35 = complex0.multiply(complex33);
        code.src.Complex complex36 = new code.src.Complex();
        complex36.real = 1L;
        code.src.Complex complex41 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex44 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex45 = complex41.multiply(complex44);
        java.lang.String str46 = complex41.toString();
        code.src.Complex complex49 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex52 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex53 = complex49.multiply(complex52);
        code.src.Complex complex54 = complex41.add(complex53);
        code.src.Complex complex57 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex60 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex61 = complex57.multiply(complex60);
        java.lang.String str62 = complex57.toString();
        code.src.Complex complex65 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex68 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex69 = complex65.multiply(complex68);
        code.src.Complex complex70 = complex57.add(complex69);
        code.src.Complex complex71 = complex54.add(complex70);
        code.src.Complex complex72 = complex36.add(complex71);
        double double73 = complex72.real;
        code.src.Complex complex76 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex79 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex80 = complex76.multiply(complex79);
        code.src.Complex complex81 = complex72.sub(complex79);
        code.src.Complex complex84 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex85 = complex79.add(complex84);
        code.src.Complex complex88 = new code.src.Complex((double) 10L, (double) '#');
        code.src.Complex complex89 = complex84.add(complex88);
        code.src.Complex complex90 = complex33.multiply(complex89);
        complex33.real = (-1.0f);
        java.lang.Class<?> wildcardClass93 = complex33.getClass();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(10.0,0.0)" + "'", str8, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(10.0,0.0)" + "'", str24, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 581.9143981028653d + "'", double34 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(10.0,0.0)" + "'", str46, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(10.0,0.0)" + "'", str62, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 582.9143981028653d + "'", double73 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        double double37 = complex36.real;
        java.lang.String str38 = complex36.toString();
        code.src.Complex complex41 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex44 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex45 = complex41.multiply(complex44);
        java.lang.String str46 = complex41.toString();
        code.src.Complex complex49 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex52 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex53 = complex49.multiply(complex52);
        code.src.Complex complex54 = complex41.add(complex53);
        double double55 = complex54.real;
        code.src.Complex complex58 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex61 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex62 = complex58.multiply(complex61);
        double double63 = complex62.imaginary;
        code.src.Complex complex64 = complex54.sub(complex62);
        double double65 = complex54.imaginary;
        code.src.Complex complex66 = complex36.multiply(complex54);
        java.lang.String str67 = complex36.toString();
        code.src.Complex complex70 = code.src.Complex.polar((double) 100.0f, (double) 10.0f);
        code.src.Complex complex71 = complex36.multiply(complex70);
        double double72 = complex36.imaginary;
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 582.9143981028653d + "'", double37 == 582.9143981028653d);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(582.9143981028653,875.1298242002123)" + "'", str38, "(582.9143981028653,875.1298242002123)");
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(10.0,0.0)" + "'", str46, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 290.95719905143267d + "'", double55 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 437.56491210010614d + "'", double63 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 437.56491210010614d + "'", double65 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(582.9143981028653,875.1298242002123)" + "'", str67, "(582.9143981028653,875.1298242002123)");
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 875.1298242002123d + "'", double72 == 875.1298242002123d);
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0892");
        code.src.Complex complex2 = new code.src.Complex(816.5801168455955d, (-293.29939121762186d));
        java.lang.Class<?> wildcardClass3 = complex2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        code.src.Complex complex9 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex12 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex13 = complex9.multiply(complex12);
        java.lang.String str14 = complex9.toString();
        code.src.Complex complex17 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex20 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex21 = complex17.multiply(complex20);
        code.src.Complex complex22 = complex9.add(complex21);
        code.src.Complex complex25 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex28 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex29 = complex25.multiply(complex28);
        java.lang.String str30 = complex25.toString();
        code.src.Complex complex33 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex36 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex37 = complex33.multiply(complex36);
        code.src.Complex complex38 = complex25.add(complex37);
        code.src.Complex complex39 = complex22.add(complex38);
        code.src.Complex complex42 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex45 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex46 = complex42.multiply(complex45);
        code.src.Complex complex47 = complex22.sub(complex42);
        code.src.Complex complex48 = complex5.add(complex47);
        double double49 = complex48.abs();
        code.src.Complex complex52 = new code.src.Complex(10.0d, (double) 10L);
        code.src.Complex complex55 = code.src.Complex.polar((double) '#', (double) (byte) 100);
        code.src.Complex complex56 = complex52.multiply(complex55);
        code.src.Complex complex57 = complex48.add(complex56);
        double double58 = complex57.abs();
        double double59 = complex57.real;
        code.src.Complex complex62 = code.src.Complex.polar(291.95719905143267d, 103.87188973436588d);
        code.src.Complex complex63 = complex57.multiply(complex62);
        complex57.imaginary = 904.2902405342309d;
        double double66 = complex57.abs();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(10.0,0.0)" + "'", str14, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(10.0,0.0)" + "'", str30, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 572.0d + "'", double49 == 572.0d);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 994.0878718290595d + "'", double58 == 994.0878718290595d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 788.0924986456808d + "'", double59 == 788.0924986456808d);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1199.5126616868408d + "'", double66 == 1199.5126616868408d);
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        code.src.Complex complex2 = code.src.Complex.polar((-906.2883532154044d), 520.0d);
        complex2.imaginary = 100.00499987500625d;
        code.src.Complex complex7 = new code.src.Complex((double) 100, (double) 10.0f);
        complex7.real = (byte) 1;
        complex7.real = 589.1068753368511d;
        java.lang.String str12 = complex7.toString();
        code.src.Complex complex15 = new code.src.Complex((double) (short) 100, 43.756491210010616d);
        code.src.Complex complex16 = new code.src.Complex();
        complex16.real = 1L;
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex37 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex40 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex41 = complex37.multiply(complex40);
        java.lang.String str42 = complex37.toString();
        code.src.Complex complex45 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex45.multiply(complex48);
        code.src.Complex complex50 = complex37.add(complex49);
        code.src.Complex complex51 = complex34.add(complex50);
        code.src.Complex complex52 = complex16.add(complex51);
        double double53 = complex52.real;
        code.src.Complex complex56 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex59 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex60 = complex56.multiply(complex59);
        code.src.Complex complex61 = complex52.sub(complex59);
        code.src.Complex complex62 = complex15.add(complex59);
        code.src.Complex complex63 = complex7.sub(complex59);
        code.src.Complex complex64 = complex2.add(complex63);
        complex64.real = 625.6708893128759d;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(589.1068753368511,10.0)" + "'", str12, "(589.1068753368511,10.0)");
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(10.0,0.0)" + "'", str42, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 582.9143981028653d + "'", double53 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        code.src.Complex complex33 = new code.src.Complex();
        code.src.Complex complex34 = complex32.add(complex33);
        double double35 = complex34.imaginary;
        java.lang.Class<?> wildcardClass36 = complex34.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 875.1298242002123d + "'", double35 == 875.1298242002123d);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        double double37 = complex36.real;
        code.src.Complex complex40 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex43 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex44 = complex40.multiply(complex43);
        code.src.Complex complex45 = complex36.sub(complex43);
        double double46 = complex43.abs();
        java.lang.String str47 = complex43.toString();
        java.lang.Class<?> wildcardClass48 = complex43.getClass();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 582.9143981028653d + "'", double37 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 52.0d + "'", double46 == 52.0d);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str47, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        code.src.Complex complex2 = code.src.Complex.polar(100.00499987500625d, 8.414709848078965d);
        java.lang.Class<?> wildcardClass3 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        code.src.Complex complex2 = code.src.Complex.polar(1018.3729221500101d, 0.0d);
        double double3 = complex2.abs();
        code.src.Complex complex4 = new code.src.Complex();
        code.src.Complex complex7 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex10 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex11 = complex7.multiply(complex10);
        java.lang.String str12 = complex7.toString();
        code.src.Complex complex15 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex18 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex19 = complex15.multiply(complex18);
        code.src.Complex complex20 = complex7.add(complex19);
        code.src.Complex complex23 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex26 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex27 = complex23.multiply(complex26);
        java.lang.String str28 = complex23.toString();
        code.src.Complex complex31 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex34 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex35 = complex31.multiply(complex34);
        code.src.Complex complex36 = complex23.add(complex35);
        code.src.Complex complex37 = complex20.add(complex36);
        double double38 = complex37.real;
        code.src.Complex complex39 = complex4.multiply(complex37);
        code.src.Complex complex42 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex45 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex46 = complex42.multiply(complex45);
        java.lang.String str47 = complex42.toString();
        code.src.Complex complex50 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex53 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex54 = complex50.multiply(complex53);
        code.src.Complex complex55 = complex42.add(complex54);
        code.src.Complex complex58 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex61 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex62 = complex58.multiply(complex61);
        java.lang.String str63 = complex58.toString();
        code.src.Complex complex66 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex69 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex70 = complex66.multiply(complex69);
        code.src.Complex complex71 = complex58.add(complex70);
        code.src.Complex complex72 = complex55.add(complex71);
        java.lang.String str73 = complex55.toString();
        double double74 = complex55.abs();
        code.src.Complex complex75 = complex4.multiply(complex55);
        code.src.Complex complex78 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex78.imaginary = (short) 0;
        complex78.real = 525.4704025737593d;
        double double83 = complex78.real;
        code.src.Complex complex84 = complex55.add(complex78);
        double double85 = complex55.abs();
        code.src.Complex complex88 = code.src.Complex.polar((double) (byte) 10, 10.0d);
        code.src.Complex complex89 = complex55.add(complex88);
        double double90 = complex89.imaginary;
        code.src.Complex complex91 = complex2.add(complex89);
        double double92 = complex2.imaginary;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1018.3729221500101d + "'", double3 == 1018.3729221500101d);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(10.0,0.0)" + "'", str12, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(10.0,0.0)" + "'", str28, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 581.9143981028653d + "'", double38 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(10.0,0.0)" + "'", str47, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(10.0,0.0)" + "'", str63, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str73, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 525.4704025737593d + "'", double74 == 525.4704025737593d);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 525.4704025737593d + "'", double83 == 525.4704025737593d);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 525.4704025737593d + "'", double85 == 525.4704025737593d);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 432.1247009912124d + "'", double90 == 432.1247009912124d);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        code.src.Complex complex0 = new code.src.Complex();
        code.src.Complex complex3 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex6 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex7 = complex3.multiply(complex6);
        java.lang.String str8 = complex3.toString();
        code.src.Complex complex11 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex14 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex15 = complex11.multiply(complex14);
        code.src.Complex complex16 = complex3.add(complex15);
        code.src.Complex complex19 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex22 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex23 = complex19.multiply(complex22);
        java.lang.String str24 = complex19.toString();
        code.src.Complex complex27 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex30 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex31 = complex27.multiply(complex30);
        code.src.Complex complex32 = complex19.add(complex31);
        code.src.Complex complex33 = complex16.add(complex32);
        double double34 = complex33.real;
        code.src.Complex complex35 = complex0.multiply(complex33);
        code.src.Complex complex38 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex41 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex42 = complex38.multiply(complex41);
        java.lang.String str43 = complex38.toString();
        code.src.Complex complex46 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex49 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex50 = complex46.multiply(complex49);
        code.src.Complex complex51 = complex38.add(complex50);
        code.src.Complex complex54 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex57 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex58 = complex54.multiply(complex57);
        java.lang.String str59 = complex54.toString();
        code.src.Complex complex62 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex65 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex66 = complex62.multiply(complex65);
        code.src.Complex complex67 = complex54.add(complex66);
        code.src.Complex complex68 = complex51.add(complex67);
        java.lang.String str69 = complex51.toString();
        double double70 = complex51.abs();
        code.src.Complex complex71 = complex0.multiply(complex51);
        code.src.Complex complex74 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex74.imaginary = (short) 0;
        complex74.real = 525.4704025737593d;
        double double79 = complex74.real;
        code.src.Complex complex80 = complex51.add(complex74);
        code.src.Complex complex83 = code.src.Complex.polar((double) (short) 1, 10.0d);
        code.src.Complex complex84 = complex74.multiply(complex83);
        complex83.real = (-1.0d);
        double double87 = complex83.imaginary;
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(10.0,0.0)" + "'", str8, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(10.0,0.0)" + "'", str24, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 581.9143981028653d + "'", double34 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(10.0,0.0)" + "'", str43, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(10.0,0.0)" + "'", str59, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str69, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 525.4704025737593d + "'", double70 == 525.4704025737593d);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 525.4704025737593d + "'", double79 == 525.4704025737593d);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + (-0.5440211108893698d) + "'", double87 == (-0.5440211108893698d));
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        code.src.Complex complex2 = new code.src.Complex(87.48639198643185d, (double) 0L);
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        code.src.Complex complex9 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex12 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex13 = complex9.multiply(complex12);
        java.lang.String str14 = complex9.toString();
        code.src.Complex complex17 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex20 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex21 = complex17.multiply(complex20);
        code.src.Complex complex22 = complex9.add(complex21);
        java.lang.String str23 = complex9.toString();
        code.src.Complex complex24 = complex6.add(complex9);
        java.lang.String str25 = complex9.toString();
        complex9.real = 939.1298242002123d;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(10.0,0.0)" + "'", str14, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(10.0,0.0)" + "'", str25, "(10.0,0.0)");
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        code.src.Complex complex2 = new code.src.Complex(875.1869567153606d, 16815.052882360298d);
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        double double16 = complex15.real;
        code.src.Complex complex19 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex22 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex23 = complex19.multiply(complex22);
        double double24 = complex23.imaginary;
        code.src.Complex complex25 = complex15.sub(complex23);
        complex23.imaginary = 0.0d;
        code.src.Complex complex30 = code.src.Complex.polar(445.65251212240173d, 525.4704025737593d);
        code.src.Complex complex33 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex36 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex37 = complex33.multiply(complex36);
        java.lang.String str38 = complex33.toString();
        code.src.Complex complex41 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex41.real = 10;
        code.src.Complex complex44 = complex33.multiply(complex41);
        java.lang.String str45 = complex33.toString();
        code.src.Complex complex46 = complex30.sub(complex33);
        code.src.Complex complex47 = complex23.multiply(complex33);
        double double48 = complex47.imaginary;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 290.95719905143267d + "'", double16 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 437.56491210010614d + "'", double24 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(10.0,0.0)" + "'", str38, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "(10.0,0.0)" + "'", str45, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str3 = complex2.toString();
        code.src.Complex complex6 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        code.src.Complex complex7 = complex2.sub(complex6);
        complex2.real = (-213613.9212426372d);
        double double10 = complex2.abs();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        java.lang.String str18 = complex13.toString();
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        code.src.Complex complex26 = complex13.add(complex25);
        double double27 = complex26.real;
        code.src.Complex complex30 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex33 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex34 = complex30.multiply(complex33);
        double double35 = complex34.imaginary;
        code.src.Complex complex36 = complex26.sub(complex34);
        double double37 = complex36.real;
        code.src.Complex complex38 = complex2.multiply(complex36);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "(100.0,10.0)" + "'", str3, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 213613.92147670433d + "'", double10 == 213613.92147670433d);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(10.0,0.0)" + "'", str18, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 290.95719905143267d + "'", double27 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 437.56491210010614d + "'", double35 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 10.0d + "'", double37 == 10.0d);
        org.junit.Assert.assertNotNull(complex38);
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        code.src.Complex complex2 = code.src.Complex.polar(1077.733215908709d, 291.95719905143267d);
        code.src.Complex complex5 = new code.src.Complex((double) 1.0f, (double) 10.0f);
        code.src.Complex complex6 = complex2.add(complex5);
        code.src.Complex complex9 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex12 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex13 = complex9.multiply(complex12);
        java.lang.String str14 = complex9.toString();
        code.src.Complex complex17 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex20 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex21 = complex17.multiply(complex20);
        code.src.Complex complex22 = complex9.add(complex21);
        code.src.Complex complex25 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex28 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex29 = complex25.multiply(complex28);
        java.lang.String str30 = complex25.toString();
        code.src.Complex complex33 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex36 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex37 = complex33.multiply(complex36);
        code.src.Complex complex38 = complex25.add(complex37);
        code.src.Complex complex39 = complex22.add(complex38);
        code.src.Complex complex40 = new code.src.Complex();
        code.src.Complex complex41 = complex39.add(complex40);
        complex39.real = 10;
        code.src.Complex complex44 = complex2.sub(complex39);
        complex39.real = 320.0d;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(10.0,0.0)" + "'", str14, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(10.0,0.0)" + "'", str30, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex44);
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        code.src.Complex complex2 = code.src.Complex.polar((-489.10687533685115d), 520.0d);
        code.src.Complex complex5 = new code.src.Complex(1.0d, 28.09571990514327d);
        code.src.Complex complex6 = complex2.add(complex5);
        java.lang.Class<?> wildcardClass7 = complex5.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        code.src.Complex complex2 = new code.src.Complex(9.013372407959515d, (-118.66263362210499d));
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        double double7 = complex6.imaginary;
        java.lang.String str8 = complex6.toString();
        double double9 = complex6.real;
        code.src.Complex complex12 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double13 = complex12.abs();
        java.lang.String str14 = complex12.toString();
        code.src.Complex complex15 = complex6.sub(complex12);
        double double16 = complex15.real;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 437.56491210010614d + "'", double7 == 437.56491210010614d);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(280.95719905143267,437.56491210010614)" + "'", str8, "(280.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 280.95719905143267d + "'", double9 == 280.95719905143267d);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str14, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 252.8614791462894d + "'", double16 == 252.8614791462894d);
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        code.src.Complex complex2 = new code.src.Complex((double) 10, (double) 10);
        complex2.imaginary = 309.0545367982484d;
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        code.src.Complex complex2 = new code.src.Complex(522.5935322982863d, (double) (-1L));
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        code.src.Complex complex2 = code.src.Complex.polar(552238.2879620573d, 213613.92147670433d);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        code.src.Complex complex2 = code.src.Complex.polar((double) (byte) 100, 582.9143981028653d);
        complex2.real = 875.1298242002123d;
        complex2.real = (-293.29939121762186d);
        java.lang.String str7 = complex2.toString();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(-293.29939121762186,-98.89258309150243)" + "'", str7, "(-293.29939121762186,-98.89258309150243)");
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex38 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex41 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex42 = complex38.multiply(complex41);
        code.src.Complex complex43 = complex18.sub(complex38);
        code.src.Complex complex44 = new code.src.Complex();
        code.src.Complex complex47 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex50 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex51 = complex47.multiply(complex50);
        java.lang.String str52 = complex47.toString();
        code.src.Complex complex55 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex58 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex59 = complex55.multiply(complex58);
        code.src.Complex complex60 = complex47.add(complex59);
        code.src.Complex complex63 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex66 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex67 = complex63.multiply(complex66);
        java.lang.String str68 = complex63.toString();
        code.src.Complex complex71 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex74 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex75 = complex71.multiply(complex74);
        code.src.Complex complex76 = complex63.add(complex75);
        code.src.Complex complex77 = complex60.add(complex76);
        double double78 = complex77.real;
        code.src.Complex complex79 = complex44.multiply(complex77);
        code.src.Complex complex80 = complex18.multiply(complex77);
        code.src.Complex complex81 = complex2.sub(complex80);
        double double82 = complex80.real;
        double double83 = complex80.real;
        code.src.Complex complex86 = code.src.Complex.polar((double) (byte) 100, (double) 1.0f);
        code.src.Complex complex87 = complex80.sub(complex86);
        java.lang.Class<?> wildcardClass88 = complex80.getClass();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(10.0,0.0)" + "'", str52, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(10.0,0.0)" + "'", str68, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 581.9143981028653d + "'", double78 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + (-213613.9212426372d) + "'", double82 == (-213613.9212426372d));
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + (-213613.9212426372d) + "'", double83 == (-213613.9212426372d));
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex38 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex41 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex42 = complex38.multiply(complex41);
        code.src.Complex complex43 = complex18.sub(complex38);
        code.src.Complex complex44 = new code.src.Complex();
        code.src.Complex complex47 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex50 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex51 = complex47.multiply(complex50);
        java.lang.String str52 = complex47.toString();
        code.src.Complex complex55 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex58 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex59 = complex55.multiply(complex58);
        code.src.Complex complex60 = complex47.add(complex59);
        code.src.Complex complex63 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex66 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex67 = complex63.multiply(complex66);
        java.lang.String str68 = complex63.toString();
        code.src.Complex complex71 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex74 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex75 = complex71.multiply(complex74);
        code.src.Complex complex76 = complex63.add(complex75);
        code.src.Complex complex77 = complex60.add(complex76);
        double double78 = complex77.real;
        code.src.Complex complex79 = complex44.multiply(complex77);
        code.src.Complex complex80 = complex18.multiply(complex77);
        code.src.Complex complex81 = complex2.sub(complex80);
        java.lang.String str82 = complex2.toString();
        double double83 = complex2.real;
        java.lang.Class<?> wildcardClass84 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(10.0,0.0)" + "'", str52, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(10.0,0.0)" + "'", str68, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 581.9143981028653d + "'", double78 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "(100.0,10.0)" + "'", str82, "(100.0,10.0)");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 100.0d + "'", double83 == 100.0d);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        code.src.Complex complex2 = code.src.Complex.polar((-906.2883532154044d), 520.0d);
        double double3 = complex2.real;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-60.14765206084531d) + "'", double3 == (-60.14765206084531d));
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        code.src.Complex complex2 = new code.src.Complex((-389.10687533685115d), 213623.9212426372d);
        complex2.imaginary = 611.0101180080086d;
        java.lang.String str5 = complex2.toString();
        complex2.real = 1;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(-389.10687533685115,611.0101180080086)" + "'", str5, "(-389.10687533685115,611.0101180080086)");
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        code.src.Complex complex2 = new code.src.Complex(112.71645842555559d, 36.40054944640259d);
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        code.src.Complex complex2 = new code.src.Complex((double) 100L, (double) 10);
        complex2.imaginary = '#';
        complex2.real = 5225.935322982863d;
        code.src.Complex complex7 = null;
        // The following exception was thrown during execution in test generation
        try {
            code.src.Complex complex8 = complex2.multiply(complex7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        code.src.Complex complex2 = code.src.Complex.polar((-317.11773840932915d), (double) (-1.0f));
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        double double40 = complex39.real;
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        code.src.Complex complex48 = complex39.sub(complex46);
        double double49 = complex39.imaginary;
        code.src.Complex complex50 = complex2.sub(complex39);
        complex39.imaginary = 109.15874002118079d;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 582.9143981028653d + "'", double40 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 875.1298242002123d + "'", double49 == 875.1298242002123d);
        org.junit.Assert.assertNotNull(complex50);
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, (double) 1);
        code.src.Complex complex5 = code.src.Complex.polar((double) (short) 0, (-213613.9212426372d));
        code.src.Complex complex8 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        double double9 = complex8.imaginary;
        complex8.imaginary = (byte) 10;
        code.src.Complex complex12 = complex5.sub(complex8);
        double double13 = complex12.imaginary;
        code.src.Complex complex14 = complex2.multiply(complex12);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-317.11773840932915d) + "'", double9 == (-317.11773840932915d));
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-10.0d) + "'", double13 == (-10.0d));
        org.junit.Assert.assertNotNull(complex14);
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        double double7 = complex5.imaginary;
        java.lang.String str8 = complex5.toString();
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double12 = complex11.abs();
        double double13 = complex11.real;
        code.src.Complex complex14 = complex5.sub(complex11);
        java.lang.String str15 = complex14.toString();
        code.src.Complex complex16 = new code.src.Complex();
        complex16.real = 1L;
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex37 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex40 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex41 = complex37.multiply(complex40);
        java.lang.String str42 = complex37.toString();
        code.src.Complex complex45 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex45.multiply(complex48);
        code.src.Complex complex50 = complex37.add(complex49);
        code.src.Complex complex51 = complex34.add(complex50);
        code.src.Complex complex52 = complex16.add(complex51);
        double double53 = complex52.real;
        code.src.Complex complex56 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex59 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex60 = complex56.multiply(complex59);
        code.src.Complex complex61 = complex52.sub(complex59);
        code.src.Complex complex64 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex65 = complex59.add(complex64);
        code.src.Complex complex68 = new code.src.Complex((double) 10L, (double) '#');
        code.src.Complex complex69 = complex64.add(complex68);
        code.src.Complex complex70 = complex14.sub(complex68);
        double double71 = complex68.imaginary;
        java.lang.Class<?> wildcardClass72 = complex68.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 43.756491210010616d + "'", double7 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str8, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 52.0d + "'", double12 == 52.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 28.09571990514327d + "'", double13 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(0.0,0.0)" + "'", str15, "(0.0,0.0)");
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(10.0,0.0)" + "'", str42, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 582.9143981028653d + "'", double53 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 35.0d + "'", double71 == 35.0d);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        double double33 = complex32.real;
        code.src.Complex complex36 = code.src.Complex.polar((double) (byte) 100, 582.9143981028653d);
        code.src.Complex complex37 = complex32.sub(complex36);
        complex36.imaginary = 582.9143981028653d;
        code.src.Complex complex42 = new code.src.Complex(43.756491210010616d, 0.0d);
        code.src.Complex complex45 = new code.src.Complex(10.0d, (-906.2883532154044d));
        code.src.Complex complex46 = complex42.add(complex45);
        code.src.Complex complex47 = complex36.add(complex46);
        code.src.Complex complex50 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        complex50.real = 582.9143981028653d;
        code.src.Complex complex55 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str56 = complex55.toString();
        code.src.Complex complex59 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        code.src.Complex complex60 = complex55.sub(complex59);
        code.src.Complex complex61 = complex50.sub(complex59);
        double double62 = complex59.abs();
        double double63 = complex59.abs();
        code.src.Complex complex64 = complex47.multiply(complex59);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 581.9143981028653d + "'", double33 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "(100.0,10.0)" + "'", str56, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 582.9143981028653d + "'", double62 == 582.9143981028653d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 582.9143981028653d + "'", double63 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex64);
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        code.src.Complex complex2 = new code.src.Complex(28.09571990514327d, 907.1298242002123d);
        code.src.Complex complex5 = code.src.Complex.polar((double) (byte) 10, (double) (short) 0);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.Class<?> wildcardClass7 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        code.src.Complex complex2 = new code.src.Complex(663.590879631022d, 43.756491210010616d);
        complex2.imaginary = '#';
        java.lang.Class<?> wildcardClass5 = complex2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex10.real = 10;
        code.src.Complex complex13 = complex2.multiply(complex10);
        code.src.Complex complex16 = new code.src.Complex(100.0d, (double) 100);
        code.src.Complex complex17 = complex10.add(complex16);
        complex10.real = (-4749.336038853687d);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex17);
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        code.src.Complex complex2 = new code.src.Complex((-509251.64491133287d), 589.1068753368511d);
        java.lang.String str3 = complex2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "(-509251.64491133287,589.1068753368511)" + "'", str3, "(-509251.64491133287,589.1068753368511)");
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        code.src.Complex complex2 = new code.src.Complex(589.2698661176468d, 1926.648617074226d);
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        code.src.Complex complex2 = code.src.Complex.polar((-317.11773840932915d), (double) (-1.0f));
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        double double40 = complex39.real;
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        code.src.Complex complex48 = complex39.sub(complex46);
        double double49 = complex39.imaginary;
        code.src.Complex complex50 = complex2.sub(complex39);
        double double51 = complex39.imaginary;
        complex39.real = 0.0d;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 582.9143981028653d + "'", double40 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 875.1298242002123d + "'", double49 == 875.1298242002123d);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 875.1298242002123d + "'", double51 == 875.1298242002123d);
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        code.src.Complex complex2 = code.src.Complex.polar(663.590879631022d, 865.1298242002123d);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        double double7 = complex5.imaginary;
        java.lang.String str8 = complex5.toString();
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double12 = complex11.abs();
        double double13 = complex11.real;
        code.src.Complex complex14 = complex5.sub(complex11);
        code.src.Complex complex17 = code.src.Complex.polar(141.4213562373095d, (-272.8614791462894d));
        code.src.Complex complex18 = complex11.multiply(complex17);
        java.lang.String str19 = complex11.toString();
        code.src.Complex complex22 = new code.src.Complex(525.4704025737593d, (double) 0);
        code.src.Complex complex23 = complex11.multiply(complex22);
        java.lang.Class<?> wildcardClass24 = complex23.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 43.756491210010616d + "'", double7 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str8, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 52.0d + "'", double12 == 52.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 28.09571990514327d + "'", double13 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str19, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        code.src.Complex complex2 = code.src.Complex.polar(141.4213562373095d, 393.80842089009553d);
        code.src.Complex complex5 = code.src.Complex.polar((double) 10L, 100.0d);
        code.src.Complex complex8 = new code.src.Complex((double) 100, (double) 10.0f);
        complex8.real = (byte) 1;
        complex8.imaginary = (short) 100;
        code.src.Complex complex13 = new code.src.Complex();
        complex13.real = 1L;
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex34 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex37 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex38 = complex34.multiply(complex37);
        java.lang.String str39 = complex34.toString();
        code.src.Complex complex42 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex45 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex46 = complex42.multiply(complex45);
        code.src.Complex complex47 = complex34.add(complex46);
        code.src.Complex complex48 = complex31.add(complex47);
        code.src.Complex complex49 = complex13.add(complex48);
        double double50 = complex13.imaginary;
        double double51 = complex13.imaginary;
        java.lang.String str52 = complex13.toString();
        code.src.Complex complex53 = complex8.sub(complex13);
        code.src.Complex complex56 = new code.src.Complex((double) (byte) 100, (double) 'a');
        code.src.Complex complex59 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex62 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex63 = complex59.multiply(complex62);
        double double64 = complex62.imaginary;
        java.lang.String str65 = complex62.toString();
        code.src.Complex complex66 = complex56.sub(complex62);
        code.src.Complex complex69 = new code.src.Complex((double) 100, (double) 10.0f);
        complex69.real = (byte) 1;
        code.src.Complex complex72 = complex62.multiply(complex69);
        code.src.Complex complex73 = complex53.sub(complex72);
        code.src.Complex complex74 = complex5.multiply(complex72);
        double double75 = complex74.abs();
        code.src.Complex complex76 = complex2.sub(complex74);
        code.src.Complex complex79 = code.src.Complex.polar(0.0d, (double) (short) 1);
        code.src.Complex complex80 = complex74.sub(complex79);
        code.src.Complex complex83 = new code.src.Complex(552238.2879620573d, (-272.8614791462894d));
        code.src.Complex complex84 = complex74.multiply(complex83);
        java.lang.Class<?> wildcardClass85 = complex83.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(10.0,0.0)" + "'", str39, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(1.0,0.0)" + "'", str52, "(1.0,0.0)");
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 43.756491210010616d + "'", double64 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str65, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 5225.935322982863d + "'", double75 == 5225.935322982863d);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        code.src.Complex complex2 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex2.imaginary = (short) 0;
        complex2.imaginary = 100.0f;
        code.src.Complex complex9 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex12 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex13 = complex9.multiply(complex12);
        java.lang.String str14 = complex9.toString();
        code.src.Complex complex17 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex20 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex21 = complex17.multiply(complex20);
        code.src.Complex complex22 = complex9.add(complex21);
        code.src.Complex complex25 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex28 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex29 = complex25.multiply(complex28);
        java.lang.String str30 = complex25.toString();
        code.src.Complex complex33 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex36 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex37 = complex33.multiply(complex36);
        code.src.Complex complex38 = complex25.add(complex37);
        code.src.Complex complex39 = complex22.add(complex38);
        java.lang.String str40 = complex22.toString();
        code.src.Complex complex43 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex43.imaginary = (short) 0;
        java.lang.String str46 = complex43.toString();
        code.src.Complex complex47 = complex22.sub(complex43);
        code.src.Complex complex48 = complex2.add(complex47);
        java.lang.String str49 = complex47.toString();
        double double50 = complex47.real;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(10.0,0.0)" + "'", str14, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(10.0,0.0)" + "'", str30, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str40, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(-0.0,0.0)" + "'", str46, "(-0.0,0.0)");
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str49, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 290.95719905143267d + "'", double50 == 290.95719905143267d);
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        code.src.Complex complex2 = code.src.Complex.polar((double) (byte) 1, (double) 0.0f);
        code.src.Complex complex5 = new code.src.Complex(100.0d, (-1.0d));
        code.src.Complex complex6 = complex2.add(complex5);
        code.src.Complex complex9 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex12 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex13 = complex9.multiply(complex12);
        java.lang.String str14 = complex9.toString();
        double double15 = complex9.real;
        code.src.Complex complex18 = new code.src.Complex((double) (byte) 1, (double) (-1.0f));
        complex18.imaginary = (byte) 1;
        code.src.Complex complex21 = complex9.multiply(complex18);
        code.src.Complex complex22 = complex5.add(complex9);
        java.lang.String str23 = complex5.toString();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(10.0,0.0)" + "'", str14, "(10.0,0.0)");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(100.0,-1.0)" + "'", str23, "(100.0,-1.0)");
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        code.src.Complex complex2 = new code.src.Complex(0.0d, (double) 'a');
        double double3 = complex2.abs();
        double double4 = complex2.imaginary;
        code.src.Complex complex7 = new code.src.Complex(291.95719905143267d, (double) 0);
        code.src.Complex complex8 = complex2.sub(complex7);
        double double9 = complex2.real;
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 97.0d + "'", double3 == 97.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 97.0d + "'", double4 == 97.0d);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        double double37 = complex36.real;
        code.src.Complex complex40 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex43 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex44 = complex40.multiply(complex43);
        code.src.Complex complex45 = complex36.sub(complex43);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex43.add(complex48);
        code.src.Complex complex52 = new code.src.Complex((double) 10L, (double) '#');
        code.src.Complex complex53 = complex48.add(complex52);
        complex48.real = 43.756491210010616d;
        complex48.imaginary = 100.0d;
        complex48.imaginary = (-317.11773840932915d);
        code.src.Complex complex62 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex65 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex66 = complex62.multiply(complex65);
        java.lang.String str67 = complex62.toString();
        code.src.Complex complex70 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex73 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex74 = complex70.multiply(complex73);
        code.src.Complex complex75 = complex62.add(complex74);
        code.src.Complex complex76 = complex48.multiply(complex74);
        complex76.real = 481.32140331011675d;
        java.lang.String str79 = complex76.toString();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 582.9143981028653d + "'", double37 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(10.0,0.0)" + "'", str67, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "(481.32140331011675,-69950.20632289269)" + "'", str79, "(481.32140331011675,-69950.20632289269)");
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        code.src.Complex complex2 = new code.src.Complex(432.1247009912124d, 907.1298242002123d);
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        code.src.Complex complex2 = new code.src.Complex(437.56491210010614d, 663.590879631022d);
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        double double37 = complex36.real;
        code.src.Complex complex40 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex43 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex44 = complex40.multiply(complex43);
        code.src.Complex complex45 = complex36.sub(complex43);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex43.add(complex48);
        code.src.Complex complex52 = new code.src.Complex((double) 10L, (double) '#');
        code.src.Complex complex53 = complex48.add(complex52);
        code.src.Complex complex56 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex56.imaginary = (short) 0;
        complex56.imaginary = 100.0f;
        code.src.Complex complex61 = complex48.multiply(complex56);
        code.src.Complex complex64 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex67 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex68 = complex64.multiply(complex67);
        java.lang.String str69 = complex64.toString();
        code.src.Complex complex72 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex75 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex76 = complex72.multiply(complex75);
        code.src.Complex complex77 = complex64.add(complex76);
        double double78 = complex77.real;
        code.src.Complex complex81 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex84 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex85 = complex81.multiply(complex84);
        double double86 = complex85.imaginary;
        code.src.Complex complex87 = complex77.sub(complex85);
        code.src.Complex complex90 = code.src.Complex.polar(0.0d, (double) (short) -1);
        code.src.Complex complex91 = complex77.multiply(complex90);
        code.src.Complex complex92 = complex48.multiply(complex90);
        java.lang.Class<?> wildcardClass93 = complex92.getClass();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 582.9143981028653d + "'", double37 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(10.0,0.0)" + "'", str69, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 290.95719905143267d + "'", double78 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 437.56491210010614d + "'", double86 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        code.src.Complex complex2 = code.src.Complex.polar((double) '4', (-1.0d));
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        double double40 = complex39.real;
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        code.src.Complex complex48 = complex39.sub(complex46);
        code.src.Complex complex51 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex52 = complex46.add(complex51);
        code.src.Complex complex55 = new code.src.Complex((double) 10L, (double) '#');
        code.src.Complex complex56 = complex51.add(complex55);
        code.src.Complex complex59 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex59.imaginary = (short) 0;
        complex59.imaginary = 100.0f;
        code.src.Complex complex64 = complex51.multiply(complex59);
        code.src.Complex complex67 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex70 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex71 = complex67.multiply(complex70);
        java.lang.String str72 = complex67.toString();
        code.src.Complex complex75 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex78 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex79 = complex75.multiply(complex78);
        code.src.Complex complex80 = complex67.add(complex79);
        double double81 = complex80.real;
        code.src.Complex complex84 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex87 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex88 = complex84.multiply(complex87);
        double double89 = complex88.imaginary;
        code.src.Complex complex90 = complex80.sub(complex88);
        code.src.Complex complex93 = code.src.Complex.polar(0.0d, (double) (short) -1);
        code.src.Complex complex94 = complex80.multiply(complex93);
        code.src.Complex complex95 = complex51.multiply(complex93);
        code.src.Complex complex96 = complex2.sub(complex51);
        double double97 = complex51.real;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 582.9143981028653d + "'", double40 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(10.0,0.0)" + "'", str72, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 290.95719905143267d + "'", double81 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 437.56491210010614d + "'", double89 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertNotNull(complex94);
        org.junit.Assert.assertNotNull(complex95);
        org.junit.Assert.assertNotNull(complex96);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 28.09571990514327d + "'", double97 == 28.09571990514327d);
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        code.src.Complex complex2 = code.src.Complex.polar(58910.68753368511d, 625.6708893128759d);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        code.src.Complex complex2 = code.src.Complex.polar(104.0d, 276080.4779057942d);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        double double7 = complex6.imaginary;
        java.lang.String str8 = complex6.toString();
        java.lang.String str9 = complex6.toString();
        code.src.Complex complex12 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex15 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex16 = complex12.multiply(complex15);
        java.lang.String str17 = complex12.toString();
        code.src.Complex complex20 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex23 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex24 = complex20.multiply(complex23);
        code.src.Complex complex25 = complex12.add(complex24);
        code.src.Complex complex28 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex31 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex32 = complex28.multiply(complex31);
        java.lang.String str33 = complex28.toString();
        code.src.Complex complex36 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex39 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex40 = complex36.multiply(complex39);
        code.src.Complex complex41 = complex28.add(complex40);
        code.src.Complex complex42 = complex25.add(complex41);
        java.lang.String str43 = complex25.toString();
        code.src.Complex complex46 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex46.imaginary = (short) 0;
        java.lang.String str49 = complex46.toString();
        code.src.Complex complex50 = complex25.sub(complex46);
        code.src.Complex complex51 = complex6.sub(complex46);
        double double52 = complex46.real;
        double double53 = complex46.real;
        java.lang.Class<?> wildcardClass54 = complex46.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 437.56491210010614d + "'", double7 == 437.56491210010614d);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(280.95719905143267,437.56491210010614)" + "'", str8, "(280.95719905143267,437.56491210010614)");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(280.95719905143267,437.56491210010614)" + "'", str9, "(280.95719905143267,437.56491210010614)");
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(10.0,0.0)" + "'", str17, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(10.0,0.0)" + "'", str33, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str43, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(-0.0,0.0)" + "'", str49, "(-0.0,0.0)");
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-0.0d) + "'", double52 == (-0.0d));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + (-0.0d) + "'", double53 == (-0.0d));
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        code.src.Complex complex2 = code.src.Complex.polar(998.947820022602d, (double) (-1));
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        code.src.Complex complex2 = new code.src.Complex((-906.2883532154044d), 9.013372407959515d);
        code.src.Complex complex5 = new code.src.Complex(10.0d, (-906.2883532154044d));
        code.src.Complex complex6 = complex2.sub(complex5);
        org.junit.Assert.assertNotNull(complex6);
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        code.src.Complex complex2 = new code.src.Complex(663.590879631022d, 43.756491210010616d);
        complex2.imaginary = '#';
        code.src.Complex complex7 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex10 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex11 = complex7.multiply(complex10);
        java.lang.String str12 = complex7.toString();
        code.src.Complex complex15 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex18 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex19 = complex15.multiply(complex18);
        code.src.Complex complex20 = complex7.add(complex19);
        double double21 = complex7.abs();
        code.src.Complex complex22 = complex2.add(complex7);
        code.src.Complex complex25 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex28 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex29 = complex25.multiply(complex28);
        java.lang.String str30 = complex25.toString();
        code.src.Complex complex33 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex36 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex37 = complex33.multiply(complex36);
        code.src.Complex complex38 = complex25.add(complex37);
        code.src.Complex complex41 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex44 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex45 = complex41.multiply(complex44);
        java.lang.String str46 = complex41.toString();
        code.src.Complex complex49 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex52 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex53 = complex49.multiply(complex52);
        code.src.Complex complex54 = complex41.add(complex53);
        code.src.Complex complex55 = complex38.add(complex54);
        double double56 = complex55.real;
        code.src.Complex complex59 = code.src.Complex.polar((double) (byte) 100, 582.9143981028653d);
        code.src.Complex complex60 = complex55.sub(complex59);
        code.src.Complex complex61 = complex7.add(complex59);
        java.lang.String str62 = complex61.toString();
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(10.0,0.0)" + "'", str12, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(10.0,0.0)" + "'", str30, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(10.0,0.0)" + "'", str46, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 581.9143981028653d + "'", double56 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(24.841058233505056,-98.89258309150243)" + "'", str62, "(24.841058233505056,-98.89258309150243)");
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        code.src.Complex complex2 = code.src.Complex.polar(907.5648116969368d, 589.2698661176468d);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        complex2.real = (byte) 1;
        complex2.imaginary = (short) 100;
        code.src.Complex complex7 = new code.src.Complex();
        complex7.real = 1L;
        code.src.Complex complex12 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex15 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex16 = complex12.multiply(complex15);
        java.lang.String str17 = complex12.toString();
        code.src.Complex complex20 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex23 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex24 = complex20.multiply(complex23);
        code.src.Complex complex25 = complex12.add(complex24);
        code.src.Complex complex28 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex31 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex32 = complex28.multiply(complex31);
        java.lang.String str33 = complex28.toString();
        code.src.Complex complex36 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex39 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex40 = complex36.multiply(complex39);
        code.src.Complex complex41 = complex28.add(complex40);
        code.src.Complex complex42 = complex25.add(complex41);
        code.src.Complex complex43 = complex7.add(complex42);
        double double44 = complex7.imaginary;
        double double45 = complex7.imaginary;
        java.lang.String str46 = complex7.toString();
        code.src.Complex complex47 = complex2.sub(complex7);
        java.lang.String str48 = complex7.toString();
        code.src.Complex complex51 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex51.imaginary = (short) 0;
        double double54 = complex51.abs();
        double double55 = complex51.real;
        double double56 = complex51.real;
        double double57 = complex51.imaginary;
        code.src.Complex complex58 = complex7.multiply(complex51);
        java.lang.String str59 = complex51.toString();
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(10.0,0.0)" + "'", str17, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(10.0,0.0)" + "'", str33, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(1.0,0.0)" + "'", str46, "(1.0,0.0)");
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(1.0,0.0)" + "'", str48, "(1.0,0.0)");
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + (-0.0d) + "'", double55 == (-0.0d));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + (-0.0d) + "'", double56 == (-0.0d));
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(-0.0,0.0)" + "'", str59, "(-0.0,0.0)");
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        code.src.Complex complex2 = code.src.Complex.polar((double) (byte) 100, 582.9143981028653d);
        double double3 = complex2.real;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 14.841058233505056d + "'", double3 == 14.841058233505056d);
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        code.src.Complex complex2 = new code.src.Complex(1136.0754242392372d, 276080.4779057942d);
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        double double37 = complex36.real;
        code.src.Complex complex40 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex43 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex44 = complex40.multiply(complex43);
        code.src.Complex complex45 = complex36.sub(complex43);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex43.add(complex48);
        code.src.Complex complex52 = new code.src.Complex((double) 10L, (double) '#');
        code.src.Complex complex53 = complex48.add(complex52);
        complex48.real = 43.756491210010616d;
        complex48.imaginary = 100.0d;
        code.src.Complex complex60 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        double double61 = complex60.abs();
        code.src.Complex complex62 = complex48.add(complex60);
        java.lang.String str63 = complex60.toString();
        code.src.Complex complex66 = code.src.Complex.polar(1077.733215908709d, 291.95719905143267d);
        code.src.Complex complex69 = new code.src.Complex((double) 1.0f, (double) 10.0f);
        code.src.Complex complex70 = complex66.add(complex69);
        double double71 = complex70.imaginary;
        double double72 = complex70.abs();
        double double73 = complex70.abs();
        code.src.Complex complex74 = complex60.add(complex70);
        double double75 = complex60.abs();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 582.9143981028653d + "'", double37 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(-0.0,0.0)" + "'", str63, "(-0.0,0.0)");
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 235.63140523513093d + "'", double71 == 235.63140523513093d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 1078.895181758881d + "'", double72 == 1078.895181758881d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 1078.895181758881d + "'", double73 == 1078.895181758881d);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        double double33 = complex15.real;
        double double34 = complex15.real;
        code.src.Complex complex37 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex40 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex41 = complex37.multiply(complex40);
        java.lang.String str42 = complex37.toString();
        code.src.Complex complex45 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex45.multiply(complex48);
        code.src.Complex complex50 = complex37.add(complex49);
        code.src.Complex complex53 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex56 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex57 = complex53.multiply(complex56);
        java.lang.String str58 = complex53.toString();
        code.src.Complex complex61 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex64 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex65 = complex61.multiply(complex64);
        code.src.Complex complex66 = complex53.add(complex65);
        code.src.Complex complex67 = complex50.add(complex66);
        code.src.Complex complex68 = complex15.sub(complex50);
        code.src.Complex complex71 = new code.src.Complex(525.4704025737593d, 0.0d);
        code.src.Complex complex72 = complex68.add(complex71);
        complex68.real = 52.00000000000001d;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 290.95719905143267d + "'", double33 == 290.95719905143267d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 290.95719905143267d + "'", double34 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(10.0,0.0)" + "'", str42, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(10.0,0.0)" + "'", str58, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex72);
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        double double7 = complex5.imaginary;
        java.lang.String str8 = complex5.toString();
        code.src.Complex complex11 = new code.src.Complex(100.0d, (-1.0d));
        double double12 = complex11.abs();
        code.src.Complex complex13 = complex5.sub(complex11);
        double double14 = complex5.abs();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 43.756491210010616d + "'", double7 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str8, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.00499987500625d + "'", double12 == 100.00499987500625d);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 52.0d + "'", double14 == 52.0d);
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 0, (double) ' ');
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        code.src.Complex complex40 = complex2.add(complex38);
        double double41 = complex40.real;
        double double42 = complex40.abs();
        complex40.real = 10.04987562112089d;
        java.lang.Class<?> wildcardClass45 = complex40.getClass();
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 581.9143981028653d + "'", double41 == 581.9143981028653d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1077.733215908709d + "'", double42 == 1077.733215908709d);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        code.src.Complex complex2 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex2.imaginary = (short) 0;
        complex2.imaginary = 100.0f;
        double double7 = complex2.imaginary;
        java.lang.String str8 = complex2.toString();
        double double9 = complex2.abs();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-0.0,100.0)" + "'", str8, "(-0.0,100.0)");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, (double) '#');
        double double3 = complex2.imaginary;
        code.src.Complex complex6 = new code.src.Complex((double) 10.0f, (-438.56491210010614d));
        code.src.Complex complex7 = complex2.add(complex6);
        double double8 = complex7.abs();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 35.0d + "'", double3 == 35.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 404.0601914051499d + "'", double8 == 404.0601914051499d);
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        code.src.Complex complex2 = code.src.Complex.polar(252.8614791462894d, 613.7449014003101d);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        double double7 = complex5.imaginary;
        double double8 = complex5.imaginary;
        complex5.real = 708268.0426747819d;
        java.lang.Class<?> wildcardClass11 = complex5.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 43.756491210010616d + "'", double7 == 43.756491210010616d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 43.756491210010616d + "'", double8 == 43.756491210010616d);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        code.src.Complex complex2 = code.src.Complex.polar((double) (short) 100, 589.1068753368511d);
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex38 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex41 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex42 = complex38.multiply(complex41);
        code.src.Complex complex43 = complex18.sub(complex38);
        code.src.Complex complex44 = new code.src.Complex();
        code.src.Complex complex47 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex50 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex51 = complex47.multiply(complex50);
        java.lang.String str52 = complex47.toString();
        code.src.Complex complex55 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex58 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex59 = complex55.multiply(complex58);
        code.src.Complex complex60 = complex47.add(complex59);
        code.src.Complex complex63 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex66 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex67 = complex63.multiply(complex66);
        java.lang.String str68 = complex63.toString();
        code.src.Complex complex71 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex74 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex75 = complex71.multiply(complex74);
        code.src.Complex complex76 = complex63.add(complex75);
        code.src.Complex complex77 = complex60.add(complex76);
        double double78 = complex77.real;
        code.src.Complex complex79 = complex44.multiply(complex77);
        code.src.Complex complex80 = complex18.multiply(complex77);
        code.src.Complex complex83 = new code.src.Complex(43.756491210010616d, 437.56491210010614d);
        double double84 = complex83.imaginary;
        code.src.Complex complex85 = complex77.add(complex83);
        double double86 = complex77.imaginary;
        double double87 = complex77.real;
        code.src.Complex complex88 = complex2.add(complex77);
        double double89 = complex77.imaginary;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(10.0,0.0)" + "'", str52, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(10.0,0.0)" + "'", str68, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 581.9143981028653d + "'", double78 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 437.56491210010614d + "'", double84 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 875.1298242002123d + "'", double86 == 875.1298242002123d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 581.9143981028653d + "'", double87 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 875.1298242002123d + "'", double89 == 875.1298242002123d);
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        code.src.Complex complex2 = code.src.Complex.polar(352.8614791462894d, (-495.7163425468028d));
        complex2.imaginary = 1199.5126616868408d;
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        code.src.Complex complex2 = code.src.Complex.polar(1.4142135623730951d, 27.594203913205885d);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        code.src.Complex complex2 = code.src.Complex.polar((-1.0d), 0.0d);
        complex2.imaginary = 213931.13074726702d;
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        code.src.Complex complex2 = new code.src.Complex(554.8186781977221d, 875.8294407044641d);
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        code.src.Complex complex2 = code.src.Complex.polar(240.82414161407507d, 1078.895181758881d);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        code.src.Complex complex2 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double3 = complex2.abs();
        double double4 = complex2.real;
        code.src.Complex complex7 = code.src.Complex.polar(445.65251212240173d, 525.4704025737593d);
        code.src.Complex complex8 = complex2.multiply(complex7);
        complex2.real = 907.1298242002123d;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 52.0d + "'", double3 == 52.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 28.09571990514327d + "'", double4 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        code.src.Complex complex2 = code.src.Complex.polar((-0.5440211108893698d), (double) 1.0f);
        java.lang.Class<?> wildcardClass3 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        double double7 = complex6.imaginary;
        java.lang.String str8 = complex6.toString();
        java.lang.String str9 = complex6.toString();
        double double10 = complex6.real;
        java.lang.String str11 = complex6.toString();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 437.56491210010614d + "'", double7 == 437.56491210010614d);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(280.95719905143267,437.56491210010614)" + "'", str8, "(280.95719905143267,437.56491210010614)");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(280.95719905143267,437.56491210010614)" + "'", str9, "(280.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 280.95719905143267d + "'", double10 == 280.95719905143267d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(280.95719905143267,437.56491210010614)" + "'", str11, "(280.95719905143267,437.56491210010614)");
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        code.src.Complex complex2 = code.src.Complex.polar(612077.1638882305d, (-15.28466475403262d));
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        double double33 = complex15.real;
        code.src.Complex complex36 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        code.src.Complex complex37 = complex15.sub(complex36);
        java.lang.String str38 = complex37.toString();
        code.src.Complex complex41 = new code.src.Complex((double) 100, (double) 10.0f);
        complex41.real = (byte) 1;
        complex41.imaginary = (short) 100;
        code.src.Complex complex48 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex51 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex52 = complex48.multiply(complex51);
        java.lang.String str53 = complex48.toString();
        code.src.Complex complex56 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex59 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex60 = complex56.multiply(complex59);
        code.src.Complex complex61 = complex48.add(complex60);
        double double62 = complex61.real;
        code.src.Complex complex65 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex66 = complex61.multiply(complex65);
        code.src.Complex complex67 = complex41.multiply(complex61);
        code.src.Complex complex70 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str71 = complex70.toString();
        code.src.Complex complex74 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        code.src.Complex complex75 = complex70.sub(complex74);
        complex70.imaginary = (-1.0f);
        code.src.Complex complex78 = complex41.sub(complex70);
        double double79 = complex41.real;
        code.src.Complex complex80 = complex37.multiply(complex41);
        code.src.Complex complex83 = new code.src.Complex((-906.2883532154044d), 87.48639198643185d);
        code.src.Complex complex86 = code.src.Complex.polar(1018.3729221500101d, 0.0d);
        double double87 = complex86.abs();
        code.src.Complex complex88 = complex83.sub(complex86);
        code.src.Complex complex89 = complex37.multiply(complex88);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 290.95719905143267d + "'", double33 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str38, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(10.0,0.0)" + "'", str53, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 290.95719905143267d + "'", double62 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(100.0,10.0)" + "'", str71, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 1.0d + "'", double79 == 1.0d);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 1018.3729221500101d + "'", double87 == 1018.3729221500101d);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        java.lang.String str8 = complex2.toString();
        code.src.Complex complex11 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex14 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex15 = complex11.multiply(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        java.lang.String str32 = complex18.toString();
        code.src.Complex complex33 = complex15.add(complex18);
        code.src.Complex complex34 = complex2.sub(complex18);
        double double35 = complex34.real;
        code.src.Complex complex36 = new code.src.Complex();
        complex36.real = 1L;
        code.src.Complex complex41 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex44 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex45 = complex41.multiply(complex44);
        java.lang.String str46 = complex41.toString();
        code.src.Complex complex49 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex52 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex53 = complex49.multiply(complex52);
        code.src.Complex complex54 = complex41.add(complex53);
        code.src.Complex complex57 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex60 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex61 = complex57.multiply(complex60);
        java.lang.String str62 = complex57.toString();
        code.src.Complex complex65 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex68 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex69 = complex65.multiply(complex68);
        code.src.Complex complex70 = complex57.add(complex69);
        code.src.Complex complex71 = complex54.add(complex70);
        code.src.Complex complex72 = complex36.add(complex71);
        double double73 = complex72.real;
        code.src.Complex complex76 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex79 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex80 = complex76.multiply(complex79);
        code.src.Complex complex81 = complex72.sub(complex79);
        code.src.Complex complex84 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex85 = complex79.add(complex84);
        complex84.imaginary = (short) 100;
        code.src.Complex complex88 = complex34.sub(complex84);
        double double89 = complex84.real;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(10.0,0.0)" + "'", str8, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(10.0,0.0)" + "'", str32, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(10.0,0.0)" + "'", str46, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(10.0,0.0)" + "'", str62, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 582.9143981028653d + "'", double73 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 28.09571990514327d + "'", double89 == 28.09571990514327d);
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        code.src.Complex complex2 = new code.src.Complex((-60.14765206084531d), 15118.903072407044d);
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        code.src.Complex complex2 = new code.src.Complex((-438.0712777412159d), 279.95719905143267d);
        complex2.real = 0.0d;
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        code.src.Complex complex2 = code.src.Complex.polar((-438.56491210010614d), 324.9608082617091d);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex34 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex37 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex38 = complex34.multiply(complex37);
        java.lang.String str39 = complex34.toString();
        code.src.Complex complex42 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex45 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex46 = complex42.multiply(complex45);
        code.src.Complex complex47 = complex34.add(complex46);
        code.src.Complex complex48 = complex31.add(complex47);
        java.lang.String str49 = complex31.toString();
        double double50 = complex31.abs();
        code.src.Complex complex51 = complex15.multiply(complex31);
        double double52 = complex15.abs();
        complex15.imaginary = (-325.1488062743758d);
        code.src.Complex complex57 = code.src.Complex.polar(141.4213562373095d, (double) 10.0f);
        code.src.Complex complex60 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex63 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex64 = complex60.multiply(complex63);
        double double65 = complex64.imaginary;
        complex64.imaginary = 572.0d;
        complex64.real = (byte) 0;
        code.src.Complex complex70 = complex57.sub(complex64);
        code.src.Complex complex71 = complex15.sub(complex64);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(10.0,0.0)" + "'", str39, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str49, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 525.4704025737593d + "'", double50 == 525.4704025737593d);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 525.4704025737593d + "'", double52 == 525.4704025737593d);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 437.56491210010614d + "'", double65 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        code.src.Complex complex2 = new code.src.Complex(290.95719905143267d, 97.0d);
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        double double36 = complex18.real;
        code.src.Complex complex39 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double40 = complex39.abs();
        double double41 = complex39.real;
        code.src.Complex complex44 = new code.src.Complex(10.0d, 875.1298242002123d);
        code.src.Complex complex45 = complex39.multiply(complex44);
        complex44.real = 0.0d;
        code.src.Complex complex48 = complex18.sub(complex44);
        code.src.Complex complex49 = complex2.add(complex48);
        complex49.imaginary = 1051.4948429356753d;
        java.lang.Class<?> wildcardClass52 = complex49.getClass();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 290.95719905143267d + "'", double36 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 52.0d + "'", double40 == 52.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 28.09571990514327d + "'", double41 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        code.src.Complex complex2 = new code.src.Complex(320.0d, 35.0d);
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex38 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex41 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex42 = complex38.multiply(complex41);
        code.src.Complex complex43 = complex18.sub(complex38);
        code.src.Complex complex44 = new code.src.Complex();
        code.src.Complex complex47 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex50 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex51 = complex47.multiply(complex50);
        java.lang.String str52 = complex47.toString();
        code.src.Complex complex55 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex58 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex59 = complex55.multiply(complex58);
        code.src.Complex complex60 = complex47.add(complex59);
        code.src.Complex complex63 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex66 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex67 = complex63.multiply(complex66);
        java.lang.String str68 = complex63.toString();
        code.src.Complex complex71 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex74 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex75 = complex71.multiply(complex74);
        code.src.Complex complex76 = complex63.add(complex75);
        code.src.Complex complex77 = complex60.add(complex76);
        double double78 = complex77.real;
        code.src.Complex complex79 = complex44.multiply(complex77);
        code.src.Complex complex80 = complex18.multiply(complex77);
        code.src.Complex complex81 = complex2.sub(complex80);
        double double82 = complex80.real;
        double double83 = complex80.abs();
        double double84 = complex80.real;
        java.lang.Class<?> wildcardClass85 = complex80.getClass();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(10.0,0.0)" + "'", str52, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(10.0,0.0)" + "'", str68, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 581.9143981028653d + "'", double78 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + (-213613.9212426372d) + "'", double82 == (-213613.9212426372d));
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 552238.2879620573d + "'", double83 == 552238.2879620573d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + (-213613.9212426372d) + "'", double84 == (-213613.9212426372d));
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, (double) '#');
        complex2.imaginary = (byte) 10;
        java.lang.String str5 = complex2.toString();
        code.src.Complex complex8 = code.src.Complex.polar((double) (short) -1, (double) (-1L));
        code.src.Complex complex11 = new code.src.Complex((double) (short) 0, (double) ' ');
        code.src.Complex complex12 = new code.src.Complex();
        complex12.real = 1L;
        code.src.Complex complex17 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex20 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex21 = complex17.multiply(complex20);
        java.lang.String str22 = complex17.toString();
        code.src.Complex complex25 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex28 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex29 = complex25.multiply(complex28);
        code.src.Complex complex30 = complex17.add(complex29);
        code.src.Complex complex33 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex36 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex37 = complex33.multiply(complex36);
        java.lang.String str38 = complex33.toString();
        code.src.Complex complex41 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex44 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex45 = complex41.multiply(complex44);
        code.src.Complex complex46 = complex33.add(complex45);
        code.src.Complex complex47 = complex30.add(complex46);
        code.src.Complex complex48 = complex12.add(complex47);
        code.src.Complex complex49 = complex11.add(complex47);
        code.src.Complex complex52 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex55 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex56 = complex52.multiply(complex55);
        java.lang.String str57 = complex52.toString();
        code.src.Complex complex60 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex63 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex64 = complex60.multiply(complex63);
        code.src.Complex complex65 = complex52.add(complex64);
        code.src.Complex complex68 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex71 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex72 = complex68.multiply(complex71);
        java.lang.String str73 = complex68.toString();
        code.src.Complex complex76 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex79 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex80 = complex76.multiply(complex79);
        code.src.Complex complex81 = complex68.add(complex80);
        code.src.Complex complex82 = complex65.add(complex81);
        code.src.Complex complex83 = new code.src.Complex();
        code.src.Complex complex84 = complex82.add(complex83);
        code.src.Complex complex85 = complex49.add(complex83);
        double double86 = complex85.imaginary;
        code.src.Complex complex87 = complex8.sub(complex85);
        double double88 = complex87.imaginary;
        double double89 = complex87.imaginary;
        code.src.Complex complex90 = complex2.sub(complex87);
        double double91 = complex2.real;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(10.0,10.0)" + "'", str5, "(10.0,10.0)");
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(10.0,0.0)" + "'", str22, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(10.0,0.0)" + "'", str38, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(10.0,0.0)" + "'", str57, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(10.0,0.0)" + "'", str73, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 907.1298242002123d + "'", double86 == 907.1298242002123d);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + (-906.2883532154044d) + "'", double88 == (-906.2883532154044d));
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + (-906.2883532154044d) + "'", double89 == (-906.2883532154044d));
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 10.0d + "'", double91 == 10.0d);
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        double double8 = complex2.real;
        java.lang.Class<?> wildcardClass9 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 0, (double) ' ');
        code.src.Complex complex5 = new code.src.Complex((double) 10L, (double) '#');
        double double6 = complex5.imaginary;
        code.src.Complex complex7 = complex2.multiply(complex5);
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        double double15 = complex14.imaginary;
        code.src.Complex complex16 = complex7.multiply(complex14);
        complex16.imaginary = 354080.08284857025d;
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 437.56491210010614d + "'", double15 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex16);
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 0, (double) ' ');
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        code.src.Complex complex40 = complex2.add(complex38);
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        double double48 = complex46.imaginary;
        java.lang.String str49 = complex46.toString();
        code.src.Complex complex52 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double53 = complex52.abs();
        double double54 = complex52.real;
        code.src.Complex complex55 = complex46.sub(complex52);
        code.src.Complex complex56 = complex38.sub(complex46);
        code.src.Complex complex57 = new code.src.Complex();
        complex57.real = 1L;
        code.src.Complex complex62 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex65 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex66 = complex62.multiply(complex65);
        java.lang.String str67 = complex62.toString();
        code.src.Complex complex70 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex73 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex74 = complex70.multiply(complex73);
        code.src.Complex complex75 = complex62.add(complex74);
        code.src.Complex complex78 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex81 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex82 = complex78.multiply(complex81);
        java.lang.String str83 = complex78.toString();
        code.src.Complex complex86 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex89 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex90 = complex86.multiply(complex89);
        code.src.Complex complex91 = complex78.add(complex90);
        code.src.Complex complex92 = complex75.add(complex91);
        code.src.Complex complex93 = complex57.add(complex92);
        double double94 = complex57.imaginary;
        code.src.Complex complex95 = complex56.add(complex57);
        complex95.imaginary = 280.95719905143267d;
        double double98 = complex95.real;
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 43.756491210010616d + "'", double48 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str49, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 52.0d + "'", double53 == 52.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 28.09571990514327d + "'", double54 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(10.0,0.0)" + "'", str67, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(10.0,0.0)" + "'", str83, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
        org.junit.Assert.assertNotNull(complex95);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 554.8186781977221d + "'", double98 == 554.8186781977221d);
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        code.src.Complex complex2 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex2.imaginary = (short) 0;
        complex2.real = 525.4704025737593d;
        double double7 = complex2.real;
        complex2.imaginary = 100;
        double double10 = complex2.imaginary;
        java.lang.Class<?> wildcardClass11 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 525.4704025737593d + "'", double7 == 525.4704025737593d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        code.src.Complex complex2 = new code.src.Complex(52.0d, 112.71202242884297d);
        complex2.imaginary = 0.0d;
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        code.src.Complex complex2 = code.src.Complex.polar((-489.10687533685115d), 520.0d);
        code.src.Complex complex5 = new code.src.Complex(1.0d, 28.09571990514327d);
        code.src.Complex complex6 = complex2.add(complex5);
        double double7 = complex6.abs();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 517.0822078688589d + "'", double7 == 517.0822078688589d);
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        code.src.Complex complex2 = new code.src.Complex(51.46657711748192d, (double) 1);
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 0, (double) ' ');
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        code.src.Complex complex40 = complex2.add(complex38);
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        java.lang.String str48 = complex43.toString();
        code.src.Complex complex51 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex54 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex55 = complex51.multiply(complex54);
        code.src.Complex complex56 = complex43.add(complex55);
        code.src.Complex complex59 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex62 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex63 = complex59.multiply(complex62);
        java.lang.String str64 = complex59.toString();
        code.src.Complex complex67 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex70 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex71 = complex67.multiply(complex70);
        code.src.Complex complex72 = complex59.add(complex71);
        code.src.Complex complex73 = complex56.add(complex72);
        code.src.Complex complex74 = new code.src.Complex();
        code.src.Complex complex75 = complex73.add(complex74);
        code.src.Complex complex76 = complex40.add(complex74);
        java.lang.String str77 = complex40.toString();
        complex40.real = 170.71953646075502d;
        code.src.Complex complex82 = new code.src.Complex(589.1068753368511d, 481.32140331011675d);
        code.src.Complex complex83 = complex40.add(complex82);
        complex83.real = 528.7686600293723d;
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(10.0,0.0)" + "'", str48, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(10.0,0.0)" + "'", str64, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(581.9143981028653,907.1298242002123)" + "'", str77, "(581.9143981028653,907.1298242002123)");
        org.junit.Assert.assertNotNull(complex83);
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        code.src.Complex complex33 = new code.src.Complex();
        complex33.real = 1L;
        code.src.Complex complex38 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex41 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex42 = complex38.multiply(complex41);
        java.lang.String str43 = complex38.toString();
        code.src.Complex complex46 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex49 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex50 = complex46.multiply(complex49);
        code.src.Complex complex51 = complex38.add(complex50);
        code.src.Complex complex54 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex57 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex58 = complex54.multiply(complex57);
        java.lang.String str59 = complex54.toString();
        code.src.Complex complex62 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex65 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex66 = complex62.multiply(complex65);
        code.src.Complex complex67 = complex54.add(complex66);
        code.src.Complex complex68 = complex51.add(complex67);
        code.src.Complex complex69 = complex33.add(complex68);
        double double70 = complex69.real;
        code.src.Complex complex73 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex76 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex77 = complex73.multiply(complex76);
        code.src.Complex complex78 = complex69.sub(complex76);
        code.src.Complex complex81 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex82 = complex76.add(complex81);
        code.src.Complex complex85 = new code.src.Complex((double) 10L, (double) '#');
        code.src.Complex complex86 = complex81.add(complex85);
        code.src.Complex complex89 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex89.imaginary = (short) 0;
        complex89.imaginary = 100.0f;
        code.src.Complex complex94 = complex81.multiply(complex89);
        code.src.Complex complex95 = complex32.add(complex89);
        complex32.imaginary = 663.590879631022d;
        double double98 = complex32.imaginary;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(10.0,0.0)" + "'", str43, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(10.0,0.0)" + "'", str59, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 582.9143981028653d + "'", double70 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex94);
        org.junit.Assert.assertNotNull(complex95);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 663.590879631022d + "'", double98 == 663.590879631022d);
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        code.src.Complex complex2 = code.src.Complex.polar((-317.11773840932915d), 170.71953646075502d);
        double double3 = complex2.imaginary;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-278.7120481991623d) + "'", double3 == (-278.7120481991623d));
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        code.src.Complex complex2 = code.src.Complex.polar((double) 10.0f, (-389.10687533685115d));
        double double3 = complex2.abs();
        java.lang.String str4 = complex2.toString();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(9.001799908470085,4.355180640096112)" + "'", str4, "(9.001799908470085,4.355180640096112)");
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str3 = complex2.toString();
        code.src.Complex complex6 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        code.src.Complex complex7 = complex2.sub(complex6);
        complex2.imaginary = (-1.0f);
        double double10 = complex2.real;
        complex2.real = (-1.0f);
        double double13 = complex2.abs();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "(100.0,10.0)" + "'", str3, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.4142135623730951d + "'", double13 == 1.4142135623730951d);
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        code.src.Complex complex33 = new code.src.Complex();
        code.src.Complex complex34 = complex32.add(complex33);
        complex32.real = 10;
        double double37 = complex32.imaginary;
        java.lang.String str38 = complex32.toString();
        code.src.Complex complex41 = new code.src.Complex(10.04987562112089d, (double) '#');
        double double42 = complex41.abs();
        code.src.Complex complex43 = complex32.sub(complex41);
        complex43.real = 0.0d;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 875.1298242002123d + "'", double37 == 875.1298242002123d);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(10.0,875.1298242002123)" + "'", str38, "(10.0,875.1298242002123)");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 36.41428291206625d + "'", double42 == 36.41428291206625d);
        org.junit.Assert.assertNotNull(complex43);
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        code.src.Complex complex2 = new code.src.Complex(282.5664837606681d, (-54.40211108893698d));
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        double double37 = complex36.real;
        code.src.Complex complex40 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex43 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex44 = complex40.multiply(complex43);
        code.src.Complex complex45 = complex36.sub(complex43);
        double double46 = complex36.imaginary;
        double double47 = complex36.real;
        double double48 = complex36.abs();
        code.src.Complex complex51 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex54 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex55 = complex51.multiply(complex54);
        double double56 = complex55.imaginary;
        java.lang.String str57 = complex55.toString();
        code.src.Complex complex58 = complex36.multiply(complex55);
        complex58.imaginary = 148.66068747318505d;
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 582.9143981028653d + "'", double37 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 875.1298242002123d + "'", double46 == 875.1298242002123d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 582.9143981028653d + "'", double47 == 582.9143981028653d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1051.4948429356753d + "'", double48 == 1051.4948429356753d);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 437.56491210010614d + "'", double56 == 437.56491210010614d);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(280.95719905143267,437.56491210010614)" + "'", str57, "(280.95719905143267,437.56491210010614)");
        org.junit.Assert.assertNotNull(complex58);
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        double double37 = complex0.imaginary;
        double double38 = complex0.imaginary;
        code.src.Complex complex41 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex44 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex45 = complex41.multiply(complex44);
        java.lang.String str46 = complex41.toString();
        code.src.Complex complex49 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex52 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex53 = complex49.multiply(complex52);
        code.src.Complex complex54 = complex41.add(complex53);
        code.src.Complex complex57 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex60 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex61 = complex57.multiply(complex60);
        java.lang.String str62 = complex57.toString();
        code.src.Complex complex65 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex68 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex69 = complex65.multiply(complex68);
        code.src.Complex complex70 = complex57.add(complex69);
        code.src.Complex complex71 = complex54.add(complex70);
        code.src.Complex complex72 = new code.src.Complex();
        code.src.Complex complex73 = complex71.add(complex72);
        code.src.Complex complex76 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex79 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex80 = complex76.multiply(complex79);
        double double81 = complex79.imaginary;
        java.lang.String str82 = complex79.toString();
        code.src.Complex complex85 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double86 = complex85.abs();
        double double87 = complex85.real;
        code.src.Complex complex88 = complex79.sub(complex85);
        code.src.Complex complex89 = complex72.sub(complex79);
        code.src.Complex complex90 = complex0.add(complex79);
        java.lang.String str91 = complex79.toString();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(10.0,0.0)" + "'", str46, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(10.0,0.0)" + "'", str62, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 43.756491210010616d + "'", double81 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str82, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 52.0d + "'", double86 == 52.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 28.09571990514327d + "'", double87 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str91, "(28.09571990514327,43.756491210010616)");
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        double double16 = complex15.real;
        code.src.Complex complex19 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex22 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex23 = complex19.multiply(complex22);
        double double24 = complex23.imaginary;
        code.src.Complex complex25 = complex15.sub(complex23);
        double double26 = complex23.real;
        double double27 = complex23.real;
        java.lang.String str28 = complex23.toString();
        double double29 = complex23.real;
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double33 = complex32.abs();
        double double34 = complex32.real;
        code.src.Complex complex37 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex40 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex41 = complex37.multiply(complex40);
        java.lang.String str42 = complex37.toString();
        code.src.Complex complex45 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex45.multiply(complex48);
        code.src.Complex complex50 = complex37.add(complex49);
        code.src.Complex complex53 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex56 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex57 = complex53.multiply(complex56);
        java.lang.String str58 = complex53.toString();
        code.src.Complex complex61 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex64 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex65 = complex61.multiply(complex64);
        code.src.Complex complex66 = complex53.add(complex65);
        code.src.Complex complex67 = complex50.add(complex66);
        java.lang.String str68 = complex50.toString();
        double double69 = complex50.abs();
        double double70 = complex50.real;
        code.src.Complex complex71 = complex32.sub(complex50);
        code.src.Complex complex74 = code.src.Complex.polar(875.1298242002123d, (double) (-1L));
        code.src.Complex complex75 = complex71.sub(complex74);
        code.src.Complex complex76 = complex23.multiply(complex74);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 290.95719905143267d + "'", double16 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 437.56491210010614d + "'", double24 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 280.95719905143267d + "'", double26 == 280.95719905143267d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 280.95719905143267d + "'", double27 == 280.95719905143267d);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(280.95719905143267,437.56491210010614)" + "'", str28, "(280.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 280.95719905143267d + "'", double29 == 280.95719905143267d);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 52.0d + "'", double33 == 52.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 28.09571990514327d + "'", double34 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(10.0,0.0)" + "'", str42, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(10.0,0.0)" + "'", str58, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str68, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 525.4704025737593d + "'", double69 == 525.4704025737593d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 290.95719905143267d + "'", double70 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        code.src.Complex complex2 = new code.src.Complex((double) (byte) 100, (double) 'a');
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        double double10 = complex8.imaginary;
        java.lang.String str11 = complex8.toString();
        code.src.Complex complex12 = complex2.sub(complex8);
        code.src.Complex complex15 = code.src.Complex.polar((double) (byte) 100, 582.9143981028653d);
        complex15.real = 875.1298242002123d;
        complex15.imaginary = (-317.11773840932915d);
        complex15.real = 0.0d;
        code.src.Complex complex22 = complex12.sub(complex15);
        double double23 = complex15.abs();
        double double24 = complex15.abs();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 43.756491210010616d + "'", double10 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str11, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 317.11773840932915d + "'", double23 == 317.11773840932915d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 317.11773840932915d + "'", double24 == 317.11773840932915d);
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        code.src.Complex complex2 = new code.src.Complex(35.014282800023196d, (-54.40211108893698d));
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = new code.src.Complex();
        code.src.Complex complex37 = complex35.add(complex36);
        code.src.Complex complex40 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex43 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex44 = complex40.multiply(complex43);
        java.lang.String str45 = complex40.toString();
        code.src.Complex complex48 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex51 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex52 = complex48.multiply(complex51);
        code.src.Complex complex53 = complex40.add(complex52);
        code.src.Complex complex56 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex59 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex60 = complex56.multiply(complex59);
        java.lang.String str61 = complex56.toString();
        code.src.Complex complex64 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex67 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex68 = complex64.multiply(complex67);
        code.src.Complex complex69 = complex56.add(complex68);
        code.src.Complex complex70 = complex53.add(complex69);
        code.src.Complex complex71 = new code.src.Complex();
        code.src.Complex complex72 = complex70.add(complex71);
        code.src.Complex complex75 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex78 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex79 = complex75.multiply(complex78);
        double double80 = complex78.imaginary;
        java.lang.String str81 = complex78.toString();
        code.src.Complex complex84 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double85 = complex84.abs();
        double double86 = complex84.real;
        code.src.Complex complex87 = complex78.sub(complex84);
        code.src.Complex complex88 = complex71.sub(complex78);
        code.src.Complex complex89 = complex36.add(complex71);
        double double90 = complex89.real;
        double double91 = complex89.real;
        code.src.Complex complex92 = complex2.sub(complex89);
        code.src.Complex complex95 = new code.src.Complex((double) 10L, (double) 1);
        code.src.Complex complex96 = complex89.sub(complex95);
        double double97 = complex95.imaginary;
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "(10.0,0.0)" + "'", str45, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(10.0,0.0)" + "'", str61, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 43.756491210010616d + "'", double80 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str81, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 52.0d + "'", double85 == 52.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 28.09571990514327d + "'", double86 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complex96);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 1.0d + "'", double97 == 1.0d);
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        code.src.Complex complex2 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        java.lang.Class<?> wildcardClass3 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 907.1298242002123d;
        java.lang.Class<?> wildcardClass3 = complex0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        code.src.Complex complex2 = code.src.Complex.polar(1072.0212734397164d, 3171.1773840932915d);
        code.src.Complex complex5 = code.src.Complex.polar((double) 10L, 100.0d);
        code.src.Complex complex8 = new code.src.Complex((double) 100, (double) 10.0f);
        complex8.real = (byte) 1;
        complex8.imaginary = (short) 100;
        code.src.Complex complex13 = new code.src.Complex();
        complex13.real = 1L;
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex34 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex37 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex38 = complex34.multiply(complex37);
        java.lang.String str39 = complex34.toString();
        code.src.Complex complex42 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex45 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex46 = complex42.multiply(complex45);
        code.src.Complex complex47 = complex34.add(complex46);
        code.src.Complex complex48 = complex31.add(complex47);
        code.src.Complex complex49 = complex13.add(complex48);
        double double50 = complex13.imaginary;
        double double51 = complex13.imaginary;
        java.lang.String str52 = complex13.toString();
        code.src.Complex complex53 = complex8.sub(complex13);
        code.src.Complex complex56 = new code.src.Complex((double) (byte) 100, (double) 'a');
        code.src.Complex complex59 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex62 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex63 = complex59.multiply(complex62);
        double double64 = complex62.imaginary;
        java.lang.String str65 = complex62.toString();
        code.src.Complex complex66 = complex56.sub(complex62);
        code.src.Complex complex69 = new code.src.Complex((double) 100, (double) 10.0f);
        complex69.real = (byte) 1;
        code.src.Complex complex72 = complex62.multiply(complex69);
        code.src.Complex complex73 = complex53.sub(complex72);
        code.src.Complex complex74 = complex5.multiply(complex72);
        code.src.Complex complex75 = complex2.multiply(complex72);
        complex75.real = (-438.56491210010614d);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(10.0,0.0)" + "'", str39, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(1.0,0.0)" + "'", str52, "(1.0,0.0)");
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 43.756491210010616d + "'", double64 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str65, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex38 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex41 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex42 = complex38.multiply(complex41);
        code.src.Complex complex43 = complex18.sub(complex38);
        code.src.Complex complex44 = new code.src.Complex();
        code.src.Complex complex47 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex50 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex51 = complex47.multiply(complex50);
        java.lang.String str52 = complex47.toString();
        code.src.Complex complex55 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex58 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex59 = complex55.multiply(complex58);
        code.src.Complex complex60 = complex47.add(complex59);
        code.src.Complex complex63 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex66 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex67 = complex63.multiply(complex66);
        java.lang.String str68 = complex63.toString();
        code.src.Complex complex71 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex74 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex75 = complex71.multiply(complex74);
        code.src.Complex complex76 = complex63.add(complex75);
        code.src.Complex complex77 = complex60.add(complex76);
        double double78 = complex77.real;
        code.src.Complex complex79 = complex44.multiply(complex77);
        code.src.Complex complex80 = complex18.multiply(complex77);
        code.src.Complex complex81 = complex2.sub(complex80);
        double double82 = complex80.real;
        double double83 = complex80.real;
        code.src.Complex complex86 = code.src.Complex.polar((double) (byte) 100, (double) 1.0f);
        code.src.Complex complex87 = complex80.sub(complex86);
        java.lang.String str88 = complex80.toString();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(10.0,0.0)" + "'", str52, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(10.0,0.0)" + "'", str68, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 581.9143981028653d + "'", double78 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + (-213613.9212426372d) + "'", double82 == (-213613.9212426372d));
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + (-213613.9212426372d) + "'", double83 == (-213613.9212426372d));
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "(-213613.9212426372,509250.64491133287)" + "'", str88, "(-213613.9212426372,509250.64491133287)");
    }
}

