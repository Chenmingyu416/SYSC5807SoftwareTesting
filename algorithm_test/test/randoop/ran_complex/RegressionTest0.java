import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0001");
        code.src.Complex complex2 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        code.src.Complex complex3 = null;
        // The following exception was thrown during execution in test generation
        try {
            code.src.Complex complex4 = complex2.multiply(complex3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0003");
        code.src.Complex complex2 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex2.real = 10;
        java.lang.Class<?> wildcardClass5 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0004");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        java.lang.Class<?> wildcardClass16 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0005");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        double double33 = complex15.real;
        java.lang.Class<?> wildcardClass34 = complex15.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 290.95719905143267d + "'", double33 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0006");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.Class<?> wildcardClass7 = complex5.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0007");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        double double37 = complex36.real;
        code.src.Complex complex40 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex43 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex44 = complex40.multiply(complex43);
        code.src.Complex complex45 = complex36.sub(complex43);
        java.lang.Class<?> wildcardClass46 = complex43.getClass();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 582.9143981028653d + "'", double37 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0008");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        double double37 = complex36.real;
        java.lang.Class<?> wildcardClass38 = complex36.getClass();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 582.9143981028653d + "'", double37 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        code.src.Complex complex2 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        double double3 = complex2.abs();
        java.lang.Class<?> wildcardClass4 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0010");
        code.src.Complex complex2 = code.src.Complex.polar((double) (short) -1, (double) (-1L));
        complex2.imaginary = ' ';
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0011");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        double double7 = complex5.imaginary;
        java.lang.String str8 = complex5.toString();
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double12 = complex11.abs();
        double double13 = complex11.real;
        code.src.Complex complex14 = complex5.sub(complex11);
        java.lang.String str15 = complex14.toString();
        java.lang.Class<?> wildcardClass16 = complex14.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 43.756491210010616d + "'", double7 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str8, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 52.0d + "'", double12 == 52.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 28.09571990514327d + "'", double13 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(0.0,0.0)" + "'", str15, "(0.0,0.0)");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0012");
        code.src.Complex complex0 = new code.src.Complex();
        code.src.Complex complex3 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex6 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex7 = complex3.multiply(complex6);
        java.lang.String str8 = complex3.toString();
        code.src.Complex complex11 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex14 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex15 = complex11.multiply(complex14);
        code.src.Complex complex16 = complex3.add(complex15);
        code.src.Complex complex19 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex22 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex23 = complex19.multiply(complex22);
        java.lang.String str24 = complex19.toString();
        code.src.Complex complex27 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex30 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex31 = complex27.multiply(complex30);
        code.src.Complex complex32 = complex19.add(complex31);
        code.src.Complex complex33 = complex16.add(complex32);
        double double34 = complex33.real;
        code.src.Complex complex35 = complex0.multiply(complex33);
        java.lang.Class<?> wildcardClass36 = complex0.getClass();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(10.0,0.0)" + "'", str8, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(10.0,0.0)" + "'", str24, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 581.9143981028653d + "'", double34 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0013");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        double double37 = complex36.real;
        code.src.Complex complex40 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex43 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex44 = complex40.multiply(complex43);
        code.src.Complex complex45 = complex36.sub(complex43);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex43.add(complex48);
        code.src.Complex complex52 = new code.src.Complex((double) 10L, (double) '#');
        code.src.Complex complex53 = complex48.add(complex52);
        complex48.real = 43.756491210010616d;
        java.lang.Class<?> wildcardClass56 = complex48.getClass();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 582.9143981028653d + "'", double37 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0014");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex10.real = 10;
        code.src.Complex complex13 = complex2.multiply(complex10);
        java.lang.Class<?> wildcardClass14 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0015");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex10.real = 10;
        code.src.Complex complex13 = complex2.multiply(complex10);
        double double14 = complex13.imaginary;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0016");
        code.src.Complex complex2 = new code.src.Complex((double) (byte) 100, (double) 'a');
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        double double10 = complex8.imaginary;
        java.lang.String str11 = complex8.toString();
        code.src.Complex complex12 = complex2.sub(complex8);
        java.lang.Class<?> wildcardClass13 = complex12.getClass();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 43.756491210010616d + "'", double10 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str11, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0017");
        code.src.Complex complex2 = new code.src.Complex((double) (-1L), (double) 0.0f);
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0018");
        code.src.Complex complex2 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        double double3 = complex2.imaginary;
        java.lang.Class<?> wildcardClass4 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-317.11773840932915d) + "'", double3 == (-317.11773840932915d));
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0019");
        code.src.Complex complex2 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        double double3 = complex2.abs();
        code.src.Complex complex6 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str7 = complex6.toString();
        code.src.Complex complex8 = complex2.multiply(complex6);
        java.lang.Class<?> wildcardClass9 = complex6.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(100.0,10.0)" + "'", str7, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0020");
        code.src.Complex complex2 = new code.src.Complex((double) (byte) 100, (double) 'a');
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        double double10 = complex8.imaginary;
        java.lang.String str11 = complex8.toString();
        code.src.Complex complex12 = complex2.sub(complex8);
        java.lang.Class<?> wildcardClass13 = complex8.getClass();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 43.756491210010616d + "'", double10 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str11, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0021");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        double double37 = complex36.real;
        code.src.Complex complex40 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex43 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex44 = complex40.multiply(complex43);
        code.src.Complex complex45 = complex36.sub(complex43);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex43.add(complex48);
        code.src.Complex complex52 = new code.src.Complex((double) 10L, (double) '#');
        code.src.Complex complex53 = complex48.add(complex52);
        code.src.Complex complex56 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        double double57 = complex56.abs();
        code.src.Complex complex60 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str61 = complex60.toString();
        code.src.Complex complex62 = complex56.multiply(complex60);
        code.src.Complex complex63 = complex52.add(complex56);
        java.lang.Class<?> wildcardClass64 = complex52.getClass();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 582.9143981028653d + "'", double37 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(100.0,10.0)" + "'", str61, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0022");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        double double37 = complex36.real;
        code.src.Complex complex38 = null;
        // The following exception was thrown during execution in test generation
        try {
            code.src.Complex complex39 = complex36.multiply(complex38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 582.9143981028653d + "'", double37 == 582.9143981028653d);
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0023");
        code.src.Complex complex2 = new code.src.Complex((double) 1.0f, (double) 0);
        complex2.imaginary = (short) 1;
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0024");
        code.src.Complex complex2 = code.src.Complex.polar(437.56491210010614d, 35.0d);
        java.lang.Class<?> wildcardClass3 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0025");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        complex2.imaginary = (-1.0f);
        java.lang.Class<?> wildcardClass9 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0026");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        complex2.real = (byte) 1;
        java.lang.Class<?> wildcardClass5 = complex2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0027");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        code.src.Complex complex33 = new code.src.Complex();
        code.src.Complex complex34 = complex32.add(complex33);
        code.src.Complex complex37 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex40 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex41 = complex37.multiply(complex40);
        java.lang.String str42 = complex37.toString();
        code.src.Complex complex45 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex45.multiply(complex48);
        code.src.Complex complex50 = complex37.add(complex49);
        code.src.Complex complex53 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex56 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex57 = complex53.multiply(complex56);
        java.lang.String str58 = complex53.toString();
        code.src.Complex complex61 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex64 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex65 = complex61.multiply(complex64);
        code.src.Complex complex66 = complex53.add(complex65);
        code.src.Complex complex67 = complex50.add(complex66);
        code.src.Complex complex68 = new code.src.Complex();
        code.src.Complex complex69 = complex67.add(complex68);
        code.src.Complex complex72 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex75 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex76 = complex72.multiply(complex75);
        double double77 = complex75.imaginary;
        java.lang.String str78 = complex75.toString();
        code.src.Complex complex81 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double82 = complex81.abs();
        double double83 = complex81.real;
        code.src.Complex complex84 = complex75.sub(complex81);
        code.src.Complex complex85 = complex68.sub(complex75);
        code.src.Complex complex86 = complex33.add(complex68);
        complex33.imaginary = 10L;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(10.0,0.0)" + "'", str42, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(10.0,0.0)" + "'", str58, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 43.756491210010616d + "'", double77 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str78, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 52.0d + "'", double82 == 52.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 28.09571990514327d + "'", double83 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        code.src.Complex complex9 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex12 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex13 = complex9.multiply(complex12);
        java.lang.String str14 = complex9.toString();
        code.src.Complex complex17 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex20 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex21 = complex17.multiply(complex20);
        code.src.Complex complex22 = complex9.add(complex21);
        code.src.Complex complex25 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex28 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex29 = complex25.multiply(complex28);
        java.lang.String str30 = complex25.toString();
        code.src.Complex complex33 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex36 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex37 = complex33.multiply(complex36);
        code.src.Complex complex38 = complex25.add(complex37);
        code.src.Complex complex39 = complex22.add(complex38);
        code.src.Complex complex42 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex45 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex46 = complex42.multiply(complex45);
        code.src.Complex complex47 = complex22.sub(complex42);
        code.src.Complex complex48 = complex5.add(complex47);
        code.src.Complex complex49 = null;
        // The following exception was thrown during execution in test generation
        try {
            code.src.Complex complex50 = complex5.add(complex49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(10.0,0.0)" + "'", str14, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(10.0,0.0)" + "'", str30, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0029");
        code.src.Complex complex2 = new code.src.Complex(35.0d, (double) (byte) -1);
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0030");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        complex2.real = (byte) 1;
        complex2.imaginary = 10L;
        java.lang.Class<?> wildcardClass7 = complex2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0031");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        double double33 = complex15.real;
        double double34 = complex15.real;
        code.src.Complex complex37 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex40 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex41 = complex37.multiply(complex40);
        java.lang.String str42 = complex37.toString();
        code.src.Complex complex45 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex45.multiply(complex48);
        code.src.Complex complex50 = complex37.add(complex49);
        code.src.Complex complex53 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex56 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex57 = complex53.multiply(complex56);
        java.lang.String str58 = complex53.toString();
        code.src.Complex complex61 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex64 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex65 = complex61.multiply(complex64);
        code.src.Complex complex66 = complex53.add(complex65);
        code.src.Complex complex67 = complex50.add(complex66);
        code.src.Complex complex68 = complex15.sub(complex50);
        complex68.imaginary = 1.0f;
        double double71 = complex68.imaginary;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 290.95719905143267d + "'", double33 == 290.95719905143267d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 290.95719905143267d + "'", double34 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(10.0,0.0)" + "'", str42, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(10.0,0.0)" + "'", str58, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 1.0d + "'", double71 == 1.0d);
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0032");
        code.src.Complex complex2 = new code.src.Complex((double) 1, 28.09571990514327d);
        code.src.Complex complex5 = new code.src.Complex((double) (short) 0, (double) ' ');
        code.src.Complex complex6 = new code.src.Complex();
        complex6.real = 1L;
        code.src.Complex complex11 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex14 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex15 = complex11.multiply(complex14);
        java.lang.String str16 = complex11.toString();
        code.src.Complex complex19 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex22 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex23 = complex19.multiply(complex22);
        code.src.Complex complex24 = complex11.add(complex23);
        code.src.Complex complex27 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex30 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex31 = complex27.multiply(complex30);
        java.lang.String str32 = complex27.toString();
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        code.src.Complex complex40 = complex27.add(complex39);
        code.src.Complex complex41 = complex24.add(complex40);
        code.src.Complex complex42 = complex6.add(complex41);
        code.src.Complex complex43 = complex5.add(complex41);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double47 = complex46.abs();
        code.src.Complex complex48 = complex5.add(complex46);
        code.src.Complex complex49 = complex2.add(complex5);
        java.lang.Class<?> wildcardClass50 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(10.0,0.0)" + "'", str16, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(10.0,0.0)" + "'", str32, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 52.0d + "'", double47 == 52.0d);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0033");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        double double37 = complex36.real;
        code.src.Complex complex40 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex43 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex44 = complex40.multiply(complex43);
        code.src.Complex complex45 = complex36.sub(complex43);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex43.add(complex48);
        code.src.Complex complex52 = new code.src.Complex((double) 10L, (double) '#');
        code.src.Complex complex53 = complex48.add(complex52);
        complex48.real = 43.756491210010616d;
        complex48.imaginary = 100.0d;
        code.src.Complex complex60 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        double double61 = complex60.abs();
        code.src.Complex complex62 = complex48.add(complex60);
        java.lang.Class<?> wildcardClass63 = complex60.getClass();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 582.9143981028653d + "'", double37 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0034");
        code.src.Complex complex2 = new code.src.Complex((double) 1, 28.09571990514327d);
        code.src.Complex complex3 = null;
        // The following exception was thrown during execution in test generation
        try {
            code.src.Complex complex4 = complex2.add(complex3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0035");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex34 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex37 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex38 = complex34.multiply(complex37);
        java.lang.String str39 = complex34.toString();
        code.src.Complex complex42 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex45 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex46 = complex42.multiply(complex45);
        code.src.Complex complex47 = complex34.add(complex46);
        code.src.Complex complex48 = complex31.add(complex47);
        java.lang.String str49 = complex31.toString();
        double double50 = complex31.abs();
        code.src.Complex complex51 = complex15.multiply(complex31);
        double double52 = complex31.abs();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(10.0,0.0)" + "'", str39, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str49, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 525.4704025737593d + "'", double50 == 525.4704025737593d);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 525.4704025737593d + "'", double52 == 525.4704025737593d);
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0036");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        double double37 = complex36.real;
        code.src.Complex complex40 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex43 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex44 = complex40.multiply(complex43);
        code.src.Complex complex45 = complex36.sub(complex43);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex43.add(complex48);
        java.lang.Class<?> wildcardClass50 = complex49.getClass();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 582.9143981028653d + "'", double37 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0037");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        double double37 = complex36.real;
        code.src.Complex complex40 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex43 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex44 = complex40.multiply(complex43);
        code.src.Complex complex45 = complex36.sub(complex43);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex43.add(complex48);
        code.src.Complex complex52 = new code.src.Complex((double) 10L, (double) '#');
        code.src.Complex complex53 = complex48.add(complex52);
        complex48.real = 43.756491210010616d;
        complex48.imaginary = 100.0d;
        code.src.Complex complex60 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        double double61 = complex60.abs();
        code.src.Complex complex62 = complex48.add(complex60);
        java.lang.Class<?> wildcardClass63 = complex48.getClass();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 582.9143981028653d + "'", double37 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0038");
        code.src.Complex complex2 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex2.imaginary = (short) 0;
        complex2.imaginary = 100.0f;
        code.src.Complex complex9 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str10 = complex9.toString();
        code.src.Complex complex13 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        code.src.Complex complex14 = complex9.sub(complex13);
        code.src.Complex complex15 = complex2.multiply(complex14);
        complex2.real = 100.0f;
        java.lang.Class<?> wildcardClass18 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(100.0,10.0)" + "'", str10, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0039");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex38 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex41 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex42 = complex38.multiply(complex41);
        code.src.Complex complex43 = complex18.sub(complex38);
        code.src.Complex complex44 = new code.src.Complex();
        code.src.Complex complex47 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex50 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex51 = complex47.multiply(complex50);
        java.lang.String str52 = complex47.toString();
        code.src.Complex complex55 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex58 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex59 = complex55.multiply(complex58);
        code.src.Complex complex60 = complex47.add(complex59);
        code.src.Complex complex63 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex66 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex67 = complex63.multiply(complex66);
        java.lang.String str68 = complex63.toString();
        code.src.Complex complex71 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex74 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex75 = complex71.multiply(complex74);
        code.src.Complex complex76 = complex63.add(complex75);
        code.src.Complex complex77 = complex60.add(complex76);
        double double78 = complex77.real;
        code.src.Complex complex79 = complex44.multiply(complex77);
        code.src.Complex complex80 = complex18.multiply(complex77);
        code.src.Complex complex81 = complex2.sub(complex80);
        java.lang.String str82 = complex2.toString();
        java.lang.Class<?> wildcardClass83 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(10.0,0.0)" + "'", str52, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(10.0,0.0)" + "'", str68, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 581.9143981028653d + "'", double78 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "(100.0,10.0)" + "'", str82, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0040");
        code.src.Complex complex2 = new code.src.Complex(100.0d, 0.0d);
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex37 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex40 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex41 = complex37.multiply(complex40);
        java.lang.String str42 = complex37.toString();
        code.src.Complex complex45 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex45.multiply(complex48);
        code.src.Complex complex50 = complex37.add(complex49);
        code.src.Complex complex51 = complex34.add(complex50);
        java.lang.String str52 = complex34.toString();
        double double53 = complex34.abs();
        code.src.Complex complex54 = complex18.multiply(complex34);
        code.src.Complex complex55 = complex2.add(complex54);
        java.lang.Class<?> wildcardClass56 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(10.0,0.0)" + "'", str42, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str52, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 525.4704025737593d + "'", double53 == 525.4704025737593d);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0041");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.Class<?> wildcardClass3 = complex2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0042");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        code.src.Complex complex40 = complex15.sub(complex35);
        double double41 = complex15.abs();
        code.src.Complex complex42 = null;
        // The following exception was thrown during execution in test generation
        try {
            code.src.Complex complex43 = complex15.multiply(complex42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 525.4704025737593d + "'", double41 == 525.4704025737593d);
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0043");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        code.src.Complex complex40 = complex15.sub(complex35);
        double double41 = complex40.imaginary;
        complex40.real = 290.95719905143267d;
        double double44 = complex40.imaginary;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 437.56491210010614d + "'", double41 == 437.56491210010614d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 437.56491210010614d + "'", double44 == 437.56491210010614d);
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0044");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        complex2.real = (byte) 1;
        complex2.imaginary = (short) 100;
        code.src.Complex complex9 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex12 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex13 = complex9.multiply(complex12);
        java.lang.String str14 = complex9.toString();
        code.src.Complex complex17 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex20 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex21 = complex17.multiply(complex20);
        code.src.Complex complex22 = complex9.add(complex21);
        double double23 = complex22.real;
        code.src.Complex complex26 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex27 = complex22.multiply(complex26);
        code.src.Complex complex28 = complex2.multiply(complex22);
        java.lang.Class<?> wildcardClass29 = complex22.getClass();
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(10.0,0.0)" + "'", str14, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 290.95719905143267d + "'", double23 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0045");
        code.src.Complex complex2 = code.src.Complex.polar((double) 1L, (double) 100);
        java.lang.Class<?> wildcardClass3 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0046");
        code.src.Complex complex2 = code.src.Complex.polar(907.1298242002123d, 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        code.src.Complex complex2 = code.src.Complex.polar(28.09571990514327d, (double) 0);
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        double double40 = complex39.real;
        code.src.Complex complex41 = complex2.add(complex39);
        java.lang.String str42 = complex41.toString();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 582.9143981028653d + "'", double40 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(611.0101180080086,875.1298242002123)" + "'", str42, "(611.0101180080086,875.1298242002123)");
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0048");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        code.src.Complex complex33 = new code.src.Complex();
        code.src.Complex complex34 = complex32.add(complex33);
        code.src.Complex complex37 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex40 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex41 = complex37.multiply(complex40);
        java.lang.String str42 = complex37.toString();
        code.src.Complex complex45 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex45.multiply(complex48);
        code.src.Complex complex50 = complex37.add(complex49);
        code.src.Complex complex53 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex56 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex57 = complex53.multiply(complex56);
        java.lang.String str58 = complex53.toString();
        code.src.Complex complex61 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex64 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex65 = complex61.multiply(complex64);
        code.src.Complex complex66 = complex53.add(complex65);
        code.src.Complex complex67 = complex50.add(complex66);
        code.src.Complex complex68 = new code.src.Complex();
        code.src.Complex complex69 = complex67.add(complex68);
        code.src.Complex complex72 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex75 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex76 = complex72.multiply(complex75);
        double double77 = complex75.imaginary;
        java.lang.String str78 = complex75.toString();
        code.src.Complex complex81 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double82 = complex81.abs();
        double double83 = complex81.real;
        code.src.Complex complex84 = complex75.sub(complex81);
        code.src.Complex complex85 = complex68.sub(complex75);
        code.src.Complex complex86 = complex33.add(complex68);
        java.lang.Class<?> wildcardClass87 = complex68.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(10.0,0.0)" + "'", str42, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(10.0,0.0)" + "'", str58, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 43.756491210010616d + "'", double77 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str78, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 52.0d + "'", double82 == 52.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 28.09571990514327d + "'", double83 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0049");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        double double33 = complex15.real;
        double double34 = complex15.real;
        code.src.Complex complex37 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex40 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex41 = complex37.multiply(complex40);
        java.lang.String str42 = complex37.toString();
        code.src.Complex complex45 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex45.multiply(complex48);
        code.src.Complex complex50 = complex37.add(complex49);
        code.src.Complex complex53 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex56 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex57 = complex53.multiply(complex56);
        java.lang.String str58 = complex53.toString();
        code.src.Complex complex61 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex64 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex65 = complex61.multiply(complex64);
        code.src.Complex complex66 = complex53.add(complex65);
        code.src.Complex complex67 = complex50.add(complex66);
        code.src.Complex complex68 = complex15.sub(complex50);
        double double69 = complex68.imaginary;
        complex68.imaginary = 0.0d;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 290.95719905143267d + "'", double33 == 290.95719905143267d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 290.95719905143267d + "'", double34 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(10.0,0.0)" + "'", str42, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(10.0,0.0)" + "'", str58, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0050");
        code.src.Complex complex2 = new code.src.Complex(100.0d, 0.0d);
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex37 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex40 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex41 = complex37.multiply(complex40);
        java.lang.String str42 = complex37.toString();
        code.src.Complex complex45 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex45.multiply(complex48);
        code.src.Complex complex50 = complex37.add(complex49);
        code.src.Complex complex51 = complex34.add(complex50);
        java.lang.String str52 = complex34.toString();
        double double53 = complex34.abs();
        code.src.Complex complex54 = complex18.multiply(complex34);
        code.src.Complex complex55 = complex2.add(complex54);
        java.lang.String str56 = complex2.toString();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(10.0,0.0)" + "'", str42, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str52, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 525.4704025737593d + "'", double53 == 525.4704025737593d);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "(100.0,0.0)" + "'", str56, "(100.0,0.0)");
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        code.src.Complex complex2 = new code.src.Complex(10.04987562112089d, (double) '#');
        java.lang.Class<?> wildcardClass3 = complex2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0052");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        code.src.Complex complex9 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex12 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex13 = complex9.multiply(complex12);
        java.lang.String str14 = complex9.toString();
        code.src.Complex complex17 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex20 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex21 = complex17.multiply(complex20);
        code.src.Complex complex22 = complex9.add(complex21);
        code.src.Complex complex25 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex28 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex29 = complex25.multiply(complex28);
        java.lang.String str30 = complex25.toString();
        code.src.Complex complex33 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex36 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex37 = complex33.multiply(complex36);
        code.src.Complex complex38 = complex25.add(complex37);
        code.src.Complex complex39 = complex22.add(complex38);
        code.src.Complex complex42 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex45 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex46 = complex42.multiply(complex45);
        code.src.Complex complex47 = complex22.sub(complex42);
        code.src.Complex complex48 = complex5.add(complex47);
        complex47.imaginary = 36.40054944640259d;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(10.0,0.0)" + "'", str14, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(10.0,0.0)" + "'", str30, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0053");
        code.src.Complex complex2 = code.src.Complex.polar((-317.11773840932915d), (double) (-1.0f));
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        double double40 = complex39.real;
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        code.src.Complex complex48 = complex39.sub(complex46);
        double double49 = complex39.imaginary;
        code.src.Complex complex50 = complex2.sub(complex39);
        java.lang.Class<?> wildcardClass51 = complex50.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 582.9143981028653d + "'", double40 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 875.1298242002123d + "'", double49 == 875.1298242002123d);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0054");
        code.src.Complex complex2 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        double double40 = complex39.real;
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        code.src.Complex complex48 = complex39.sub(complex46);
        double double49 = complex39.imaginary;
        code.src.Complex complex50 = complex2.sub(complex39);
        double double51 = complex39.imaginary;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 582.9143981028653d + "'", double40 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 875.1298242002123d + "'", double49 == 875.1298242002123d);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 875.1298242002123d + "'", double51 == 875.1298242002123d);
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0055");
        code.src.Complex complex2 = code.src.Complex.polar((double) (byte) 100, 582.9143981028653d);
        complex2.real = 875.1298242002123d;
        complex2.imaginary = (-317.11773840932915d);
        code.src.Complex complex9 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex9.real = 10;
        code.src.Complex complex12 = complex2.sub(complex9);
        java.lang.Class<?> wildcardClass13 = complex9.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0056");
        code.src.Complex complex2 = new code.src.Complex((double) 0L, (double) 1.0f);
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0057");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        complex2.real = (byte) 1;
        complex2.imaginary = (short) 100;
        code.src.Complex complex9 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex12 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex13 = complex9.multiply(complex12);
        java.lang.String str14 = complex9.toString();
        code.src.Complex complex17 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex20 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex21 = complex17.multiply(complex20);
        code.src.Complex complex22 = complex9.add(complex21);
        double double23 = complex22.real;
        code.src.Complex complex26 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex27 = complex22.multiply(complex26);
        code.src.Complex complex28 = complex2.multiply(complex22);
        complex28.imaginary = (-1.0f);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(10.0,0.0)" + "'", str14, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 290.95719905143267d + "'", double23 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0058");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 100, 43.756491210010616d);
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        double double40 = complex39.real;
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        code.src.Complex complex48 = complex39.sub(complex46);
        code.src.Complex complex49 = complex2.add(complex46);
        code.src.Complex complex52 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex55 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex56 = complex52.multiply(complex55);
        java.lang.String str57 = complex52.toString();
        code.src.Complex complex60 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex63 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex64 = complex60.multiply(complex63);
        code.src.Complex complex65 = complex52.add(complex64);
        code.src.Complex complex68 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex71 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex72 = complex68.multiply(complex71);
        java.lang.String str73 = complex68.toString();
        code.src.Complex complex76 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex79 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex80 = complex76.multiply(complex79);
        code.src.Complex complex81 = complex68.add(complex80);
        code.src.Complex complex82 = complex65.add(complex81);
        code.src.Complex complex85 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex88 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex89 = complex85.multiply(complex88);
        code.src.Complex complex90 = complex65.sub(complex85);
        code.src.Complex complex91 = complex49.multiply(complex65);
        java.lang.Class<?> wildcardClass92 = complex91.getClass();
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 582.9143981028653d + "'", double40 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(10.0,0.0)" + "'", str57, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(10.0,0.0)" + "'", str73, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0059");
        code.src.Complex complex2 = code.src.Complex.polar(0.0d, (double) 1.0f);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0060");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        code.src.Complex complex40 = complex15.sub(complex35);
        double double41 = complex40.imaginary;
        complex40.real = 290.95719905143267d;
        java.lang.Class<?> wildcardClass44 = complex40.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 437.56491210010614d + "'", double41 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0061");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 100, 43.756491210010616d);
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        double double40 = complex39.real;
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        code.src.Complex complex48 = complex39.sub(complex46);
        code.src.Complex complex49 = complex2.add(complex46);
        code.src.Complex complex52 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex55 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex56 = complex52.multiply(complex55);
        java.lang.String str57 = complex52.toString();
        code.src.Complex complex60 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex63 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex64 = complex60.multiply(complex63);
        code.src.Complex complex65 = complex52.add(complex64);
        code.src.Complex complex68 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex71 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex72 = complex68.multiply(complex71);
        java.lang.String str73 = complex68.toString();
        code.src.Complex complex76 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex79 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex80 = complex76.multiply(complex79);
        code.src.Complex complex81 = complex68.add(complex80);
        code.src.Complex complex82 = complex65.add(complex81);
        code.src.Complex complex85 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex88 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex89 = complex85.multiply(complex88);
        code.src.Complex complex90 = complex65.sub(complex85);
        code.src.Complex complex91 = complex49.multiply(complex65);
        complex65.real = 437.56491210010614d;
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 582.9143981028653d + "'", double40 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(10.0,0.0)" + "'", str57, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(10.0,0.0)" + "'", str73, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0062");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        double double37 = complex0.imaginary;
        double double38 = complex0.imaginary;
        code.src.Complex complex41 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex44 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex45 = complex41.multiply(complex44);
        java.lang.String str46 = complex41.toString();
        code.src.Complex complex49 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex52 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex53 = complex49.multiply(complex52);
        code.src.Complex complex54 = complex41.add(complex53);
        code.src.Complex complex57 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex60 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex61 = complex57.multiply(complex60);
        java.lang.String str62 = complex57.toString();
        code.src.Complex complex65 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex68 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex69 = complex65.multiply(complex68);
        code.src.Complex complex70 = complex57.add(complex69);
        code.src.Complex complex71 = complex54.add(complex70);
        code.src.Complex complex72 = new code.src.Complex();
        code.src.Complex complex73 = complex71.add(complex72);
        code.src.Complex complex76 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex79 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex80 = complex76.multiply(complex79);
        double double81 = complex79.imaginary;
        java.lang.String str82 = complex79.toString();
        code.src.Complex complex85 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double86 = complex85.abs();
        double double87 = complex85.real;
        code.src.Complex complex88 = complex79.sub(complex85);
        code.src.Complex complex89 = complex72.sub(complex79);
        code.src.Complex complex90 = complex0.add(complex79);
        java.lang.Class<?> wildcardClass91 = complex90.getClass();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(10.0,0.0)" + "'", str46, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(10.0,0.0)" + "'", str62, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 43.756491210010616d + "'", double81 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str82, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 52.0d + "'", double86 == 52.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 28.09571990514327d + "'", double87 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0063");
        code.src.Complex complex2 = code.src.Complex.polar((double) (byte) 100, 582.9143981028653d);
        complex2.real = 875.1298242002123d;
        complex2.imaginary = (-317.11773840932915d);
        complex2.real = 875.1298242002123d;
        java.lang.Class<?> wildcardClass9 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0064");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        double double33 = complex15.real;
        code.src.Complex complex36 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        code.src.Complex complex37 = complex15.sub(complex36);
        java.lang.Class<?> wildcardClass38 = complex36.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 290.95719905143267d + "'", double33 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0065");
        code.src.Complex complex2 = code.src.Complex.polar((double) 1L, (double) 100);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.add(complex5);
        java.lang.Class<?> wildcardClass7 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0066");
        code.src.Complex complex2 = new code.src.Complex((double) (byte) 100, (double) 'a');
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        double double10 = complex8.imaginary;
        java.lang.String str11 = complex8.toString();
        code.src.Complex complex12 = complex2.sub(complex8);
        complex2.real = 1051.4948429356753d;
        java.lang.String str15 = complex2.toString();
        code.src.Complex complex16 = null;
        // The following exception was thrown during execution in test generation
        try {
            code.src.Complex complex17 = complex2.add(complex16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 43.756491210010616d + "'", double10 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str11, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(1051.4948429356753,97.0)" + "'", str15, "(1051.4948429356753,97.0)");
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0067");
        code.src.Complex complex2 = new code.src.Complex(1.0d, 28.09571990514327d);
        code.src.Complex complex5 = new code.src.Complex((double) (short) 0, (double) ' ');
        code.src.Complex complex6 = new code.src.Complex();
        complex6.real = 1L;
        code.src.Complex complex11 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex14 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex15 = complex11.multiply(complex14);
        java.lang.String str16 = complex11.toString();
        code.src.Complex complex19 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex22 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex23 = complex19.multiply(complex22);
        code.src.Complex complex24 = complex11.add(complex23);
        code.src.Complex complex27 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex30 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex31 = complex27.multiply(complex30);
        java.lang.String str32 = complex27.toString();
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        code.src.Complex complex40 = complex27.add(complex39);
        code.src.Complex complex41 = complex24.add(complex40);
        code.src.Complex complex42 = complex6.add(complex41);
        code.src.Complex complex43 = complex5.add(complex41);
        code.src.Complex complex46 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex49 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex50 = complex46.multiply(complex49);
        double double51 = complex49.imaginary;
        java.lang.String str52 = complex49.toString();
        code.src.Complex complex55 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double56 = complex55.abs();
        double double57 = complex55.real;
        code.src.Complex complex58 = complex49.sub(complex55);
        code.src.Complex complex59 = complex41.sub(complex49);
        code.src.Complex complex60 = new code.src.Complex();
        complex60.real = 1L;
        code.src.Complex complex65 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex68 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex69 = complex65.multiply(complex68);
        java.lang.String str70 = complex65.toString();
        code.src.Complex complex73 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex76 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex77 = complex73.multiply(complex76);
        code.src.Complex complex78 = complex65.add(complex77);
        code.src.Complex complex81 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex84 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex85 = complex81.multiply(complex84);
        java.lang.String str86 = complex81.toString();
        code.src.Complex complex89 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex92 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex93 = complex89.multiply(complex92);
        code.src.Complex complex94 = complex81.add(complex93);
        code.src.Complex complex95 = complex78.add(complex94);
        code.src.Complex complex96 = complex60.add(complex95);
        double double97 = complex60.imaginary;
        code.src.Complex complex98 = complex59.add(complex60);
        code.src.Complex complex99 = complex2.multiply(complex59);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(10.0,0.0)" + "'", str16, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(10.0,0.0)" + "'", str32, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 43.756491210010616d + "'", double51 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str52, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 52.0d + "'", double56 == 52.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 28.09571990514327d + "'", double57 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(10.0,0.0)" + "'", str70, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "(10.0,0.0)" + "'", str86, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertNotNull(complex94);
        org.junit.Assert.assertNotNull(complex95);
        org.junit.Assert.assertNotNull(complex96);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 0.0d + "'", double97 == 0.0d);
        org.junit.Assert.assertNotNull(complex98);
        org.junit.Assert.assertNotNull(complex99);
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0068");
        code.src.Complex complex2 = code.src.Complex.polar(481.32140331011675d, 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0069");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        complex2.real = (byte) 1;
        complex2.imaginary = 10L;
        double double7 = complex2.abs();
        double double8 = complex2.imaginary;
        java.lang.Class<?> wildcardClass9 = complex2.getClass();
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.04987562112089d + "'", double7 == 10.04987562112089d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0070");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        double double37 = complex36.real;
        code.src.Complex complex40 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex43 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex44 = complex40.multiply(complex43);
        code.src.Complex complex45 = complex36.sub(complex43);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex43.add(complex48);
        code.src.Complex complex52 = new code.src.Complex((double) 10L, (double) '#');
        code.src.Complex complex53 = complex48.add(complex52);
        java.lang.String str54 = complex53.toString();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 582.9143981028653d + "'", double37 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(38.09571990514327,78.75649121001061)" + "'", str54, "(38.09571990514327,78.75649121001061)");
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0071");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        double double7 = complex5.imaginary;
        java.lang.String str8 = complex5.toString();
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double12 = complex11.abs();
        double double13 = complex11.real;
        code.src.Complex complex14 = complex5.sub(complex11);
        java.lang.String str15 = complex14.toString();
        code.src.Complex complex16 = new code.src.Complex();
        complex16.real = 1L;
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex37 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex40 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex41 = complex37.multiply(complex40);
        java.lang.String str42 = complex37.toString();
        code.src.Complex complex45 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex45.multiply(complex48);
        code.src.Complex complex50 = complex37.add(complex49);
        code.src.Complex complex51 = complex34.add(complex50);
        code.src.Complex complex52 = complex16.add(complex51);
        double double53 = complex52.real;
        code.src.Complex complex56 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex59 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex60 = complex56.multiply(complex59);
        code.src.Complex complex61 = complex52.sub(complex59);
        code.src.Complex complex64 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex65 = complex59.add(complex64);
        code.src.Complex complex68 = new code.src.Complex((double) 10L, (double) '#');
        code.src.Complex complex69 = complex64.add(complex68);
        code.src.Complex complex70 = complex14.sub(complex68);
        java.lang.Class<?> wildcardClass71 = complex68.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 43.756491210010616d + "'", double7 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str8, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 52.0d + "'", double12 == 52.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 28.09571990514327d + "'", double13 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(0.0,0.0)" + "'", str15, "(0.0,0.0)");
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(10.0,0.0)" + "'", str42, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 582.9143981028653d + "'", double53 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0072");
        code.src.Complex complex2 = code.src.Complex.polar((double) (short) 0, (double) (byte) 10);
        code.src.Complex complex3 = new code.src.Complex();
        code.src.Complex complex6 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex9 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex10 = complex6.multiply(complex9);
        java.lang.String str11 = complex6.toString();
        code.src.Complex complex14 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex17 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex18 = complex14.multiply(complex17);
        code.src.Complex complex19 = complex6.add(complex18);
        code.src.Complex complex22 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex25 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex26 = complex22.multiply(complex25);
        java.lang.String str27 = complex22.toString();
        code.src.Complex complex30 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex33 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex34 = complex30.multiply(complex33);
        code.src.Complex complex35 = complex22.add(complex34);
        code.src.Complex complex36 = complex19.add(complex35);
        double double37 = complex36.real;
        code.src.Complex complex38 = complex3.multiply(complex36);
        double double39 = complex36.abs();
        code.src.Complex complex40 = complex2.sub(complex36);
        code.src.Complex complex43 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex43.imaginary = (short) 0;
        complex43.imaginary = 100.0f;
        code.src.Complex complex50 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str51 = complex50.toString();
        code.src.Complex complex54 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        code.src.Complex complex55 = complex50.sub(complex54);
        code.src.Complex complex56 = complex43.multiply(complex55);
        java.lang.String str57 = complex55.toString();
        double double58 = complex55.real;
        code.src.Complex complex59 = complex2.add(complex55);
        java.lang.Class<?> wildcardClass60 = complex55.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(10.0,0.0)" + "'", str11, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(10.0,0.0)" + "'", str27, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 581.9143981028653d + "'", double37 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1050.9408051475186d + "'", double39 == 1050.9408051475186d);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "(100.0,10.0)" + "'", str51, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(589.1068753368511,327.11773840932915)" + "'", str57, "(589.1068753368511,327.11773840932915)");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 589.1068753368511d + "'", double58 == 589.1068753368511d);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0073");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex38 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex41 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex42 = complex38.multiply(complex41);
        code.src.Complex complex43 = complex18.sub(complex38);
        code.src.Complex complex44 = new code.src.Complex();
        code.src.Complex complex47 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex50 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex51 = complex47.multiply(complex50);
        java.lang.String str52 = complex47.toString();
        code.src.Complex complex55 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex58 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex59 = complex55.multiply(complex58);
        code.src.Complex complex60 = complex47.add(complex59);
        code.src.Complex complex63 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex66 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex67 = complex63.multiply(complex66);
        java.lang.String str68 = complex63.toString();
        code.src.Complex complex71 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex74 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex75 = complex71.multiply(complex74);
        code.src.Complex complex76 = complex63.add(complex75);
        code.src.Complex complex77 = complex60.add(complex76);
        double double78 = complex77.real;
        code.src.Complex complex79 = complex44.multiply(complex77);
        code.src.Complex complex80 = complex18.multiply(complex77);
        code.src.Complex complex81 = complex2.sub(complex80);
        double double82 = complex80.real;
        java.lang.String str83 = complex80.toString();
        java.lang.Class<?> wildcardClass84 = complex80.getClass();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(10.0,0.0)" + "'", str52, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(10.0,0.0)" + "'", str68, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 581.9143981028653d + "'", double78 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + (-213613.9212426372d) + "'", double82 == (-213613.9212426372d));
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(-213613.9212426372,509250.64491133287)" + "'", str83, "(-213613.9212426372,509250.64491133287)");
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0074");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        code.src.Complex complex40 = complex15.sub(complex35);
        java.lang.String str41 = complex35.toString();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(10.0,0.0)" + "'", str41, "(10.0,0.0)");
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0075");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 1, 290.95719905143267d);
        java.lang.String str3 = complex2.toString();
        code.src.Complex complex6 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double7 = complex6.abs();
        double double8 = complex6.real;
        code.src.Complex complex11 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex14 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex15 = complex11.multiply(complex14);
        java.lang.String str16 = complex11.toString();
        code.src.Complex complex19 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex22 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex23 = complex19.multiply(complex22);
        code.src.Complex complex24 = complex11.add(complex23);
        code.src.Complex complex27 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex30 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex31 = complex27.multiply(complex30);
        java.lang.String str32 = complex27.toString();
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        code.src.Complex complex40 = complex27.add(complex39);
        code.src.Complex complex41 = complex24.add(complex40);
        java.lang.String str42 = complex24.toString();
        double double43 = complex24.abs();
        double double44 = complex24.real;
        code.src.Complex complex45 = complex6.sub(complex24);
        code.src.Complex complex46 = complex2.add(complex6);
        java.lang.Class<?> wildcardClass47 = complex2.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "(1.0,290.95719905143267)" + "'", str3, "(1.0,290.95719905143267)");
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 28.09571990514327d + "'", double8 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(10.0,0.0)" + "'", str16, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(10.0,0.0)" + "'", str32, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str42, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 525.4704025737593d + "'", double43 == 525.4704025737593d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 290.95719905143267d + "'", double44 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0076");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        double double37 = complex36.real;
        code.src.Complex complex40 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex43 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex44 = complex40.multiply(complex43);
        code.src.Complex complex45 = complex36.sub(complex43);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex43.add(complex48);
        code.src.Complex complex52 = new code.src.Complex((double) 10L, (double) '#');
        code.src.Complex complex53 = complex48.add(complex52);
        complex48.real = 43.756491210010616d;
        complex48.imaginary = 100.0d;
        code.src.Complex complex60 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        double double61 = complex60.abs();
        code.src.Complex complex62 = complex48.add(complex60);
        java.lang.String str63 = complex48.toString();
        double double64 = complex48.imaginary;
        java.lang.Class<?> wildcardClass65 = complex48.getClass();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 582.9143981028653d + "'", double37 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(43.756491210010616,100.0)" + "'", str63, "(43.756491210010616,100.0)");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 100.0d + "'", double64 == 100.0d);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        code.src.Complex complex2 = new code.src.Complex((double) (byte) 100, (double) 'a');
        java.lang.Class<?> wildcardClass3 = complex2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0078");
        code.src.Complex complex2 = new code.src.Complex((double) (byte) 100, (double) 'a');
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        double double10 = complex8.imaginary;
        java.lang.String str11 = complex8.toString();
        code.src.Complex complex12 = complex2.sub(complex8);
        code.src.Complex complex15 = new code.src.Complex((double) 100, (double) 10.0f);
        complex15.real = (byte) 1;
        code.src.Complex complex18 = complex8.multiply(complex15);
        java.lang.Class<?> wildcardClass19 = complex15.getClass();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 43.756491210010616d + "'", double10 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str11, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0079");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        complex2.imaginary = 100L;
        code.src.Complex complex7 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex10 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex11 = complex7.multiply(complex10);
        code.src.Complex complex14 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex17 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex18 = complex14.multiply(complex17);
        java.lang.String str19 = complex14.toString();
        code.src.Complex complex22 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex25 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex26 = complex22.multiply(complex25);
        code.src.Complex complex27 = complex14.add(complex26);
        code.src.Complex complex30 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex33 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex34 = complex30.multiply(complex33);
        java.lang.String str35 = complex30.toString();
        code.src.Complex complex38 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex41 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex42 = complex38.multiply(complex41);
        code.src.Complex complex43 = complex30.add(complex42);
        code.src.Complex complex44 = complex27.add(complex43);
        code.src.Complex complex47 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex50 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex51 = complex47.multiply(complex50);
        code.src.Complex complex52 = complex27.sub(complex47);
        code.src.Complex complex53 = complex10.add(complex52);
        code.src.Complex complex54 = complex2.multiply(complex52);
        java.lang.Class<?> wildcardClass55 = complex52.getClass();
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(10.0,0.0)" + "'", str19, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(10.0,0.0)" + "'", str35, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0080");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        code.src.Complex complex40 = complex15.sub(complex35);
        java.lang.String str41 = complex15.toString();
        code.src.Complex complex44 = new code.src.Complex((double) 100.0f, (double) (short) -1);
        code.src.Complex complex45 = complex15.add(complex44);
        java.lang.Class<?> wildcardClass46 = complex15.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str41, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0081");
        code.src.Complex complex2 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex2.imaginary = (short) 0;
        complex2.imaginary = 100.0f;
        code.src.Complex complex9 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex12 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex13 = complex9.multiply(complex12);
        java.lang.String str14 = complex9.toString();
        code.src.Complex complex17 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex20 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex21 = complex17.multiply(complex20);
        code.src.Complex complex22 = complex9.add(complex21);
        code.src.Complex complex25 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex28 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex29 = complex25.multiply(complex28);
        java.lang.String str30 = complex25.toString();
        code.src.Complex complex33 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex36 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex37 = complex33.multiply(complex36);
        code.src.Complex complex38 = complex25.add(complex37);
        code.src.Complex complex39 = complex22.add(complex38);
        java.lang.String str40 = complex22.toString();
        code.src.Complex complex43 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex43.imaginary = (short) 0;
        java.lang.String str46 = complex43.toString();
        code.src.Complex complex47 = complex22.sub(complex43);
        code.src.Complex complex48 = complex2.add(complex47);
        complex48.imaginary = 0;
        complex48.real = 10.0f;
        java.lang.Class<?> wildcardClass53 = complex48.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(10.0,0.0)" + "'", str14, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(10.0,0.0)" + "'", str30, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str40, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(-0.0,0.0)" + "'", str46, "(-0.0,0.0)");
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0082");
        code.src.Complex complex2 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double3 = complex2.abs();
        java.lang.String str4 = complex2.toString();
        complex2.imaginary = 'a';
        java.lang.Class<?> wildcardClass7 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 52.0d + "'", double3 == 52.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str4, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0083");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        double double7 = complex6.imaginary;
        java.lang.String str8 = complex6.toString();
        double double9 = complex6.real;
        code.src.Complex complex12 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double13 = complex12.abs();
        java.lang.String str14 = complex12.toString();
        code.src.Complex complex15 = complex6.sub(complex12);
        complex6.imaginary = 1L;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 437.56491210010614d + "'", double7 == 437.56491210010614d);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(280.95719905143267,437.56491210010614)" + "'", str8, "(280.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 280.95719905143267d + "'", double9 == 280.95719905143267d);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str14, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex15);
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0084");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        double double7 = complex6.imaginary;
        complex6.imaginary = 572.0d;
        complex6.real = (byte) 0;
        complex6.real = 'a';
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 437.56491210010614d + "'", double7 == 437.56491210010614d);
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0085");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        code.src.Complex complex9 = new code.src.Complex((double) 100, (double) 10.0f);
        complex9.real = (byte) 1;
        complex9.imaginary = (short) 100;
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        java.lang.String str21 = complex16.toString();
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        code.src.Complex complex29 = complex16.add(complex28);
        double double30 = complex29.real;
        code.src.Complex complex33 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex34 = complex29.multiply(complex33);
        code.src.Complex complex35 = complex9.multiply(complex29);
        code.src.Complex complex36 = complex2.sub(complex29);
        java.lang.Class<?> wildcardClass37 = complex29.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(10.0,0.0)" + "'", str21, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 290.95719905143267d + "'", double30 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0086");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        double double7 = complex6.imaginary;
        java.lang.String str8 = complex6.toString();
        java.lang.String str9 = complex6.toString();
        code.src.Complex complex12 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex15 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex16 = complex12.multiply(complex15);
        java.lang.String str17 = complex12.toString();
        code.src.Complex complex20 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex23 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex24 = complex20.multiply(complex23);
        code.src.Complex complex25 = complex12.add(complex24);
        code.src.Complex complex28 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex31 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex32 = complex28.multiply(complex31);
        java.lang.String str33 = complex28.toString();
        code.src.Complex complex36 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex39 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex40 = complex36.multiply(complex39);
        code.src.Complex complex41 = complex28.add(complex40);
        code.src.Complex complex42 = complex25.add(complex41);
        java.lang.String str43 = complex25.toString();
        code.src.Complex complex46 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex46.imaginary = (short) 0;
        java.lang.String str49 = complex46.toString();
        code.src.Complex complex50 = complex25.sub(complex46);
        code.src.Complex complex51 = complex6.sub(complex46);
        java.lang.Class<?> wildcardClass52 = complex51.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 437.56491210010614d + "'", double7 == 437.56491210010614d);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(280.95719905143267,437.56491210010614)" + "'", str8, "(280.95719905143267,437.56491210010614)");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(280.95719905143267,437.56491210010614)" + "'", str9, "(280.95719905143267,437.56491210010614)");
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(10.0,0.0)" + "'", str17, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(10.0,0.0)" + "'", str33, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str43, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(-0.0,0.0)" + "'", str49, "(-0.0,0.0)");
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0087");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        double double7 = complex6.imaginary;
        java.lang.String str8 = complex6.toString();
        java.lang.String str9 = complex6.toString();
        code.src.Complex complex12 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex15 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex16 = complex12.multiply(complex15);
        java.lang.String str17 = complex12.toString();
        code.src.Complex complex20 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex23 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex24 = complex20.multiply(complex23);
        code.src.Complex complex25 = complex12.add(complex24);
        code.src.Complex complex28 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex31 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex32 = complex28.multiply(complex31);
        java.lang.String str33 = complex28.toString();
        code.src.Complex complex36 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex39 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex40 = complex36.multiply(complex39);
        code.src.Complex complex41 = complex28.add(complex40);
        code.src.Complex complex42 = complex25.add(complex41);
        java.lang.String str43 = complex25.toString();
        code.src.Complex complex46 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex46.imaginary = (short) 0;
        java.lang.String str49 = complex46.toString();
        code.src.Complex complex50 = complex25.sub(complex46);
        code.src.Complex complex51 = complex6.sub(complex46);
        complex51.imaginary = (byte) 100;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 437.56491210010614d + "'", double7 == 437.56491210010614d);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(280.95719905143267,437.56491210010614)" + "'", str8, "(280.95719905143267,437.56491210010614)");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(280.95719905143267,437.56491210010614)" + "'", str9, "(280.95719905143267,437.56491210010614)");
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(10.0,0.0)" + "'", str17, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(10.0,0.0)" + "'", str33, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str43, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(-0.0,0.0)" + "'", str49, "(-0.0,0.0)");
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0088");
        code.src.Complex complex2 = new code.src.Complex((-0.5440211108893698d), (double) (short) 100);
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0089");
        code.src.Complex complex2 = code.src.Complex.polar(290.95719905143267d, (double) 1.0f);
        java.lang.Class<?> wildcardClass3 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0090");
        code.src.Complex complex2 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex2.imaginary = (short) 0;
        complex2.real = 525.4704025737593d;
        double double7 = complex2.abs();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 525.4704025737593d + "'", double7 == 525.4704025737593d);
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0091");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        double double37 = complex0.imaginary;
        double double38 = complex0.imaginary;
        code.src.Complex complex41 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex44 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex45 = complex41.multiply(complex44);
        java.lang.String str46 = complex41.toString();
        code.src.Complex complex49 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex52 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex53 = complex49.multiply(complex52);
        code.src.Complex complex54 = complex41.add(complex53);
        code.src.Complex complex57 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex60 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex61 = complex57.multiply(complex60);
        java.lang.String str62 = complex57.toString();
        code.src.Complex complex65 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex68 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex69 = complex65.multiply(complex68);
        code.src.Complex complex70 = complex57.add(complex69);
        code.src.Complex complex71 = complex54.add(complex70);
        code.src.Complex complex72 = new code.src.Complex();
        code.src.Complex complex73 = complex71.add(complex72);
        code.src.Complex complex76 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex79 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex80 = complex76.multiply(complex79);
        double double81 = complex79.imaginary;
        java.lang.String str82 = complex79.toString();
        code.src.Complex complex85 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double86 = complex85.abs();
        double double87 = complex85.real;
        code.src.Complex complex88 = complex79.sub(complex85);
        code.src.Complex complex89 = complex72.sub(complex79);
        code.src.Complex complex90 = complex0.add(complex79);
        double double91 = complex79.real;
        java.lang.Class<?> wildcardClass92 = complex79.getClass();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(10.0,0.0)" + "'", str46, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(10.0,0.0)" + "'", str62, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 43.756491210010616d + "'", double81 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str82, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 52.0d + "'", double86 == 52.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 28.09571990514327d + "'", double87 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 28.09571990514327d + "'", double91 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0092");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 0, (double) ' ');
        code.src.Complex complex5 = new code.src.Complex((double) 10L, (double) '#');
        double double6 = complex5.imaginary;
        code.src.Complex complex7 = complex2.multiply(complex5);
        java.lang.Class<?> wildcardClass8 = complex7.getClass();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0093");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, (double) '#');
        double double3 = complex2.imaginary;
        complex2.imaginary = 0.0d;
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 35.0d + "'", double3 == 35.0d);
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0094");
        code.src.Complex complex2 = code.src.Complex.polar(0.0d, (double) 'a');
        java.lang.Class<?> wildcardClass3 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0095");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        complex2.imaginary = (-1.0f);
        code.src.Complex complex11 = new code.src.Complex((double) 100, (double) 10.0f);
        code.src.Complex complex14 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex17 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex18 = complex14.multiply(complex17);
        java.lang.String str19 = complex14.toString();
        code.src.Complex complex22 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex25 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex26 = complex22.multiply(complex25);
        code.src.Complex complex27 = complex14.add(complex26);
        code.src.Complex complex30 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex33 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex34 = complex30.multiply(complex33);
        java.lang.String str35 = complex30.toString();
        code.src.Complex complex38 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex41 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex42 = complex38.multiply(complex41);
        code.src.Complex complex43 = complex30.add(complex42);
        code.src.Complex complex44 = complex27.add(complex43);
        code.src.Complex complex47 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex50 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex51 = complex47.multiply(complex50);
        code.src.Complex complex52 = complex27.sub(complex47);
        code.src.Complex complex53 = new code.src.Complex();
        code.src.Complex complex56 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex59 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex60 = complex56.multiply(complex59);
        java.lang.String str61 = complex56.toString();
        code.src.Complex complex64 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex67 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex68 = complex64.multiply(complex67);
        code.src.Complex complex69 = complex56.add(complex68);
        code.src.Complex complex72 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex75 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex76 = complex72.multiply(complex75);
        java.lang.String str77 = complex72.toString();
        code.src.Complex complex80 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex83 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex84 = complex80.multiply(complex83);
        code.src.Complex complex85 = complex72.add(complex84);
        code.src.Complex complex86 = complex69.add(complex85);
        double double87 = complex86.real;
        code.src.Complex complex88 = complex53.multiply(complex86);
        code.src.Complex complex89 = complex27.multiply(complex86);
        code.src.Complex complex90 = complex11.sub(complex89);
        double double91 = complex89.real;
        double double92 = complex89.abs();
        code.src.Complex complex93 = complex2.sub(complex89);
        complex89.imaginary = 280.95719905143267d;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(10.0,0.0)" + "'", str19, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(10.0,0.0)" + "'", str35, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(10.0,0.0)" + "'", str61, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(10.0,0.0)" + "'", str77, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 581.9143981028653d + "'", double87 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + (-213613.9212426372d) + "'", double91 == (-213613.9212426372d));
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 552238.2879620573d + "'", double92 == 552238.2879620573d);
        org.junit.Assert.assertNotNull(complex93);
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0096");
        code.src.Complex complex0 = new code.src.Complex();
        code.src.Complex complex3 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex6 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex7 = complex3.multiply(complex6);
        java.lang.String str8 = complex3.toString();
        code.src.Complex complex11 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex14 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex15 = complex11.multiply(complex14);
        code.src.Complex complex16 = complex3.add(complex15);
        code.src.Complex complex19 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex22 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex23 = complex19.multiply(complex22);
        java.lang.String str24 = complex19.toString();
        code.src.Complex complex27 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex30 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex31 = complex27.multiply(complex30);
        code.src.Complex complex32 = complex19.add(complex31);
        code.src.Complex complex33 = complex16.add(complex32);
        double double34 = complex33.real;
        code.src.Complex complex35 = complex0.multiply(complex33);
        code.src.Complex complex36 = new code.src.Complex();
        complex36.real = 1L;
        code.src.Complex complex41 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex44 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex45 = complex41.multiply(complex44);
        java.lang.String str46 = complex41.toString();
        code.src.Complex complex49 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex52 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex53 = complex49.multiply(complex52);
        code.src.Complex complex54 = complex41.add(complex53);
        code.src.Complex complex57 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex60 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex61 = complex57.multiply(complex60);
        java.lang.String str62 = complex57.toString();
        code.src.Complex complex65 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex68 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex69 = complex65.multiply(complex68);
        code.src.Complex complex70 = complex57.add(complex69);
        code.src.Complex complex71 = complex54.add(complex70);
        code.src.Complex complex72 = complex36.add(complex71);
        double double73 = complex72.real;
        code.src.Complex complex76 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex79 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex80 = complex76.multiply(complex79);
        code.src.Complex complex81 = complex72.sub(complex79);
        code.src.Complex complex84 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex85 = complex79.add(complex84);
        code.src.Complex complex88 = new code.src.Complex((double) 10L, (double) '#');
        code.src.Complex complex89 = complex84.add(complex88);
        code.src.Complex complex90 = complex33.multiply(complex89);
        java.lang.Class<?> wildcardClass91 = complex33.getClass();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(10.0,0.0)" + "'", str8, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(10.0,0.0)" + "'", str24, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 581.9143981028653d + "'", double34 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(10.0,0.0)" + "'", str46, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(10.0,0.0)" + "'", str62, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 582.9143981028653d + "'", double73 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0097");
        code.src.Complex complex2 = new code.src.Complex((double) ' ', (-213613.9212426372d));
        double double3 = complex2.real;
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 32.0d + "'", double3 == 32.0d);
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0098");
        code.src.Complex complex0 = new code.src.Complex();
        code.src.Complex complex3 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex6 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex7 = complex3.multiply(complex6);
        java.lang.String str8 = complex3.toString();
        code.src.Complex complex11 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex14 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex15 = complex11.multiply(complex14);
        code.src.Complex complex16 = complex3.add(complex15);
        code.src.Complex complex19 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex22 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex23 = complex19.multiply(complex22);
        java.lang.String str24 = complex19.toString();
        code.src.Complex complex27 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex30 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex31 = complex27.multiply(complex30);
        code.src.Complex complex32 = complex19.add(complex31);
        code.src.Complex complex33 = complex16.add(complex32);
        double double34 = complex33.real;
        code.src.Complex complex35 = complex0.multiply(complex33);
        code.src.Complex complex38 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex41 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex42 = complex38.multiply(complex41);
        java.lang.String str43 = complex38.toString();
        code.src.Complex complex46 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex49 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex50 = complex46.multiply(complex49);
        code.src.Complex complex51 = complex38.add(complex50);
        code.src.Complex complex54 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex57 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex58 = complex54.multiply(complex57);
        java.lang.String str59 = complex54.toString();
        code.src.Complex complex62 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex65 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex66 = complex62.multiply(complex65);
        code.src.Complex complex67 = complex54.add(complex66);
        code.src.Complex complex68 = complex51.add(complex67);
        java.lang.String str69 = complex51.toString();
        double double70 = complex51.abs();
        code.src.Complex complex71 = complex0.multiply(complex51);
        double double72 = complex51.imaginary;
        complex51.imaginary = (-317.11773840932915d);
        double double75 = complex51.abs();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(10.0,0.0)" + "'", str8, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(10.0,0.0)" + "'", str24, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 581.9143981028653d + "'", double34 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(10.0,0.0)" + "'", str43, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(10.0,0.0)" + "'", str59, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str69, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 525.4704025737593d + "'", double70 == 525.4704025737593d);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 437.56491210010614d + "'", double72 == 437.56491210010614d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 430.3716436914759d + "'", double75 == 430.3716436914759d);
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0099");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        complex2.imaginary = 100L;
        code.src.Complex complex7 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex10 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex11 = complex7.multiply(complex10);
        code.src.Complex complex14 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex17 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex18 = complex14.multiply(complex17);
        java.lang.String str19 = complex14.toString();
        code.src.Complex complex22 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex25 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex26 = complex22.multiply(complex25);
        code.src.Complex complex27 = complex14.add(complex26);
        code.src.Complex complex30 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex33 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex34 = complex30.multiply(complex33);
        java.lang.String str35 = complex30.toString();
        code.src.Complex complex38 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex41 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex42 = complex38.multiply(complex41);
        code.src.Complex complex43 = complex30.add(complex42);
        code.src.Complex complex44 = complex27.add(complex43);
        code.src.Complex complex47 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex50 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex51 = complex47.multiply(complex50);
        code.src.Complex complex52 = complex27.sub(complex47);
        code.src.Complex complex53 = complex10.add(complex52);
        code.src.Complex complex54 = complex2.multiply(complex52);
        double double55 = complex2.real;
        complex2.real = 445.65251212240173d;
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(10.0,0.0)" + "'", str19, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(10.0,0.0)" + "'", str35, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 100.0d + "'", double55 == 100.0d);
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0100");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        code.src.Complex complex9 = new code.src.Complex((double) 100, (double) 10.0f);
        complex9.real = (byte) 1;
        complex9.imaginary = (short) 100;
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        java.lang.String str21 = complex16.toString();
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        code.src.Complex complex29 = complex16.add(complex28);
        double double30 = complex29.real;
        code.src.Complex complex33 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex34 = complex29.multiply(complex33);
        code.src.Complex complex35 = complex9.multiply(complex29);
        code.src.Complex complex36 = complex2.sub(complex29);
        double double37 = complex36.abs();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(10.0,0.0)" + "'", str21, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 290.95719905143267d + "'", double30 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 520.0d + "'", double37 == 520.0d);
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0101");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex38 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex41 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex42 = complex38.multiply(complex41);
        code.src.Complex complex43 = complex18.sub(complex38);
        code.src.Complex complex44 = new code.src.Complex();
        code.src.Complex complex47 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex50 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex51 = complex47.multiply(complex50);
        java.lang.String str52 = complex47.toString();
        code.src.Complex complex55 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex58 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex59 = complex55.multiply(complex58);
        code.src.Complex complex60 = complex47.add(complex59);
        code.src.Complex complex63 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex66 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex67 = complex63.multiply(complex66);
        java.lang.String str68 = complex63.toString();
        code.src.Complex complex71 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex74 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex75 = complex71.multiply(complex74);
        code.src.Complex complex76 = complex63.add(complex75);
        code.src.Complex complex77 = complex60.add(complex76);
        double double78 = complex77.real;
        code.src.Complex complex79 = complex44.multiply(complex77);
        code.src.Complex complex80 = complex18.multiply(complex77);
        code.src.Complex complex81 = complex2.sub(complex80);
        complex2.imaginary = 0L;
        complex2.real = (byte) 10;
        java.lang.Class<?> wildcardClass86 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(10.0,0.0)" + "'", str52, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(10.0,0.0)" + "'", str68, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 581.9143981028653d + "'", double78 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0102");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        double double33 = complex15.real;
        double double34 = complex15.real;
        java.lang.Class<?> wildcardClass35 = complex15.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 290.95719905143267d + "'", double33 == 290.95719905143267d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 290.95719905143267d + "'", double34 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        complex2.imaginary = (-1.0f);
        double double18 = complex2.real;
        double double19 = complex2.real;
        double double20 = complex2.abs();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.04987562112089d + "'", double20 == 10.04987562112089d);
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0104");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 100, (double) (byte) -1);
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0105");
        code.src.Complex complex2 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double3 = complex2.abs();
        java.lang.String str4 = complex2.toString();
        java.lang.Class<?> wildcardClass5 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 52.0d + "'", double3 == 52.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str4, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0106");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 100, 43.756491210010616d);
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        double double40 = complex39.real;
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        code.src.Complex complex48 = complex39.sub(complex46);
        code.src.Complex complex49 = complex2.add(complex46);
        code.src.Complex complex52 = new code.src.Complex((double) (byte) 100, (double) 'a');
        code.src.Complex complex55 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex58 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex59 = complex55.multiply(complex58);
        double double60 = complex58.imaginary;
        java.lang.String str61 = complex58.toString();
        code.src.Complex complex62 = complex52.sub(complex58);
        code.src.Complex complex63 = complex2.multiply(complex62);
        java.lang.Class<?> wildcardClass64 = complex62.getClass();
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 582.9143981028653d + "'", double40 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 43.756491210010616d + "'", double60 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str61, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0107");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        complex2.imaginary = '4';
        code.src.Complex complex7 = new code.src.Complex((double) (short) 1, 290.95719905143267d);
        java.lang.String str8 = complex7.toString();
        double double9 = complex7.abs();
        code.src.Complex complex10 = complex2.multiply(complex7);
        complex10.imaginary = (-288.4361024143587d);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(1.0,290.95719905143267)" + "'", str8, "(1.0,290.95719905143267)");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 290.9589175121722d + "'", double9 == 290.9589175121722d);
        org.junit.Assert.assertNotNull(complex10);
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0108");
        code.src.Complex complex2 = new code.src.Complex((double) ' ', (-0.0d));
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0109");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        code.src.Complex complex40 = complex15.sub(complex35);
        complex35.imaginary = 52.0d;
        java.lang.Class<?> wildcardClass43 = complex35.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex2.add(complex18);
        code.src.Complex complex39 = code.src.Complex.polar((-317.11773840932915d), (double) (-1.0f));
        code.src.Complex complex40 = complex18.sub(complex39);
        double double41 = complex40.imaginary;
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 170.71953646075502d + "'", double41 == 170.71953646075502d);
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0111");
        code.src.Complex complex2 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex2.imaginary = (short) 0;
        complex2.imaginary = 100.0f;
        code.src.Complex complex9 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex12 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex13 = complex9.multiply(complex12);
        java.lang.String str14 = complex9.toString();
        code.src.Complex complex17 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex20 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex21 = complex17.multiply(complex20);
        code.src.Complex complex22 = complex9.add(complex21);
        code.src.Complex complex25 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex28 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex29 = complex25.multiply(complex28);
        java.lang.String str30 = complex25.toString();
        code.src.Complex complex33 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex36 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex37 = complex33.multiply(complex36);
        code.src.Complex complex38 = complex25.add(complex37);
        code.src.Complex complex39 = complex22.add(complex38);
        java.lang.String str40 = complex22.toString();
        code.src.Complex complex43 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex43.imaginary = (short) 0;
        java.lang.String str46 = complex43.toString();
        code.src.Complex complex47 = complex22.sub(complex43);
        code.src.Complex complex48 = complex2.add(complex47);
        complex48.imaginary = 0;
        complex48.real = 10.0f;
        java.lang.String str53 = complex48.toString();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(10.0,0.0)" + "'", str14, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(10.0,0.0)" + "'", str30, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str40, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(-0.0,0.0)" + "'", str46, "(-0.0,0.0)");
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(10.0,0.0)" + "'", str53, "(10.0,0.0)");
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0112");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        complex2.imaginary = 100L;
        code.src.Complex complex7 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex10 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex11 = complex7.multiply(complex10);
        code.src.Complex complex14 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex17 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex18 = complex14.multiply(complex17);
        java.lang.String str19 = complex14.toString();
        code.src.Complex complex22 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex25 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex26 = complex22.multiply(complex25);
        code.src.Complex complex27 = complex14.add(complex26);
        code.src.Complex complex30 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex33 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex34 = complex30.multiply(complex33);
        java.lang.String str35 = complex30.toString();
        code.src.Complex complex38 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex41 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex42 = complex38.multiply(complex41);
        code.src.Complex complex43 = complex30.add(complex42);
        code.src.Complex complex44 = complex27.add(complex43);
        code.src.Complex complex47 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex50 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex51 = complex47.multiply(complex50);
        code.src.Complex complex52 = complex27.sub(complex47);
        code.src.Complex complex53 = complex10.add(complex52);
        code.src.Complex complex54 = complex2.multiply(complex52);
        code.src.Complex complex57 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex60 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex61 = complex57.multiply(complex60);
        double double62 = complex61.imaginary;
        java.lang.String str63 = complex61.toString();
        java.lang.String str64 = complex61.toString();
        code.src.Complex complex65 = complex52.sub(complex61);
        code.src.Complex complex68 = code.src.Complex.polar((double) (byte) 10, (double) (short) 0);
        code.src.Complex complex69 = complex52.sub(complex68);
        double double70 = complex52.abs();
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(10.0,0.0)" + "'", str19, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(10.0,0.0)" + "'", str35, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 437.56491210010614d + "'", double62 == 437.56491210010614d);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(280.95719905143267,437.56491210010614)" + "'", str63, "(280.95719905143267,437.56491210010614)");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(280.95719905143267,437.56491210010614)" + "'", str64, "(280.95719905143267,437.56491210010614)");
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 520.0d + "'", double70 == 520.0d);
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0113");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        code.src.Complex complex33 = new code.src.Complex();
        complex33.real = 1L;
        code.src.Complex complex38 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex41 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex42 = complex38.multiply(complex41);
        java.lang.String str43 = complex38.toString();
        code.src.Complex complex46 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex49 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex50 = complex46.multiply(complex49);
        code.src.Complex complex51 = complex38.add(complex50);
        code.src.Complex complex54 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex57 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex58 = complex54.multiply(complex57);
        java.lang.String str59 = complex54.toString();
        code.src.Complex complex62 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex65 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex66 = complex62.multiply(complex65);
        code.src.Complex complex67 = complex54.add(complex66);
        code.src.Complex complex68 = complex51.add(complex67);
        code.src.Complex complex69 = complex33.add(complex68);
        double double70 = complex69.real;
        code.src.Complex complex73 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex76 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex77 = complex73.multiply(complex76);
        code.src.Complex complex78 = complex69.sub(complex76);
        code.src.Complex complex81 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex82 = complex76.add(complex81);
        code.src.Complex complex85 = new code.src.Complex((double) 10L, (double) '#');
        code.src.Complex complex86 = complex81.add(complex85);
        code.src.Complex complex89 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex89.imaginary = (short) 0;
        complex89.imaginary = 100.0f;
        code.src.Complex complex94 = complex81.multiply(complex89);
        code.src.Complex complex95 = complex32.add(complex89);
        complex32.imaginary = 663.590879631022d;
        complex32.imaginary = 437.56491210010614d;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(10.0,0.0)" + "'", str43, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(10.0,0.0)" + "'", str59, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 582.9143981028653d + "'", double70 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex94);
        org.junit.Assert.assertNotNull(complex95);
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0114");
        code.src.Complex complex2 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        code.src.Complex complex5 = new code.src.Complex(290.95719905143267d, (-213613.9212426372d));
        code.src.Complex complex6 = complex2.add(complex5);
        code.src.Complex complex9 = new code.src.Complex((double) 100, (double) 10.0f);
        complex9.real = (byte) 1;
        complex9.imaginary = (short) 100;
        code.src.Complex complex14 = new code.src.Complex();
        complex14.real = 1L;
        code.src.Complex complex19 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex22 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex23 = complex19.multiply(complex22);
        java.lang.String str24 = complex19.toString();
        code.src.Complex complex27 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex30 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex31 = complex27.multiply(complex30);
        code.src.Complex complex32 = complex19.add(complex31);
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        java.lang.String str40 = complex35.toString();
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        code.src.Complex complex48 = complex35.add(complex47);
        code.src.Complex complex49 = complex32.add(complex48);
        code.src.Complex complex50 = complex14.add(complex49);
        double double51 = complex14.imaginary;
        double double52 = complex14.imaginary;
        java.lang.String str53 = complex14.toString();
        code.src.Complex complex54 = complex9.sub(complex14);
        code.src.Complex complex57 = new code.src.Complex((double) (byte) 100, (double) 'a');
        code.src.Complex complex60 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex63 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex64 = complex60.multiply(complex63);
        double double65 = complex63.imaginary;
        java.lang.String str66 = complex63.toString();
        code.src.Complex complex67 = complex57.sub(complex63);
        code.src.Complex complex70 = new code.src.Complex((double) 100, (double) 10.0f);
        complex70.real = (byte) 1;
        code.src.Complex complex73 = complex63.multiply(complex70);
        code.src.Complex complex74 = complex54.sub(complex73);
        code.src.Complex complex75 = complex6.sub(complex74);
        java.lang.Class<?> wildcardClass76 = complex6.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(10.0,0.0)" + "'", str24, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(10.0,0.0)" + "'", str40, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(1.0,0.0)" + "'", str53, "(1.0,0.0)");
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 43.756491210010616d + "'", double65 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str66, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0115");
        code.src.Complex complex2 = code.src.Complex.polar((double) (short) -1, (double) (byte) 0);
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        double double19 = complex18.real;
        code.src.Complex complex22 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex25 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex26 = complex22.multiply(complex25);
        double double27 = complex26.imaginary;
        code.src.Complex complex28 = complex18.sub(complex26);
        double double29 = complex18.imaginary;
        code.src.Complex complex30 = complex2.multiply(complex18);
        java.lang.Class<?> wildcardClass31 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 290.95719905143267d + "'", double19 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 437.56491210010614d + "'", double27 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 437.56491210010614d + "'", double29 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0116");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        complex2.imaginary = '4';
        code.src.Complex complex7 = new code.src.Complex((double) (short) 1, 290.95719905143267d);
        java.lang.String str8 = complex7.toString();
        double double9 = complex7.abs();
        code.src.Complex complex10 = complex2.multiply(complex7);
        complex7.real = 9.866275920404853d;
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(1.0,290.95719905143267)" + "'", str8, "(1.0,290.95719905143267)");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 290.9589175121722d + "'", double9 == 290.9589175121722d);
        org.junit.Assert.assertNotNull(complex10);
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0117");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        code.src.Complex complex33 = new code.src.Complex();
        code.src.Complex complex34 = complex32.add(complex33);
        code.src.Complex complex37 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex40 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex41 = complex37.multiply(complex40);
        java.lang.String str42 = complex37.toString();
        code.src.Complex complex45 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex45.multiply(complex48);
        code.src.Complex complex50 = complex37.add(complex49);
        code.src.Complex complex53 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex56 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex57 = complex53.multiply(complex56);
        java.lang.String str58 = complex53.toString();
        code.src.Complex complex61 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex64 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex65 = complex61.multiply(complex64);
        code.src.Complex complex66 = complex53.add(complex65);
        code.src.Complex complex67 = complex50.add(complex66);
        code.src.Complex complex68 = new code.src.Complex();
        code.src.Complex complex69 = complex67.add(complex68);
        code.src.Complex complex72 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex75 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex76 = complex72.multiply(complex75);
        double double77 = complex75.imaginary;
        java.lang.String str78 = complex75.toString();
        code.src.Complex complex81 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double82 = complex81.abs();
        double double83 = complex81.real;
        code.src.Complex complex84 = complex75.sub(complex81);
        code.src.Complex complex85 = complex68.sub(complex75);
        code.src.Complex complex86 = complex33.add(complex68);
        java.lang.String str87 = complex33.toString();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(10.0,0.0)" + "'", str42, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(10.0,0.0)" + "'", str58, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 43.756491210010616d + "'", double77 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str78, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 52.0d + "'", double82 == 52.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 28.09571990514327d + "'", double83 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "(0.0,0.0)" + "'", str87, "(0.0,0.0)");
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        code.src.Complex complex9 = new code.src.Complex((double) 100, (double) 10.0f);
        complex9.real = (byte) 1;
        complex9.imaginary = (short) 100;
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        java.lang.String str21 = complex16.toString();
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        code.src.Complex complex29 = complex16.add(complex28);
        double double30 = complex29.real;
        code.src.Complex complex33 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex34 = complex29.multiply(complex33);
        code.src.Complex complex35 = complex9.multiply(complex29);
        code.src.Complex complex36 = complex2.sub(complex29);
        double double37 = complex36.real;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(10.0,0.0)" + "'", str21, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 290.95719905143267d + "'", double30 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + (-280.95719905143267d) + "'", double37 == (-280.95719905143267d));
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0119");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 0, (double) ' ');
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        code.src.Complex complex40 = complex2.add(complex38);
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        double double48 = complex46.imaginary;
        java.lang.String str49 = complex46.toString();
        code.src.Complex complex52 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double53 = complex52.abs();
        double double54 = complex52.real;
        code.src.Complex complex55 = complex46.sub(complex52);
        code.src.Complex complex56 = complex38.sub(complex46);
        code.src.Complex complex57 = new code.src.Complex();
        complex57.real = 1L;
        code.src.Complex complex62 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex65 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex66 = complex62.multiply(complex65);
        java.lang.String str67 = complex62.toString();
        code.src.Complex complex70 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex73 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex74 = complex70.multiply(complex73);
        code.src.Complex complex75 = complex62.add(complex74);
        code.src.Complex complex78 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex81 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex82 = complex78.multiply(complex81);
        java.lang.String str83 = complex78.toString();
        code.src.Complex complex86 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex89 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex90 = complex86.multiply(complex89);
        code.src.Complex complex91 = complex78.add(complex90);
        code.src.Complex complex92 = complex75.add(complex91);
        code.src.Complex complex93 = complex57.add(complex92);
        java.lang.String str94 = complex57.toString();
        code.src.Complex complex95 = complex46.sub(complex57);
        java.lang.String str96 = complex46.toString();
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 43.756491210010616d + "'", double48 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str49, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 52.0d + "'", double53 == 52.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 28.09571990514327d + "'", double54 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(10.0,0.0)" + "'", str67, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(10.0,0.0)" + "'", str83, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "(1.0,0.0)" + "'", str94, "(1.0,0.0)");
        org.junit.Assert.assertNotNull(complex95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str96, "(28.09571990514327,43.756491210010616)");
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0120");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        double double37 = complex0.imaginary;
        double double38 = complex0.imaginary;
        java.lang.String str39 = complex0.toString();
        double double40 = complex0.abs();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(1.0,0.0)" + "'", str39, "(1.0,0.0)");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        code.src.Complex complex2 = new code.src.Complex(0.0d, 112.71202242884297d);
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0122");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        code.src.Complex complex39 = code.src.Complex.polar((double) (short) -1, (double) (byte) 0);
        code.src.Complex complex42 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex45 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex46 = complex42.multiply(complex45);
        java.lang.String str47 = complex42.toString();
        code.src.Complex complex50 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex53 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex54 = complex50.multiply(complex53);
        code.src.Complex complex55 = complex42.add(complex54);
        double double56 = complex55.real;
        code.src.Complex complex59 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex62 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex63 = complex59.multiply(complex62);
        double double64 = complex63.imaginary;
        code.src.Complex complex65 = complex55.sub(complex63);
        double double66 = complex55.imaginary;
        code.src.Complex complex67 = complex39.multiply(complex55);
        code.src.Complex complex68 = complex0.multiply(complex67);
        java.lang.Class<?> wildcardClass69 = complex67.getClass();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(10.0,0.0)" + "'", str47, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 290.95719905143267d + "'", double56 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 437.56491210010614d + "'", double64 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 437.56491210010614d + "'", double66 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0123");
        code.src.Complex complex2 = code.src.Complex.polar((double) (byte) 100, 35.0d);
        complex2.imaginary = 1055.9594711542297d;
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0124");
        code.src.Complex complex2 = new code.src.Complex(290.95719905143267d, 1051.4948429356753d);
        java.lang.Class<?> wildcardClass3 = complex2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0125");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        double double37 = complex36.real;
        code.src.Complex complex40 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex43 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex44 = complex40.multiply(complex43);
        code.src.Complex complex45 = complex36.sub(complex43);
        complex45.real = 0.0d;
        java.lang.Class<?> wildcardClass48 = complex45.getClass();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 582.9143981028653d + "'", double37 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0126");
        code.src.Complex complex2 = new code.src.Complex((double) 0.0f, 663.590879631022d);
        code.src.Complex complex5 = new code.src.Complex((double) (short) 0, (double) ' ');
        code.src.Complex complex6 = new code.src.Complex();
        complex6.real = 1L;
        code.src.Complex complex11 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex14 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex15 = complex11.multiply(complex14);
        java.lang.String str16 = complex11.toString();
        code.src.Complex complex19 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex22 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex23 = complex19.multiply(complex22);
        code.src.Complex complex24 = complex11.add(complex23);
        code.src.Complex complex27 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex30 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex31 = complex27.multiply(complex30);
        java.lang.String str32 = complex27.toString();
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        code.src.Complex complex40 = complex27.add(complex39);
        code.src.Complex complex41 = complex24.add(complex40);
        code.src.Complex complex42 = complex6.add(complex41);
        code.src.Complex complex43 = complex5.add(complex41);
        code.src.Complex complex46 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex49 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex50 = complex46.multiply(complex49);
        double double51 = complex49.imaginary;
        java.lang.String str52 = complex49.toString();
        code.src.Complex complex55 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double56 = complex55.abs();
        double double57 = complex55.real;
        code.src.Complex complex58 = complex49.sub(complex55);
        code.src.Complex complex59 = complex41.sub(complex49);
        code.src.Complex complex60 = new code.src.Complex();
        complex60.real = 1L;
        code.src.Complex complex65 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex68 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex69 = complex65.multiply(complex68);
        java.lang.String str70 = complex65.toString();
        code.src.Complex complex73 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex76 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex77 = complex73.multiply(complex76);
        code.src.Complex complex78 = complex65.add(complex77);
        code.src.Complex complex81 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex84 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex85 = complex81.multiply(complex84);
        java.lang.String str86 = complex81.toString();
        code.src.Complex complex89 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex92 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex93 = complex89.multiply(complex92);
        code.src.Complex complex94 = complex81.add(complex93);
        code.src.Complex complex95 = complex78.add(complex94);
        code.src.Complex complex96 = complex60.add(complex95);
        double double97 = complex60.imaginary;
        code.src.Complex complex98 = complex59.add(complex60);
        code.src.Complex complex99 = complex2.sub(complex59);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(10.0,0.0)" + "'", str16, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(10.0,0.0)" + "'", str32, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 43.756491210010616d + "'", double51 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str52, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 52.0d + "'", double56 == 52.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 28.09571990514327d + "'", double57 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(10.0,0.0)" + "'", str70, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "(10.0,0.0)" + "'", str86, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertNotNull(complex94);
        org.junit.Assert.assertNotNull(complex95);
        org.junit.Assert.assertNotNull(complex96);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 0.0d + "'", double97 == 0.0d);
        org.junit.Assert.assertNotNull(complex98);
        org.junit.Assert.assertNotNull(complex99);
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0127");
        code.src.Complex complex2 = code.src.Complex.polar((double) (short) 10, (double) 1.0f);
        double double3 = complex2.abs();
        java.lang.Class<?> wildcardClass4 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0128");
        code.src.Complex complex2 = new code.src.Complex((-906.2883532154044d), (double) (byte) 1);
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0129");
        code.src.Complex complex2 = code.src.Complex.polar((double) 0L, (-393.80842089009553d));
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0130");
        code.src.Complex complex2 = code.src.Complex.polar(1051.4948429356753d, 581.9143981028653d);
        complex2.imaginary = (byte) 100;
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0131");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        double double7 = complex6.imaginary;
        java.lang.String str8 = complex6.toString();
        double double9 = complex6.real;
        code.src.Complex complex12 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double13 = complex12.abs();
        java.lang.String str14 = complex12.toString();
        code.src.Complex complex15 = complex6.sub(complex12);
        code.src.Complex complex18 = new code.src.Complex(100.0d, 0.0d);
        code.src.Complex complex19 = complex15.add(complex18);
        double double20 = complex19.real;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 437.56491210010614d + "'", double7 == 437.56491210010614d);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(280.95719905143267,437.56491210010614)" + "'", str8, "(280.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 280.95719905143267d + "'", double9 == 280.95719905143267d);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str14, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 352.8614791462894d + "'", double20 == 352.8614791462894d);
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        code.src.Complex complex2 = code.src.Complex.polar(290.95719905143267d, (double) 1.0f);
        code.src.Complex complex5 = new code.src.Complex((double) (byte) 100, 437.56491210010614d);
        code.src.Complex complex6 = new code.src.Complex();
        complex6.real = 1L;
        code.src.Complex complex11 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex14 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex15 = complex11.multiply(complex14);
        java.lang.String str16 = complex11.toString();
        code.src.Complex complex19 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex22 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex23 = complex19.multiply(complex22);
        code.src.Complex complex24 = complex11.add(complex23);
        code.src.Complex complex27 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex30 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex31 = complex27.multiply(complex30);
        java.lang.String str32 = complex27.toString();
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        code.src.Complex complex40 = complex27.add(complex39);
        code.src.Complex complex41 = complex24.add(complex40);
        code.src.Complex complex42 = complex6.add(complex41);
        double double43 = complex42.real;
        code.src.Complex complex46 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex49 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex50 = complex46.multiply(complex49);
        code.src.Complex complex51 = complex42.sub(complex49);
        code.src.Complex complex54 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex55 = complex49.add(complex54);
        code.src.Complex complex56 = complex5.add(complex54);
        code.src.Complex complex57 = complex2.multiply(complex54);
        java.lang.Class<?> wildcardClass58 = complex54.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(10.0,0.0)" + "'", str16, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(10.0,0.0)" + "'", str32, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 582.9143981028653d + "'", double43 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0133");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        complex2.imaginary = 100L;
        code.src.Complex complex7 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex10 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex11 = complex7.multiply(complex10);
        code.src.Complex complex14 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex17 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex18 = complex14.multiply(complex17);
        java.lang.String str19 = complex14.toString();
        code.src.Complex complex22 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex25 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex26 = complex22.multiply(complex25);
        code.src.Complex complex27 = complex14.add(complex26);
        code.src.Complex complex30 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex33 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex34 = complex30.multiply(complex33);
        java.lang.String str35 = complex30.toString();
        code.src.Complex complex38 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex41 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex42 = complex38.multiply(complex41);
        code.src.Complex complex43 = complex30.add(complex42);
        code.src.Complex complex44 = complex27.add(complex43);
        code.src.Complex complex47 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex50 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex51 = complex47.multiply(complex50);
        code.src.Complex complex52 = complex27.sub(complex47);
        code.src.Complex complex53 = complex10.add(complex52);
        code.src.Complex complex54 = complex2.multiply(complex52);
        double double55 = complex2.real;
        code.src.Complex complex58 = new code.src.Complex(28.09571990514327d, (double) ' ');
        code.src.Complex complex59 = complex2.add(complex58);
        java.lang.String str60 = complex58.toString();
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(10.0,0.0)" + "'", str19, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(10.0,0.0)" + "'", str35, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 100.0d + "'", double55 == 100.0d);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(28.09571990514327,32.0)" + "'", str60, "(28.09571990514327,32.0)");
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0134");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        double double37 = complex36.real;
        code.src.Complex complex40 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex43 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex44 = complex40.multiply(complex43);
        code.src.Complex complex45 = complex36.sub(complex43);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex43.add(complex48);
        code.src.Complex complex52 = new code.src.Complex((double) 10L, (double) '#');
        code.src.Complex complex53 = complex48.add(complex52);
        complex48.real = 43.756491210010616d;
        complex48.imaginary = 100.0d;
        complex48.imaginary = (-317.11773840932915d);
        code.src.Complex complex62 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex65 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex66 = complex62.multiply(complex65);
        java.lang.String str67 = complex62.toString();
        code.src.Complex complex70 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex73 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex74 = complex70.multiply(complex73);
        code.src.Complex complex75 = complex62.add(complex74);
        code.src.Complex complex76 = complex48.multiply(complex74);
        double double77 = complex74.imaginary;
        complex74.imaginary = 10.04987562112089d;
        java.lang.Class<?> wildcardClass80 = complex74.getClass();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 582.9143981028653d + "'", double37 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(10.0,0.0)" + "'", str67, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 437.56491210010614d + "'", double77 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0135");
        code.src.Complex complex0 = new code.src.Complex();
        code.src.Complex complex3 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex6 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex7 = complex3.multiply(complex6);
        java.lang.String str8 = complex3.toString();
        code.src.Complex complex11 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex14 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex15 = complex11.multiply(complex14);
        code.src.Complex complex16 = complex3.add(complex15);
        code.src.Complex complex19 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex22 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex23 = complex19.multiply(complex22);
        java.lang.String str24 = complex19.toString();
        code.src.Complex complex27 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex30 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex31 = complex27.multiply(complex30);
        code.src.Complex complex32 = complex19.add(complex31);
        code.src.Complex complex33 = complex16.add(complex32);
        double double34 = complex33.real;
        code.src.Complex complex35 = complex0.multiply(complex33);
        code.src.Complex complex38 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex41 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex42 = complex38.multiply(complex41);
        java.lang.String str43 = complex38.toString();
        code.src.Complex complex46 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex49 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex50 = complex46.multiply(complex49);
        code.src.Complex complex51 = complex38.add(complex50);
        code.src.Complex complex54 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex57 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex58 = complex54.multiply(complex57);
        java.lang.String str59 = complex54.toString();
        code.src.Complex complex62 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex65 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex66 = complex62.multiply(complex65);
        code.src.Complex complex67 = complex54.add(complex66);
        code.src.Complex complex68 = complex51.add(complex67);
        java.lang.String str69 = complex51.toString();
        double double70 = complex51.abs();
        code.src.Complex complex71 = complex0.multiply(complex51);
        code.src.Complex complex74 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex74.imaginary = (short) 0;
        complex74.real = 525.4704025737593d;
        double double79 = complex74.real;
        code.src.Complex complex80 = complex51.add(complex74);
        java.lang.String str81 = complex51.toString();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(10.0,0.0)" + "'", str8, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(10.0,0.0)" + "'", str24, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 581.9143981028653d + "'", double34 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(10.0,0.0)" + "'", str43, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(10.0,0.0)" + "'", str59, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str69, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 525.4704025737593d + "'", double70 == 525.4704025737593d);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 525.4704025737593d + "'", double79 == 525.4704025737593d);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str81, "(290.95719905143267,437.56491210010614)");
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0136");
        code.src.Complex complex0 = new code.src.Complex();
        double double1 = complex0.abs();
        complex0.real = 100;
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0137");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 0, (double) ' ');
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        code.src.Complex complex40 = complex2.add(complex38);
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        java.lang.String str48 = complex43.toString();
        code.src.Complex complex51 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex54 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex55 = complex51.multiply(complex54);
        code.src.Complex complex56 = complex43.add(complex55);
        code.src.Complex complex59 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex62 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex63 = complex59.multiply(complex62);
        java.lang.String str64 = complex59.toString();
        code.src.Complex complex67 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex70 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex71 = complex67.multiply(complex70);
        code.src.Complex complex72 = complex59.add(complex71);
        code.src.Complex complex73 = complex56.add(complex72);
        code.src.Complex complex74 = new code.src.Complex();
        code.src.Complex complex75 = complex73.add(complex74);
        code.src.Complex complex76 = complex40.add(complex74);
        java.lang.String str77 = complex40.toString();
        double double78 = complex40.real;
        java.lang.Class<?> wildcardClass79 = complex40.getClass();
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(10.0,0.0)" + "'", str48, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(10.0,0.0)" + "'", str64, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(581.9143981028653,907.1298242002123)" + "'", str77, "(581.9143981028653,907.1298242002123)");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 581.9143981028653d + "'", double78 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0138");
        code.src.Complex complex2 = code.src.Complex.polar((double) (-1), (double) (short) 10);
        java.lang.Class<?> wildcardClass3 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0139");
        code.src.Complex complex2 = new code.src.Complex(100.0d, 0.0d);
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex37 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex40 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex41 = complex37.multiply(complex40);
        java.lang.String str42 = complex37.toString();
        code.src.Complex complex45 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex45.multiply(complex48);
        code.src.Complex complex50 = complex37.add(complex49);
        code.src.Complex complex51 = complex34.add(complex50);
        java.lang.String str52 = complex34.toString();
        double double53 = complex34.abs();
        code.src.Complex complex54 = complex18.multiply(complex34);
        code.src.Complex complex55 = complex2.add(complex54);
        java.lang.String str56 = complex55.toString();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(10.0,0.0)" + "'", str42, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str52, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 525.4704025737593d + "'", double53 == 525.4704025737593d);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "(-106706.9606213186,254625.32245566644)" + "'", str56, "(-106706.9606213186,254625.32245566644)");
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0140");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        complex2.imaginary = (-1.0f);
        double double18 = complex2.real;
        double double19 = complex2.real;
        complex2.imaginary = 141.4213562373095d;
        code.src.Complex complex24 = new code.src.Complex((double) (byte) 1, (double) (-1.0f));
        complex24.imaginary = (byte) 1;
        code.src.Complex complex27 = complex2.multiply(complex24);
        java.lang.Class<?> wildcardClass28 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0141");
        code.src.Complex complex2 = new code.src.Complex((double) 1, 28.09571990514327d);
        code.src.Complex complex5 = new code.src.Complex((double) (short) 0, (double) ' ');
        code.src.Complex complex6 = new code.src.Complex();
        complex6.real = 1L;
        code.src.Complex complex11 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex14 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex15 = complex11.multiply(complex14);
        java.lang.String str16 = complex11.toString();
        code.src.Complex complex19 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex22 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex23 = complex19.multiply(complex22);
        code.src.Complex complex24 = complex11.add(complex23);
        code.src.Complex complex27 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex30 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex31 = complex27.multiply(complex30);
        java.lang.String str32 = complex27.toString();
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        code.src.Complex complex40 = complex27.add(complex39);
        code.src.Complex complex41 = complex24.add(complex40);
        code.src.Complex complex42 = complex6.add(complex41);
        code.src.Complex complex43 = complex5.add(complex41);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double47 = complex46.abs();
        code.src.Complex complex48 = complex5.add(complex46);
        code.src.Complex complex49 = complex2.add(complex5);
        code.src.Complex complex50 = null;
        // The following exception was thrown during execution in test generation
        try {
            code.src.Complex complex51 = complex49.add(complex50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(10.0,0.0)" + "'", str16, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(10.0,0.0)" + "'", str32, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 52.0d + "'", double47 == 52.0d);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0142");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 0, (double) ' ');
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        code.src.Complex complex40 = complex2.add(complex38);
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        double double48 = complex46.imaginary;
        java.lang.String str49 = complex46.toString();
        code.src.Complex complex52 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double53 = complex52.abs();
        double double54 = complex52.real;
        code.src.Complex complex55 = complex46.sub(complex52);
        code.src.Complex complex56 = complex38.sub(complex46);
        code.src.Complex complex57 = new code.src.Complex();
        complex57.real = 1L;
        code.src.Complex complex62 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex65 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex66 = complex62.multiply(complex65);
        java.lang.String str67 = complex62.toString();
        code.src.Complex complex70 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex73 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex74 = complex70.multiply(complex73);
        code.src.Complex complex75 = complex62.add(complex74);
        code.src.Complex complex78 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex81 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex82 = complex78.multiply(complex81);
        java.lang.String str83 = complex78.toString();
        code.src.Complex complex86 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex89 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex90 = complex86.multiply(complex89);
        code.src.Complex complex91 = complex78.add(complex90);
        code.src.Complex complex92 = complex75.add(complex91);
        code.src.Complex complex93 = complex57.add(complex92);
        double double94 = complex57.imaginary;
        code.src.Complex complex95 = complex56.add(complex57);
        complex56.imaginary = 32.0d;
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 43.756491210010616d + "'", double48 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str49, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 52.0d + "'", double53 == 52.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 28.09571990514327d + "'", double54 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(10.0,0.0)" + "'", str67, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(10.0,0.0)" + "'", str83, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
        org.junit.Assert.assertNotNull(complex95);
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0143");
        code.src.Complex complex2 = code.src.Complex.polar(28.09571990514327d, (double) 0);
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        double double40 = complex39.real;
        code.src.Complex complex41 = complex2.add(complex39);
        java.lang.Class<?> wildcardClass42 = complex39.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 582.9143981028653d + "'", double40 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0144");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        code.src.Complex complex33 = new code.src.Complex();
        code.src.Complex complex34 = complex32.add(complex33);
        code.src.Complex complex37 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex40 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex41 = complex37.multiply(complex40);
        java.lang.String str42 = complex37.toString();
        code.src.Complex complex45 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex45.multiply(complex48);
        code.src.Complex complex50 = complex37.add(complex49);
        code.src.Complex complex53 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex56 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex57 = complex53.multiply(complex56);
        java.lang.String str58 = complex53.toString();
        code.src.Complex complex61 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex64 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex65 = complex61.multiply(complex64);
        code.src.Complex complex66 = complex53.add(complex65);
        code.src.Complex complex67 = complex50.add(complex66);
        code.src.Complex complex68 = new code.src.Complex();
        code.src.Complex complex69 = complex67.add(complex68);
        code.src.Complex complex72 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex75 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex76 = complex72.multiply(complex75);
        double double77 = complex75.imaginary;
        java.lang.String str78 = complex75.toString();
        code.src.Complex complex81 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double82 = complex81.abs();
        double double83 = complex81.real;
        code.src.Complex complex84 = complex75.sub(complex81);
        code.src.Complex complex85 = complex68.sub(complex75);
        code.src.Complex complex86 = complex33.add(complex68);
        double double87 = complex86.abs();
        double double88 = complex86.real;
        java.lang.String str89 = complex86.toString();
        java.lang.Class<?> wildcardClass90 = complex86.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(10.0,0.0)" + "'", str42, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(10.0,0.0)" + "'", str58, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 43.756491210010616d + "'", double77 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str78, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 52.0d + "'", double82 == 52.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 28.09571990514327d + "'", double83 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "(0.0,0.0)" + "'", str89, "(0.0,0.0)");
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0145");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        code.src.Complex complex9 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex12 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex13 = complex9.multiply(complex12);
        java.lang.String str14 = complex9.toString();
        code.src.Complex complex17 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex20 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex21 = complex17.multiply(complex20);
        code.src.Complex complex22 = complex9.add(complex21);
        code.src.Complex complex25 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex28 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex29 = complex25.multiply(complex28);
        java.lang.String str30 = complex25.toString();
        code.src.Complex complex33 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex36 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex37 = complex33.multiply(complex36);
        code.src.Complex complex38 = complex25.add(complex37);
        code.src.Complex complex39 = complex22.add(complex38);
        code.src.Complex complex42 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex45 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex46 = complex42.multiply(complex45);
        code.src.Complex complex47 = complex22.sub(complex42);
        code.src.Complex complex48 = complex5.add(complex47);
        double double49 = complex48.abs();
        code.src.Complex complex50 = new code.src.Complex();
        complex50.real = 1L;
        code.src.Complex complex55 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex58 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex59 = complex55.multiply(complex58);
        java.lang.String str60 = complex55.toString();
        code.src.Complex complex63 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex66 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex67 = complex63.multiply(complex66);
        code.src.Complex complex68 = complex55.add(complex67);
        code.src.Complex complex71 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex74 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex75 = complex71.multiply(complex74);
        java.lang.String str76 = complex71.toString();
        code.src.Complex complex79 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex82 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex83 = complex79.multiply(complex82);
        code.src.Complex complex84 = complex71.add(complex83);
        code.src.Complex complex85 = complex68.add(complex84);
        code.src.Complex complex86 = complex50.add(complex85);
        code.src.Complex complex87 = complex48.sub(complex85);
        complex85.imaginary = 43.756491210010616d;
        code.src.Complex complex92 = code.src.Complex.polar((double) 'a', (double) (short) 1);
        code.src.Complex complex93 = complex85.add(complex92);
        java.lang.String str94 = complex93.toString();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(10.0,0.0)" + "'", str14, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(10.0,0.0)" + "'", str30, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 572.0d + "'", double49 == 572.0d);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(10.0,0.0)" + "'", str60, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "(10.0,0.0)" + "'", str76, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "(634.3237217720749,125.37917673637656)" + "'", str94, "(634.3237217720749,125.37917673637656)");
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0146");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        code.src.Complex complex33 = new code.src.Complex();
        code.src.Complex complex34 = complex32.add(complex33);
        code.src.Complex complex37 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex40 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex41 = complex37.multiply(complex40);
        double double42 = complex40.imaginary;
        java.lang.String str43 = complex40.toString();
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double47 = complex46.abs();
        double double48 = complex46.real;
        code.src.Complex complex49 = complex40.sub(complex46);
        code.src.Complex complex50 = complex33.sub(complex40);
        java.lang.String str51 = complex33.toString();
        java.lang.Class<?> wildcardClass52 = complex33.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 43.756491210010616d + "'", double42 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str43, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 52.0d + "'", double47 == 52.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 28.09571990514327d + "'", double48 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "(0.0,0.0)" + "'", str51, "(0.0,0.0)");
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0147");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        double double16 = complex15.real;
        code.src.Complex complex19 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex22 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex23 = complex19.multiply(complex22);
        double double24 = complex23.imaginary;
        code.src.Complex complex25 = complex15.sub(complex23);
        double double26 = complex25.real;
        java.lang.Class<?> wildcardClass27 = complex25.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 290.95719905143267d + "'", double16 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 437.56491210010614d + "'", double24 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10.0d + "'", double26 == 10.0d);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0148");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        code.src.Complex complex40 = complex15.sub(complex35);
        java.lang.String str41 = complex15.toString();
        java.lang.Class<?> wildcardClass42 = complex15.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str41, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0149");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        code.src.Complex complex40 = complex15.sub(complex35);
        double double41 = complex40.imaginary;
        complex40.real = 290.95719905143267d;
        double double44 = complex40.abs();
        double double45 = complex40.real;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 437.56491210010614d + "'", double41 == 437.56491210010614d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 525.4704025737593d + "'", double44 == 525.4704025737593d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 290.95719905143267d + "'", double45 == 290.95719905143267d);
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0150");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 0, (double) ' ');
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        code.src.Complex complex40 = complex2.add(complex38);
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        double double48 = complex46.imaginary;
        java.lang.String str49 = complex46.toString();
        code.src.Complex complex52 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double53 = complex52.abs();
        double double54 = complex52.real;
        code.src.Complex complex55 = complex46.sub(complex52);
        code.src.Complex complex56 = complex38.sub(complex46);
        code.src.Complex complex57 = new code.src.Complex();
        complex57.real = 1L;
        code.src.Complex complex62 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex65 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex66 = complex62.multiply(complex65);
        java.lang.String str67 = complex62.toString();
        code.src.Complex complex70 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex73 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex74 = complex70.multiply(complex73);
        code.src.Complex complex75 = complex62.add(complex74);
        code.src.Complex complex78 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex81 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex82 = complex78.multiply(complex81);
        java.lang.String str83 = complex78.toString();
        code.src.Complex complex86 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex89 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex90 = complex86.multiply(complex89);
        code.src.Complex complex91 = complex78.add(complex90);
        code.src.Complex complex92 = complex75.add(complex91);
        code.src.Complex complex93 = complex57.add(complex92);
        double double94 = complex57.imaginary;
        code.src.Complex complex95 = complex56.add(complex57);
        code.src.Complex complex98 = new code.src.Complex(1055.9594711542297d, (double) 100.0f);
        code.src.Complex complex99 = complex57.sub(complex98);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 43.756491210010616d + "'", double48 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str49, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 52.0d + "'", double53 == 52.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 28.09571990514327d + "'", double54 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(10.0,0.0)" + "'", str67, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(10.0,0.0)" + "'", str83, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
        org.junit.Assert.assertNotNull(complex95);
        org.junit.Assert.assertNotNull(complex99);
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0151");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        complex2.imaginary = 100L;
        code.src.Complex complex7 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex10 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex11 = complex7.multiply(complex10);
        code.src.Complex complex14 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex17 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex18 = complex14.multiply(complex17);
        java.lang.String str19 = complex14.toString();
        code.src.Complex complex22 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex25 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex26 = complex22.multiply(complex25);
        code.src.Complex complex27 = complex14.add(complex26);
        code.src.Complex complex30 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex33 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex34 = complex30.multiply(complex33);
        java.lang.String str35 = complex30.toString();
        code.src.Complex complex38 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex41 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex42 = complex38.multiply(complex41);
        code.src.Complex complex43 = complex30.add(complex42);
        code.src.Complex complex44 = complex27.add(complex43);
        code.src.Complex complex47 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex50 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex51 = complex47.multiply(complex50);
        code.src.Complex complex52 = complex27.sub(complex47);
        code.src.Complex complex53 = complex10.add(complex52);
        code.src.Complex complex54 = complex2.multiply(complex52);
        complex52.real = 481.32140331011675d;
        java.lang.Class<?> wildcardClass57 = complex52.getClass();
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(10.0,0.0)" + "'", str19, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(10.0,0.0)" + "'", str35, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0152");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        code.src.Complex complex9 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex12 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex13 = complex9.multiply(complex12);
        java.lang.String str14 = complex9.toString();
        code.src.Complex complex17 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex20 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex21 = complex17.multiply(complex20);
        code.src.Complex complex22 = complex9.add(complex21);
        code.src.Complex complex25 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex28 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex29 = complex25.multiply(complex28);
        java.lang.String str30 = complex25.toString();
        code.src.Complex complex33 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex36 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex37 = complex33.multiply(complex36);
        code.src.Complex complex38 = complex25.add(complex37);
        code.src.Complex complex39 = complex22.add(complex38);
        code.src.Complex complex42 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex45 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex46 = complex42.multiply(complex45);
        code.src.Complex complex47 = complex22.sub(complex42);
        code.src.Complex complex48 = complex5.add(complex47);
        double double49 = complex48.abs();
        code.src.Complex complex50 = new code.src.Complex();
        complex50.real = 1L;
        code.src.Complex complex55 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex58 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex59 = complex55.multiply(complex58);
        java.lang.String str60 = complex55.toString();
        code.src.Complex complex63 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex66 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex67 = complex63.multiply(complex66);
        code.src.Complex complex68 = complex55.add(complex67);
        code.src.Complex complex71 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex74 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex75 = complex71.multiply(complex74);
        java.lang.String str76 = complex71.toString();
        code.src.Complex complex79 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex82 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex83 = complex79.multiply(complex82);
        code.src.Complex complex84 = complex71.add(complex83);
        code.src.Complex complex85 = complex68.add(complex84);
        code.src.Complex complex86 = complex50.add(complex85);
        code.src.Complex complex87 = complex48.sub(complex85);
        complex85.imaginary = 43.756491210010616d;
        java.lang.Class<?> wildcardClass90 = complex85.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(10.0,0.0)" + "'", str14, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(10.0,0.0)" + "'", str30, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 572.0d + "'", double49 == 572.0d);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(10.0,0.0)" + "'", str60, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "(10.0,0.0)" + "'", str76, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0153");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        code.src.Complex complex33 = new code.src.Complex();
        code.src.Complex complex34 = complex32.add(complex33);
        code.src.Complex complex37 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex40 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex41 = complex37.multiply(complex40);
        double double42 = complex40.imaginary;
        java.lang.String str43 = complex40.toString();
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double47 = complex46.abs();
        double double48 = complex46.real;
        code.src.Complex complex49 = complex40.sub(complex46);
        code.src.Complex complex50 = complex33.sub(complex40);
        java.lang.Class<?> wildcardClass51 = complex33.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 43.756491210010616d + "'", double42 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str43, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 52.0d + "'", double47 == 52.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 28.09571990514327d + "'", double48 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0154");
        code.src.Complex complex2 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double3 = complex2.abs();
        double double4 = complex2.real;
        code.src.Complex complex7 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex10 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex11 = complex7.multiply(complex10);
        java.lang.String str12 = complex7.toString();
        code.src.Complex complex15 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex18 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex19 = complex15.multiply(complex18);
        code.src.Complex complex20 = complex7.add(complex19);
        code.src.Complex complex23 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex26 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex27 = complex23.multiply(complex26);
        java.lang.String str28 = complex23.toString();
        code.src.Complex complex31 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex34 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex35 = complex31.multiply(complex34);
        code.src.Complex complex36 = complex23.add(complex35);
        code.src.Complex complex37 = complex20.add(complex36);
        java.lang.String str38 = complex20.toString();
        double double39 = complex20.abs();
        double double40 = complex20.real;
        code.src.Complex complex41 = complex2.sub(complex20);
        complex20.real = 1;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 52.0d + "'", double3 == 52.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 28.09571990514327d + "'", double4 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(10.0,0.0)" + "'", str12, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(10.0,0.0)" + "'", str28, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str38, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 525.4704025737593d + "'", double39 == 525.4704025737593d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 290.95719905143267d + "'", double40 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex41);
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0155");
        code.src.Complex complex2 = new code.src.Complex((-28.09571990514327d), (-35.0d));
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0156");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 0, (double) ' ');
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        code.src.Complex complex40 = complex2.add(complex38);
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        java.lang.String str48 = complex43.toString();
        code.src.Complex complex51 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex54 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex55 = complex51.multiply(complex54);
        code.src.Complex complex56 = complex43.add(complex55);
        code.src.Complex complex59 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex62 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex63 = complex59.multiply(complex62);
        java.lang.String str64 = complex59.toString();
        code.src.Complex complex67 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex70 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex71 = complex67.multiply(complex70);
        code.src.Complex complex72 = complex59.add(complex71);
        code.src.Complex complex73 = complex56.add(complex72);
        code.src.Complex complex74 = new code.src.Complex();
        code.src.Complex complex75 = complex73.add(complex74);
        code.src.Complex complex76 = complex40.add(complex74);
        code.src.Complex complex79 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str80 = complex79.toString();
        java.lang.String str81 = complex79.toString();
        code.src.Complex complex82 = complex40.sub(complex79);
        double double83 = complex82.abs();
        java.lang.Class<?> wildcardClass84 = complex82.getClass();
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(10.0,0.0)" + "'", str48, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(10.0,0.0)" + "'", str64, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "(100.0,10.0)" + "'", str80, "(100.0,10.0)");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "(100.0,10.0)" + "'", str81, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1018.3729221500101d + "'", double83 == 1018.3729221500101d);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0157");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 0, (double) ' ');
        complex2.imaginary = (-1.0d);
        double double5 = complex2.real;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        code.src.Complex complex15 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex18 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex19 = complex15.multiply(complex18);
        java.lang.String str20 = complex15.toString();
        code.src.Complex complex23 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex26 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex27 = complex23.multiply(complex26);
        code.src.Complex complex28 = complex15.add(complex27);
        code.src.Complex complex31 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex34 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex35 = complex31.multiply(complex34);
        java.lang.String str36 = complex31.toString();
        code.src.Complex complex39 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex42 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex43 = complex39.multiply(complex42);
        code.src.Complex complex44 = complex31.add(complex43);
        code.src.Complex complex45 = complex28.add(complex44);
        code.src.Complex complex48 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex51 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex52 = complex48.multiply(complex51);
        code.src.Complex complex53 = complex28.sub(complex48);
        code.src.Complex complex54 = complex11.add(complex53);
        double double55 = complex54.abs();
        code.src.Complex complex56 = new code.src.Complex();
        complex56.real = 1L;
        code.src.Complex complex61 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex64 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex65 = complex61.multiply(complex64);
        java.lang.String str66 = complex61.toString();
        code.src.Complex complex69 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex72 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex73 = complex69.multiply(complex72);
        code.src.Complex complex74 = complex61.add(complex73);
        code.src.Complex complex77 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex80 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex81 = complex77.multiply(complex80);
        java.lang.String str82 = complex77.toString();
        code.src.Complex complex85 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex88 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex89 = complex85.multiply(complex88);
        code.src.Complex complex90 = complex77.add(complex89);
        code.src.Complex complex91 = complex74.add(complex90);
        code.src.Complex complex92 = complex56.add(complex91);
        code.src.Complex complex93 = complex54.sub(complex91);
        complex91.imaginary = 43.756491210010616d;
        code.src.Complex complex96 = complex2.multiply(complex91);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(10.0,0.0)" + "'", str20, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(10.0,0.0)" + "'", str36, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 572.0d + "'", double55 == 572.0d);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(10.0,0.0)" + "'", str66, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "(10.0,0.0)" + "'", str82, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertNotNull(complex96);
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0158");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 1, 290.95719905143267d);
        java.lang.String str3 = complex2.toString();
        code.src.Complex complex6 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double7 = complex6.abs();
        double double8 = complex6.real;
        code.src.Complex complex11 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex14 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex15 = complex11.multiply(complex14);
        java.lang.String str16 = complex11.toString();
        code.src.Complex complex19 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex22 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex23 = complex19.multiply(complex22);
        code.src.Complex complex24 = complex11.add(complex23);
        code.src.Complex complex27 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex30 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex31 = complex27.multiply(complex30);
        java.lang.String str32 = complex27.toString();
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        code.src.Complex complex40 = complex27.add(complex39);
        code.src.Complex complex41 = complex24.add(complex40);
        java.lang.String str42 = complex24.toString();
        double double43 = complex24.abs();
        double double44 = complex24.real;
        code.src.Complex complex45 = complex6.sub(complex24);
        code.src.Complex complex46 = complex2.add(complex6);
        java.lang.String str47 = complex46.toString();
        java.lang.Class<?> wildcardClass48 = complex46.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "(1.0,290.95719905143267)" + "'", str3, "(1.0,290.95719905143267)");
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 28.09571990514327d + "'", double8 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(10.0,0.0)" + "'", str16, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(10.0,0.0)" + "'", str32, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str42, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 525.4704025737593d + "'", double43 == 525.4704025737593d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 290.95719905143267d + "'", double44 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(29.09571990514327,334.7136902614433)" + "'", str47, "(29.09571990514327,334.7136902614433)");
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0159");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        code.src.Complex complex33 = new code.src.Complex();
        code.src.Complex complex34 = complex32.add(complex33);
        code.src.Complex complex37 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex40 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex41 = complex37.multiply(complex40);
        java.lang.String str42 = complex37.toString();
        code.src.Complex complex45 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex45.multiply(complex48);
        code.src.Complex complex50 = complex37.add(complex49);
        code.src.Complex complex53 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex56 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex57 = complex53.multiply(complex56);
        java.lang.String str58 = complex53.toString();
        code.src.Complex complex61 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex64 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex65 = complex61.multiply(complex64);
        code.src.Complex complex66 = complex53.add(complex65);
        code.src.Complex complex67 = complex50.add(complex66);
        code.src.Complex complex68 = new code.src.Complex();
        code.src.Complex complex69 = complex67.add(complex68);
        code.src.Complex complex72 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex75 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex76 = complex72.multiply(complex75);
        double double77 = complex75.imaginary;
        java.lang.String str78 = complex75.toString();
        code.src.Complex complex81 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double82 = complex81.abs();
        double double83 = complex81.real;
        code.src.Complex complex84 = complex75.sub(complex81);
        code.src.Complex complex85 = complex68.sub(complex75);
        code.src.Complex complex86 = complex33.add(complex68);
        double double87 = complex86.real;
        double double88 = complex86.real;
        double double89 = complex86.abs();
        java.lang.Class<?> wildcardClass90 = complex86.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(10.0,0.0)" + "'", str42, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(10.0,0.0)" + "'", str58, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 43.756491210010616d + "'", double77 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str78, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 52.0d + "'", double82 == 52.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 28.09571990514327d + "'", double83 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0160");
        code.src.Complex complex2 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        code.src.Complex complex5 = new code.src.Complex(290.95719905143267d, (-213613.9212426372d));
        code.src.Complex complex6 = complex2.add(complex5);
        complex6.imaginary = 'a';
        double double9 = complex6.imaginary;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 97.0d + "'", double9 == 97.0d);
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0161");
        code.src.Complex complex2 = code.src.Complex.polar((-317.11773840932915d), (double) (-1.0f));
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        double double40 = complex39.real;
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        code.src.Complex complex48 = complex39.sub(complex46);
        double double49 = complex39.imaginary;
        code.src.Complex complex50 = complex2.sub(complex39);
        code.src.Complex complex53 = new code.src.Complex(290.95719905143267d, (-213613.9212426372d));
        code.src.Complex complex54 = complex39.sub(complex53);
        complex53.imaginary = 0.0d;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 582.9143981028653d + "'", double40 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 875.1298242002123d + "'", double49 == 875.1298242002123d);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex54);
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0162");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        double double37 = complex0.imaginary;
        double double38 = complex0.imaginary;
        code.src.Complex complex39 = new code.src.Complex();
        complex39.real = 1L;
        code.src.Complex complex44 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex47 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex48 = complex44.multiply(complex47);
        java.lang.String str49 = complex44.toString();
        code.src.Complex complex52 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex55 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex56 = complex52.multiply(complex55);
        code.src.Complex complex57 = complex44.add(complex56);
        code.src.Complex complex60 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex63 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex64 = complex60.multiply(complex63);
        java.lang.String str65 = complex60.toString();
        code.src.Complex complex68 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex71 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex72 = complex68.multiply(complex71);
        code.src.Complex complex73 = complex60.add(complex72);
        code.src.Complex complex74 = complex57.add(complex73);
        code.src.Complex complex75 = complex39.add(complex74);
        double double76 = complex75.real;
        code.src.Complex complex79 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex82 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex83 = complex79.multiply(complex82);
        code.src.Complex complex84 = complex75.sub(complex82);
        code.src.Complex complex85 = complex0.sub(complex75);
        java.lang.Class<?> wildcardClass86 = complex0.getClass();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(10.0,0.0)" + "'", str49, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(10.0,0.0)" + "'", str65, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 582.9143981028653d + "'", double76 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0163");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 0, (double) ' ');
        code.src.Complex complex5 = new code.src.Complex((double) 10L, (double) '#');
        double double6 = complex5.imaginary;
        code.src.Complex complex7 = complex2.multiply(complex5);
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        double double15 = complex14.imaginary;
        code.src.Complex complex16 = complex7.multiply(complex14);
        code.src.Complex complex19 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex22 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex23 = complex19.multiply(complex22);
        java.lang.String str24 = complex19.toString();
        code.src.Complex complex27 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex30 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex31 = complex27.multiply(complex30);
        code.src.Complex complex32 = complex19.add(complex31);
        double double33 = complex32.real;
        code.src.Complex complex36 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex39 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex40 = complex36.multiply(complex39);
        double double41 = complex40.imaginary;
        code.src.Complex complex42 = complex32.sub(complex40);
        code.src.Complex complex45 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex45.multiply(complex48);
        code.src.Complex complex52 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex55 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex56 = complex52.multiply(complex55);
        java.lang.String str57 = complex52.toString();
        code.src.Complex complex60 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex63 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex64 = complex60.multiply(complex63);
        code.src.Complex complex65 = complex52.add(complex64);
        code.src.Complex complex68 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex71 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex72 = complex68.multiply(complex71);
        java.lang.String str73 = complex68.toString();
        code.src.Complex complex76 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex79 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex80 = complex76.multiply(complex79);
        code.src.Complex complex81 = complex68.add(complex80);
        code.src.Complex complex82 = complex65.add(complex81);
        code.src.Complex complex85 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex88 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex89 = complex85.multiply(complex88);
        code.src.Complex complex90 = complex65.sub(complex85);
        code.src.Complex complex91 = complex48.add(complex90);
        code.src.Complex complex92 = complex42.add(complex48);
        code.src.Complex complex93 = complex14.sub(complex48);
        java.lang.Class<?> wildcardClass94 = complex14.getClass();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 437.56491210010614d + "'", double15 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(10.0,0.0)" + "'", str24, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 290.95719905143267d + "'", double33 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 437.56491210010614d + "'", double41 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(10.0,0.0)" + "'", str57, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(10.0,0.0)" + "'", str73, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0164");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 10, (-317.11773840932915d));
        code.src.Complex complex5 = code.src.Complex.polar(28.09571990514327d, (double) 0);
        code.src.Complex complex6 = new code.src.Complex();
        complex6.real = 1L;
        code.src.Complex complex11 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex14 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex15 = complex11.multiply(complex14);
        java.lang.String str16 = complex11.toString();
        code.src.Complex complex19 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex22 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex23 = complex19.multiply(complex22);
        code.src.Complex complex24 = complex11.add(complex23);
        code.src.Complex complex27 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex30 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex31 = complex27.multiply(complex30);
        java.lang.String str32 = complex27.toString();
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        code.src.Complex complex40 = complex27.add(complex39);
        code.src.Complex complex41 = complex24.add(complex40);
        code.src.Complex complex42 = complex6.add(complex41);
        double double43 = complex42.real;
        code.src.Complex complex44 = complex5.add(complex42);
        code.src.Complex complex45 = complex2.multiply(complex44);
        code.src.Complex complex48 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex51 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex52 = complex48.multiply(complex51);
        java.lang.String str53 = complex48.toString();
        code.src.Complex complex56 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex59 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex60 = complex56.multiply(complex59);
        code.src.Complex complex61 = complex48.add(complex60);
        code.src.Complex complex64 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex67 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex68 = complex64.multiply(complex67);
        java.lang.String str69 = complex64.toString();
        code.src.Complex complex72 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex75 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex76 = complex72.multiply(complex75);
        code.src.Complex complex77 = complex64.add(complex76);
        code.src.Complex complex78 = complex61.add(complex77);
        code.src.Complex complex81 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex84 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex85 = complex81.multiply(complex84);
        code.src.Complex complex86 = complex61.sub(complex81);
        double double87 = complex86.imaginary;
        complex86.real = 290.95719905143267d;
        java.lang.String str90 = complex86.toString();
        code.src.Complex complex91 = complex45.sub(complex86);
        double double92 = complex86.abs();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(10.0,0.0)" + "'", str16, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(10.0,0.0)" + "'", str32, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 582.9143981028653d + "'", double43 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(10.0,0.0)" + "'", str53, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(10.0,0.0)" + "'", str69, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 437.56491210010614d + "'", double87 == 437.56491210010614d);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str90, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 525.4704025737593d + "'", double92 == 525.4704025737593d);
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0165");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        complex2.real = (byte) 1;
        complex2.imaginary = (short) 100;
        complex2.real = (-1);
        complex2.imaginary = 290.9589175121722d;
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0166");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        double double7 = complex5.imaginary;
        double double8 = complex5.imaginary;
        code.src.Complex complex11 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex14 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex15 = complex11.multiply(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex34 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex37 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex38 = complex34.multiply(complex37);
        java.lang.String str39 = complex34.toString();
        code.src.Complex complex42 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex45 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex46 = complex42.multiply(complex45);
        code.src.Complex complex47 = complex34.add(complex46);
        code.src.Complex complex48 = complex31.add(complex47);
        code.src.Complex complex51 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex54 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex55 = complex51.multiply(complex54);
        code.src.Complex complex56 = complex31.sub(complex51);
        code.src.Complex complex57 = complex14.add(complex56);
        double double58 = complex57.abs();
        double double59 = complex57.imaginary;
        complex57.imaginary = 1L;
        code.src.Complex complex62 = complex5.sub(complex57);
        complex5.imaginary = 875.8294407044641d;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 43.756491210010616d + "'", double7 == 43.756491210010616d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 43.756491210010616d + "'", double8 == 43.756491210010616d);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(10.0,0.0)" + "'", str39, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 572.0d + "'", double58 == 572.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 481.32140331011675d + "'", double59 == 481.32140331011675d);
        org.junit.Assert.assertNotNull(complex62);
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0167");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 10, (-317.11773840932915d));
        code.src.Complex complex5 = code.src.Complex.polar(28.09571990514327d, (double) 0);
        code.src.Complex complex6 = new code.src.Complex();
        complex6.real = 1L;
        code.src.Complex complex11 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex14 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex15 = complex11.multiply(complex14);
        java.lang.String str16 = complex11.toString();
        code.src.Complex complex19 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex22 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex23 = complex19.multiply(complex22);
        code.src.Complex complex24 = complex11.add(complex23);
        code.src.Complex complex27 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex30 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex31 = complex27.multiply(complex30);
        java.lang.String str32 = complex27.toString();
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        code.src.Complex complex40 = complex27.add(complex39);
        code.src.Complex complex41 = complex24.add(complex40);
        code.src.Complex complex42 = complex6.add(complex41);
        double double43 = complex42.real;
        code.src.Complex complex44 = complex5.add(complex42);
        code.src.Complex complex45 = complex2.multiply(complex44);
        java.lang.Class<?> wildcardClass46 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(10.0,0.0)" + "'", str16, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(10.0,0.0)" + "'", str32, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 582.9143981028653d + "'", double43 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0168");
        code.src.Complex complex2 = code.src.Complex.polar(290.9589175121722d, 481.32140331011675d);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0169");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        complex2.imaginary = 100L;
        code.src.Complex complex7 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex10 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex11 = complex7.multiply(complex10);
        code.src.Complex complex14 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex17 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex18 = complex14.multiply(complex17);
        java.lang.String str19 = complex14.toString();
        code.src.Complex complex22 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex25 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex26 = complex22.multiply(complex25);
        code.src.Complex complex27 = complex14.add(complex26);
        code.src.Complex complex30 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex33 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex34 = complex30.multiply(complex33);
        java.lang.String str35 = complex30.toString();
        code.src.Complex complex38 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex41 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex42 = complex38.multiply(complex41);
        code.src.Complex complex43 = complex30.add(complex42);
        code.src.Complex complex44 = complex27.add(complex43);
        code.src.Complex complex47 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex50 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex51 = complex47.multiply(complex50);
        code.src.Complex complex52 = complex27.sub(complex47);
        code.src.Complex complex53 = complex10.add(complex52);
        code.src.Complex complex54 = complex2.multiply(complex52);
        code.src.Complex complex57 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex60 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex61 = complex57.multiply(complex60);
        double double62 = complex61.imaginary;
        java.lang.String str63 = complex61.toString();
        java.lang.String str64 = complex61.toString();
        code.src.Complex complex65 = complex52.sub(complex61);
        code.src.Complex complex68 = code.src.Complex.polar((double) (byte) 10, (double) (short) 0);
        code.src.Complex complex69 = complex52.sub(complex68);
        complex68.real = (-28.09571990514327d);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(10.0,0.0)" + "'", str19, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(10.0,0.0)" + "'", str35, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 437.56491210010614d + "'", double62 == 437.56491210010614d);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(280.95719905143267,437.56491210010614)" + "'", str63, "(280.95719905143267,437.56491210010614)");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(280.95719905143267,437.56491210010614)" + "'", str64, "(280.95719905143267,437.56491210010614)");
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0170");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        complex15.real = (-0.5440211108893698d);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0171");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 100, 43.756491210010616d);
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        double double40 = complex39.real;
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        code.src.Complex complex48 = complex39.sub(complex46);
        code.src.Complex complex49 = complex2.add(complex46);
        code.src.Complex complex52 = new code.src.Complex((double) (short) 1, 290.95719905143267d);
        java.lang.String str53 = complex52.toString();
        code.src.Complex complex56 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double57 = complex56.abs();
        double double58 = complex56.real;
        code.src.Complex complex61 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex64 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex65 = complex61.multiply(complex64);
        java.lang.String str66 = complex61.toString();
        code.src.Complex complex69 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex72 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex73 = complex69.multiply(complex72);
        code.src.Complex complex74 = complex61.add(complex73);
        code.src.Complex complex77 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex80 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex81 = complex77.multiply(complex80);
        java.lang.String str82 = complex77.toString();
        code.src.Complex complex85 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex88 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex89 = complex85.multiply(complex88);
        code.src.Complex complex90 = complex77.add(complex89);
        code.src.Complex complex91 = complex74.add(complex90);
        java.lang.String str92 = complex74.toString();
        double double93 = complex74.abs();
        double double94 = complex74.real;
        code.src.Complex complex95 = complex56.sub(complex74);
        code.src.Complex complex96 = complex52.add(complex56);
        code.src.Complex complex97 = complex2.add(complex56);
        double double98 = complex2.imaginary;
        java.lang.Class<?> wildcardClass99 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 582.9143981028653d + "'", double40 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(1.0,290.95719905143267)" + "'", str53, "(1.0,290.95719905143267)");
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 52.0d + "'", double57 == 52.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 28.09571990514327d + "'", double58 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(10.0,0.0)" + "'", str66, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "(10.0,0.0)" + "'", str82, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str92, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 525.4704025737593d + "'", double93 == 525.4704025737593d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 290.95719905143267d + "'", double94 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex95);
        org.junit.Assert.assertNotNull(complex96);
        org.junit.Assert.assertNotNull(complex97);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 43.756491210010616d + "'", double98 == 43.756491210010616d);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0172");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        complex2.imaginary = 100L;
        code.src.Complex complex7 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex10 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex11 = complex7.multiply(complex10);
        code.src.Complex complex14 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex17 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex18 = complex14.multiply(complex17);
        java.lang.String str19 = complex14.toString();
        code.src.Complex complex22 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex25 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex26 = complex22.multiply(complex25);
        code.src.Complex complex27 = complex14.add(complex26);
        code.src.Complex complex30 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex33 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex34 = complex30.multiply(complex33);
        java.lang.String str35 = complex30.toString();
        code.src.Complex complex38 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex41 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex42 = complex38.multiply(complex41);
        code.src.Complex complex43 = complex30.add(complex42);
        code.src.Complex complex44 = complex27.add(complex43);
        code.src.Complex complex47 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex50 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex51 = complex47.multiply(complex50);
        code.src.Complex complex52 = complex27.sub(complex47);
        code.src.Complex complex53 = complex10.add(complex52);
        code.src.Complex complex54 = complex2.multiply(complex52);
        double double55 = complex2.real;
        code.src.Complex complex58 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        double double59 = complex58.imaginary;
        code.src.Complex complex60 = complex2.add(complex58);
        complex60.imaginary = 10;
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(10.0,0.0)" + "'", str19, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(10.0,0.0)" + "'", str35, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 100.0d + "'", double55 == 100.0d);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + (-317.11773840932915d) + "'", double59 == (-317.11773840932915d));
        org.junit.Assert.assertNotNull(complex60);
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 0, (double) ' ');
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        code.src.Complex complex40 = complex2.add(complex38);
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        java.lang.String str48 = complex43.toString();
        code.src.Complex complex51 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex54 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex55 = complex51.multiply(complex54);
        code.src.Complex complex56 = complex43.add(complex55);
        code.src.Complex complex59 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex62 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex63 = complex59.multiply(complex62);
        java.lang.String str64 = complex59.toString();
        code.src.Complex complex67 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex70 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex71 = complex67.multiply(complex70);
        code.src.Complex complex72 = complex59.add(complex71);
        code.src.Complex complex73 = complex56.add(complex72);
        code.src.Complex complex74 = new code.src.Complex();
        code.src.Complex complex75 = complex73.add(complex74);
        code.src.Complex complex76 = complex40.add(complex74);
        java.lang.String str77 = complex40.toString();
        complex40.real = 170.71953646075502d;
        double double80 = complex40.imaginary;
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(10.0,0.0)" + "'", str48, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(10.0,0.0)" + "'", str64, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(581.9143981028653,907.1298242002123)" + "'", str77, "(581.9143981028653,907.1298242002123)");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 907.1298242002123d + "'", double80 == 907.1298242002123d);
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0174");
        code.src.Complex complex2 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex2.imaginary = (short) 0;
        complex2.imaginary = 100.0f;
        code.src.Complex complex9 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str10 = complex9.toString();
        code.src.Complex complex13 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        code.src.Complex complex14 = complex9.sub(complex13);
        code.src.Complex complex15 = complex2.multiply(complex14);
        code.src.Complex complex16 = new code.src.Complex();
        code.src.Complex complex19 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex22 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex23 = complex19.multiply(complex22);
        java.lang.String str24 = complex19.toString();
        code.src.Complex complex27 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex30 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex31 = complex27.multiply(complex30);
        code.src.Complex complex32 = complex19.add(complex31);
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        java.lang.String str40 = complex35.toString();
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        code.src.Complex complex48 = complex35.add(complex47);
        code.src.Complex complex49 = complex32.add(complex48);
        double double50 = complex49.real;
        code.src.Complex complex51 = complex16.multiply(complex49);
        code.src.Complex complex54 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex57 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex58 = complex54.multiply(complex57);
        java.lang.String str59 = complex54.toString();
        code.src.Complex complex62 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex65 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex66 = complex62.multiply(complex65);
        code.src.Complex complex67 = complex54.add(complex66);
        code.src.Complex complex70 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex73 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex74 = complex70.multiply(complex73);
        java.lang.String str75 = complex70.toString();
        code.src.Complex complex78 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex81 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex82 = complex78.multiply(complex81);
        code.src.Complex complex83 = complex70.add(complex82);
        code.src.Complex complex84 = complex67.add(complex83);
        java.lang.String str85 = complex67.toString();
        double double86 = complex67.abs();
        code.src.Complex complex87 = complex16.multiply(complex67);
        code.src.Complex complex88 = complex15.add(complex87);
        java.lang.String str89 = complex88.toString();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(100.0,10.0)" + "'", str10, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(10.0,0.0)" + "'", str24, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(10.0,0.0)" + "'", str40, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 581.9143981028653d + "'", double50 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(10.0,0.0)" + "'", str59, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(10.0,0.0)" + "'", str75, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str85, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 525.4704025737593d + "'", double86 == 525.4704025737593d);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "(-32711.773840932914,58910.68753368511)" + "'", str89, "(-32711.773840932914,58910.68753368511)");
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0175");
        code.src.Complex complex2 = new code.src.Complex((-389.10687533685115d), (-437.56491210010614d));
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0176");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        double double33 = complex15.real;
        double double34 = complex15.real;
        code.src.Complex complex37 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex40 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex41 = complex37.multiply(complex40);
        java.lang.String str42 = complex37.toString();
        code.src.Complex complex45 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex45.multiply(complex48);
        code.src.Complex complex50 = complex37.add(complex49);
        code.src.Complex complex53 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex56 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex57 = complex53.multiply(complex56);
        java.lang.String str58 = complex53.toString();
        code.src.Complex complex61 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex64 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex65 = complex61.multiply(complex64);
        code.src.Complex complex66 = complex53.add(complex65);
        code.src.Complex complex67 = complex50.add(complex66);
        code.src.Complex complex68 = complex15.sub(complex50);
        complex68.imaginary = 1.0f;
        double double71 = complex68.real;
        java.lang.String str72 = complex68.toString();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 290.95719905143267d + "'", double33 == 290.95719905143267d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 290.95719905143267d + "'", double34 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(10.0,0.0)" + "'", str42, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(10.0,0.0)" + "'", str58, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(0.0,1.0)" + "'", str72, "(0.0,1.0)");
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0177");
        code.src.Complex complex2 = code.src.Complex.polar(36.40054944640259d, (double) 100.0f);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0178");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        double double37 = complex0.imaginary;
        double double38 = complex0.imaginary;
        code.src.Complex complex41 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex44 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex45 = complex41.multiply(complex44);
        java.lang.String str46 = complex41.toString();
        code.src.Complex complex49 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex52 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex53 = complex49.multiply(complex52);
        code.src.Complex complex54 = complex41.add(complex53);
        code.src.Complex complex57 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex60 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex61 = complex57.multiply(complex60);
        java.lang.String str62 = complex57.toString();
        code.src.Complex complex65 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex68 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex69 = complex65.multiply(complex68);
        code.src.Complex complex70 = complex57.add(complex69);
        code.src.Complex complex71 = complex54.add(complex70);
        code.src.Complex complex72 = new code.src.Complex();
        code.src.Complex complex73 = complex71.add(complex72);
        code.src.Complex complex76 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex79 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex80 = complex76.multiply(complex79);
        double double81 = complex79.imaginary;
        java.lang.String str82 = complex79.toString();
        code.src.Complex complex85 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double86 = complex85.abs();
        double double87 = complex85.real;
        code.src.Complex complex88 = complex79.sub(complex85);
        code.src.Complex complex89 = complex72.sub(complex79);
        code.src.Complex complex90 = complex0.add(complex79);
        complex79.real = 0.0f;
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(10.0,0.0)" + "'", str46, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(10.0,0.0)" + "'", str62, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 43.756491210010616d + "'", double81 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str82, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 52.0d + "'", double86 == 52.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 28.09571990514327d + "'", double87 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0179");
        code.src.Complex complex2 = new code.src.Complex((-213613.9212426372d), (double) 0L);
        double double3 = complex2.imaginary;
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0180");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        code.src.Complex complex33 = new code.src.Complex();
        code.src.Complex complex34 = complex32.add(complex33);
        double double35 = complex34.imaginary;
        double double36 = complex34.real;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 875.1298242002123d + "'", double35 == 875.1298242002123d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 581.9143981028653d + "'", double36 == 581.9143981028653d);
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0181");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        code.src.Complex complex9 = new code.src.Complex((double) 100, (double) 10.0f);
        complex9.real = (byte) 1;
        complex9.imaginary = (short) 100;
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        java.lang.String str21 = complex16.toString();
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        code.src.Complex complex29 = complex16.add(complex28);
        double double30 = complex29.real;
        code.src.Complex complex33 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex34 = complex29.multiply(complex33);
        code.src.Complex complex35 = complex9.multiply(complex29);
        code.src.Complex complex36 = complex2.sub(complex29);
        double double37 = complex36.imaginary;
        java.lang.Class<?> wildcardClass38 = complex36.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(10.0,0.0)" + "'", str21, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 290.95719905143267d + "'", double30 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + (-437.56491210010614d) + "'", double37 == (-437.56491210010614d));
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0182");
        code.src.Complex complex2 = code.src.Complex.polar((double) (byte) 100, 582.9143981028653d);
        complex2.real = 875.1298242002123d;
        complex2.imaginary = (-317.11773840932915d);
        complex2.real = 875.1298242002123d;
        double double9 = complex2.imaginary;
        complex2.imaginary = 430.3716436914759d;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-317.11773840932915d) + "'", double9 == (-317.11773840932915d));
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0183");
        code.src.Complex complex2 = code.src.Complex.polar(170.71953646075502d, 0.0d);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0184");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        code.src.Complex complex33 = new code.src.Complex();
        code.src.Complex complex34 = complex32.add(complex33);
        complex32.real = 10;
        code.src.Complex complex39 = new code.src.Complex(28.09571990514327d, 907.1298242002123d);
        code.src.Complex complex42 = code.src.Complex.polar((double) (byte) 10, (double) (short) 0);
        code.src.Complex complex43 = complex39.multiply(complex42);
        code.src.Complex complex44 = complex32.multiply(complex43);
        java.lang.Class<?> wildcardClass45 = complex43.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0185");
        code.src.Complex complex2 = new code.src.Complex(10.0d, (double) 10L);
        code.src.Complex complex5 = code.src.Complex.polar((double) '#', (double) (byte) 100);
        code.src.Complex complex6 = complex2.multiply(complex5);
        double double7 = complex2.real;
        double double8 = complex2.real;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0186");
        code.src.Complex complex2 = code.src.Complex.polar((-288.4361024143587d), (double) (-1L));
        double double3 = complex2.imaginary;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 242.7106111527617d + "'", double3 == 242.7106111527617d);
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0187");
        code.src.Complex complex2 = new code.src.Complex(10.04987562112089d, (double) '#');
        complex2.real = 432.1247009912124d;
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0188");
        code.src.Complex complex2 = new code.src.Complex(214489.24976920983d, 520.0d);
        java.lang.Class<?> wildcardClass3 = complex2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0189");
        code.src.Complex complex2 = code.src.Complex.polar(1050.9408051475186d, (double) 0L);
        java.lang.Class<?> wildcardClass3 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        code.src.Complex complex2 = new code.src.Complex((double) 0L, 1018.3729221500101d);
        code.src.Complex complex5 = new code.src.Complex((double) 10L, (double) '#');
        double double6 = complex5.imaginary;
        double double7 = complex5.abs();
        code.src.Complex complex8 = complex2.multiply(complex5);
        java.lang.Class<?> wildcardClass9 = complex8.getClass();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 36.40054944640259d + "'", double7 == 36.40054944640259d);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0191");
        code.src.Complex complex2 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex2.imaginary = (short) 0;
        complex2.imaginary = 100.0f;
        code.src.Complex complex9 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str10 = complex9.toString();
        code.src.Complex complex13 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        code.src.Complex complex14 = complex9.sub(complex13);
        code.src.Complex complex15 = complex2.multiply(complex14);
        code.src.Complex complex16 = new code.src.Complex();
        code.src.Complex complex19 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex22 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex23 = complex19.multiply(complex22);
        java.lang.String str24 = complex19.toString();
        code.src.Complex complex27 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex30 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex31 = complex27.multiply(complex30);
        code.src.Complex complex32 = complex19.add(complex31);
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        java.lang.String str40 = complex35.toString();
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        code.src.Complex complex48 = complex35.add(complex47);
        code.src.Complex complex49 = complex32.add(complex48);
        double double50 = complex49.real;
        code.src.Complex complex51 = complex16.multiply(complex49);
        code.src.Complex complex54 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex57 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex58 = complex54.multiply(complex57);
        java.lang.String str59 = complex54.toString();
        code.src.Complex complex62 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex65 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex66 = complex62.multiply(complex65);
        code.src.Complex complex67 = complex54.add(complex66);
        code.src.Complex complex70 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex73 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex74 = complex70.multiply(complex73);
        java.lang.String str75 = complex70.toString();
        code.src.Complex complex78 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex81 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex82 = complex78.multiply(complex81);
        code.src.Complex complex83 = complex70.add(complex82);
        code.src.Complex complex84 = complex67.add(complex83);
        java.lang.String str85 = complex67.toString();
        double double86 = complex67.abs();
        code.src.Complex complex87 = complex16.multiply(complex67);
        code.src.Complex complex88 = complex15.add(complex87);
        double double89 = complex88.imaginary;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(100.0,10.0)" + "'", str10, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(10.0,0.0)" + "'", str24, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(10.0,0.0)" + "'", str40, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 581.9143981028653d + "'", double50 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(10.0,0.0)" + "'", str59, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(10.0,0.0)" + "'", str75, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str85, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 525.4704025737593d + "'", double86 == 525.4704025737593d);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 58910.68753368511d + "'", double89 == 58910.68753368511d);
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0192");
        code.src.Complex complex2 = new code.src.Complex((double) (byte) 10, (-288.4361024143587d));
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0193");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex2.add(complex18);
        code.src.Complex complex39 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex39.imaginary = (short) 0;
        complex39.imaginary = 100.0f;
        code.src.Complex complex46 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str47 = complex46.toString();
        code.src.Complex complex50 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        code.src.Complex complex51 = complex46.sub(complex50);
        code.src.Complex complex52 = complex39.multiply(complex51);
        java.lang.String str53 = complex51.toString();
        code.src.Complex complex54 = complex2.sub(complex51);
        double double55 = complex2.imaginary;
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(100.0,10.0)" + "'", str47, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(589.1068753368511,327.11773840932915)" + "'", str53, "(589.1068753368511,327.11773840932915)");
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0194");
        code.src.Complex complex2 = code.src.Complex.polar((double) 1L, (double) 100);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.add(complex5);
        java.lang.String str7 = complex2.toString();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(0.8623188722876839,-0.5063656411097588)" + "'", str7, "(0.8623188722876839,-0.5063656411097588)");
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0195");
        code.src.Complex complex2 = new code.src.Complex((double) 1, 28.09571990514327d);
        code.src.Complex complex5 = new code.src.Complex((double) (short) 0, (double) ' ');
        code.src.Complex complex6 = new code.src.Complex();
        complex6.real = 1L;
        code.src.Complex complex11 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex14 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex15 = complex11.multiply(complex14);
        java.lang.String str16 = complex11.toString();
        code.src.Complex complex19 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex22 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex23 = complex19.multiply(complex22);
        code.src.Complex complex24 = complex11.add(complex23);
        code.src.Complex complex27 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex30 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex31 = complex27.multiply(complex30);
        java.lang.String str32 = complex27.toString();
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        code.src.Complex complex40 = complex27.add(complex39);
        code.src.Complex complex41 = complex24.add(complex40);
        code.src.Complex complex42 = complex6.add(complex41);
        code.src.Complex complex43 = complex5.add(complex41);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double47 = complex46.abs();
        code.src.Complex complex48 = complex5.add(complex46);
        code.src.Complex complex49 = complex2.add(complex5);
        complex49.real = 1050.9408051475186d;
        java.lang.Class<?> wildcardClass52 = complex49.getClass();
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(10.0,0.0)" + "'", str16, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(10.0,0.0)" + "'", str32, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 52.0d + "'", double47 == 52.0d);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0196");
        code.src.Complex complex2 = new code.src.Complex(0.0d, (double) 0.0f);
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0197");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        code.src.Complex complex9 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex12 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex13 = complex9.multiply(complex12);
        java.lang.String str14 = complex9.toString();
        code.src.Complex complex17 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex20 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex21 = complex17.multiply(complex20);
        code.src.Complex complex22 = complex9.add(complex21);
        code.src.Complex complex25 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex28 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex29 = complex25.multiply(complex28);
        java.lang.String str30 = complex25.toString();
        code.src.Complex complex33 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex36 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex37 = complex33.multiply(complex36);
        code.src.Complex complex38 = complex25.add(complex37);
        code.src.Complex complex39 = complex22.add(complex38);
        code.src.Complex complex42 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex45 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex46 = complex42.multiply(complex45);
        code.src.Complex complex47 = complex22.sub(complex42);
        code.src.Complex complex48 = complex5.add(complex47);
        double double49 = complex48.abs();
        code.src.Complex complex50 = new code.src.Complex();
        complex50.real = 1L;
        code.src.Complex complex55 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex58 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex59 = complex55.multiply(complex58);
        java.lang.String str60 = complex55.toString();
        code.src.Complex complex63 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex66 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex67 = complex63.multiply(complex66);
        code.src.Complex complex68 = complex55.add(complex67);
        code.src.Complex complex71 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex74 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex75 = complex71.multiply(complex74);
        java.lang.String str76 = complex71.toString();
        code.src.Complex complex79 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex82 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex83 = complex79.multiply(complex82);
        code.src.Complex complex84 = complex71.add(complex83);
        code.src.Complex complex85 = complex68.add(complex84);
        code.src.Complex complex86 = complex50.add(complex85);
        code.src.Complex complex87 = complex48.sub(complex85);
        complex85.imaginary = 43.756491210010616d;
        code.src.Complex complex92 = code.src.Complex.polar((double) 'a', (double) (short) 1);
        code.src.Complex complex93 = complex85.add(complex92);
        complex92.real = 875.8294407044641d;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(10.0,0.0)" + "'", str14, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(10.0,0.0)" + "'", str30, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 572.0d + "'", double49 == 572.0d);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(10.0,0.0)" + "'", str60, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "(10.0,0.0)" + "'", str76, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complex93);
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str3 = complex2.toString();
        java.lang.String str4 = complex2.toString();
        java.lang.String str5 = complex2.toString();
        complex2.real = 0.0d;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "(100.0,10.0)" + "'", str3, "(100.0,10.0)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(100.0,10.0)" + "'", str4, "(100.0,10.0)");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(100.0,10.0)" + "'", str5, "(100.0,10.0)");
    }

    @Test
    public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0199");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        double double37 = complex36.real;
        code.src.Complex complex40 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex43 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex44 = complex40.multiply(complex43);
        code.src.Complex complex45 = complex36.sub(complex43);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex43.add(complex48);
        code.src.Complex complex52 = new code.src.Complex((double) 10L, (double) '#');
        code.src.Complex complex53 = complex48.add(complex52);
        code.src.Complex complex56 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex56.imaginary = (short) 0;
        complex56.imaginary = 100.0f;
        code.src.Complex complex61 = complex48.multiply(complex56);
        code.src.Complex complex64 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex67 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex68 = complex64.multiply(complex67);
        java.lang.String str69 = complex64.toString();
        code.src.Complex complex72 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex75 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex76 = complex72.multiply(complex75);
        code.src.Complex complex77 = complex64.add(complex76);
        double double78 = complex77.real;
        code.src.Complex complex81 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex84 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex85 = complex81.multiply(complex84);
        double double86 = complex85.imaginary;
        code.src.Complex complex87 = complex77.sub(complex85);
        code.src.Complex complex90 = code.src.Complex.polar(0.0d, (double) (short) -1);
        code.src.Complex complex91 = complex77.multiply(complex90);
        code.src.Complex complex92 = complex48.multiply(complex90);
        complex90.real = 1077.733215908709d;
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 582.9143981028653d + "'", double37 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(10.0,0.0)" + "'", str69, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 290.95719905143267d + "'", double78 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 437.56491210010614d + "'", double86 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0200");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        double double37 = complex36.real;
        java.lang.String str38 = complex36.toString();
        double double39 = complex36.imaginary;
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 582.9143981028653d + "'", double37 == 582.9143981028653d);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(582.9143981028653,875.1298242002123)" + "'", str38, "(582.9143981028653,875.1298242002123)");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 875.1298242002123d + "'", double39 == 875.1298242002123d);
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0201");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        java.lang.String str8 = complex2.toString();
        complex2.real = (-906.2883532154044d);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(10.0,0.0)" + "'", str8, "(10.0,0.0)");
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0202");
        code.src.Complex complex2 = code.src.Complex.polar((double) (short) -1, (double) (byte) 0);
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        double double36 = complex18.real;
        double double37 = complex18.real;
        code.src.Complex complex40 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex43 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex44 = complex40.multiply(complex43);
        java.lang.String str45 = complex40.toString();
        code.src.Complex complex48 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex51 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex52 = complex48.multiply(complex51);
        code.src.Complex complex53 = complex40.add(complex52);
        code.src.Complex complex56 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex59 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex60 = complex56.multiply(complex59);
        java.lang.String str61 = complex56.toString();
        code.src.Complex complex64 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex67 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex68 = complex64.multiply(complex67);
        code.src.Complex complex69 = complex56.add(complex68);
        code.src.Complex complex70 = complex53.add(complex69);
        code.src.Complex complex71 = complex18.sub(complex53);
        double double72 = complex53.imaginary;
        code.src.Complex complex73 = complex2.add(complex53);
        code.src.Complex complex76 = new code.src.Complex(525.4704025737593d, (double) 10L);
        code.src.Complex complex77 = complex73.multiply(complex76);
        complex73.real = 109.15415943981125d;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 290.95719905143267d + "'", double36 == 290.95719905143267d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 290.95719905143267d + "'", double37 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "(10.0,0.0)" + "'", str45, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(10.0,0.0)" + "'", str61, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 437.56491210010614d + "'", double72 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex77);
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0203");
        code.src.Complex complex2 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        complex2.real = 582.9143981028653d;
        code.src.Complex complex7 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str8 = complex7.toString();
        code.src.Complex complex11 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        code.src.Complex complex12 = complex7.sub(complex11);
        code.src.Complex complex13 = complex2.sub(complex11);
        java.lang.Class<?> wildcardClass14 = complex13.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(100.0,10.0)" + "'", str8, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0204");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        code.src.Complex complex33 = new code.src.Complex();
        complex33.real = 1L;
        code.src.Complex complex38 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex41 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex42 = complex38.multiply(complex41);
        java.lang.String str43 = complex38.toString();
        code.src.Complex complex46 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex49 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex50 = complex46.multiply(complex49);
        code.src.Complex complex51 = complex38.add(complex50);
        code.src.Complex complex54 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex57 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex58 = complex54.multiply(complex57);
        java.lang.String str59 = complex54.toString();
        code.src.Complex complex62 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex65 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex66 = complex62.multiply(complex65);
        code.src.Complex complex67 = complex54.add(complex66);
        code.src.Complex complex68 = complex51.add(complex67);
        code.src.Complex complex69 = complex33.add(complex68);
        double double70 = complex69.real;
        code.src.Complex complex73 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex76 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex77 = complex73.multiply(complex76);
        code.src.Complex complex78 = complex69.sub(complex76);
        code.src.Complex complex81 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex82 = complex76.add(complex81);
        code.src.Complex complex85 = new code.src.Complex((double) 10L, (double) '#');
        code.src.Complex complex86 = complex81.add(complex85);
        code.src.Complex complex89 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex89.imaginary = (short) 0;
        complex89.imaginary = 100.0f;
        code.src.Complex complex94 = complex81.multiply(complex89);
        code.src.Complex complex95 = complex32.add(complex89);
        java.lang.String str96 = complex32.toString();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(10.0,0.0)" + "'", str43, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(10.0,0.0)" + "'", str59, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 582.9143981028653d + "'", double70 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex94);
        org.junit.Assert.assertNotNull(complex95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "(581.9143981028653,875.1298242002123)" + "'", str96, "(581.9143981028653,875.1298242002123)");
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        code.src.Complex complex2 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        double double3 = complex2.abs();
        code.src.Complex complex6 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str7 = complex6.toString();
        code.src.Complex complex8 = complex2.multiply(complex6);
        complex6.real = 35.0d;
        code.src.Complex complex11 = new code.src.Complex();
        complex11.real = 1L;
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        java.lang.String str21 = complex16.toString();
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        code.src.Complex complex29 = complex16.add(complex28);
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        java.lang.String str37 = complex32.toString();
        code.src.Complex complex40 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex43 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex44 = complex40.multiply(complex43);
        code.src.Complex complex45 = complex32.add(complex44);
        code.src.Complex complex46 = complex29.add(complex45);
        code.src.Complex complex47 = complex11.add(complex46);
        double double48 = complex47.real;
        code.src.Complex complex51 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex54 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex55 = complex51.multiply(complex54);
        code.src.Complex complex56 = complex47.sub(complex54);
        code.src.Complex complex59 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex60 = complex54.add(complex59);
        code.src.Complex complex61 = complex6.multiply(complex60);
        java.lang.Class<?> wildcardClass62 = complex60.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(100.0,10.0)" + "'", str7, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(10.0,0.0)" + "'", str21, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(10.0,0.0)" + "'", str37, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 582.9143981028653d + "'", double48 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0206");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 0, (double) ' ');
        code.src.Complex complex5 = new code.src.Complex((double) 10L, (double) '#');
        double double6 = complex5.imaginary;
        code.src.Complex complex7 = complex2.multiply(complex5);
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        double double15 = complex14.imaginary;
        code.src.Complex complex16 = complex7.multiply(complex14);
        double double17 = complex7.imaginary;
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 437.56491210010614d + "'", double15 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 320.0d + "'", double17 == 320.0d);
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0207");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        code.src.Complex complex33 = new code.src.Complex();
        code.src.Complex complex34 = complex32.add(complex33);
        code.src.Complex complex37 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex40 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex41 = complex37.multiply(complex40);
        java.lang.String str42 = complex37.toString();
        code.src.Complex complex45 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex45.multiply(complex48);
        code.src.Complex complex50 = complex37.add(complex49);
        code.src.Complex complex53 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex56 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex57 = complex53.multiply(complex56);
        java.lang.String str58 = complex53.toString();
        code.src.Complex complex61 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex64 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex65 = complex61.multiply(complex64);
        code.src.Complex complex66 = complex53.add(complex65);
        code.src.Complex complex67 = complex50.add(complex66);
        code.src.Complex complex68 = new code.src.Complex();
        code.src.Complex complex69 = complex67.add(complex68);
        code.src.Complex complex72 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex75 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex76 = complex72.multiply(complex75);
        double double77 = complex75.imaginary;
        java.lang.String str78 = complex75.toString();
        code.src.Complex complex81 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double82 = complex81.abs();
        double double83 = complex81.real;
        code.src.Complex complex84 = complex75.sub(complex81);
        code.src.Complex complex85 = complex68.sub(complex75);
        code.src.Complex complex86 = complex33.add(complex68);
        java.lang.Class<?> wildcardClass87 = complex86.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(10.0,0.0)" + "'", str42, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(10.0,0.0)" + "'", str58, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 43.756491210010616d + "'", double77 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str78, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 52.0d + "'", double82 == 52.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 28.09571990514327d + "'", double83 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0208");
        code.src.Complex complex2 = new code.src.Complex(291.13071236105446d, 291.95719905143267d);
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0209");
        code.src.Complex complex2 = new code.src.Complex(0.0d, (-0.0d));
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        code.src.Complex complex2 = code.src.Complex.polar((-317.11773840932915d), (double) (-1.0f));
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        double double40 = complex39.real;
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        code.src.Complex complex48 = complex39.sub(complex46);
        double double49 = complex39.imaginary;
        code.src.Complex complex50 = complex2.sub(complex39);
        code.src.Complex complex53 = new code.src.Complex((double) (short) 0, (double) ' ');
        code.src.Complex complex56 = new code.src.Complex((double) 10L, (double) '#');
        double double57 = complex56.imaginary;
        code.src.Complex complex58 = complex53.multiply(complex56);
        code.src.Complex complex59 = complex50.multiply(complex56);
        complex50.real = 1050.9408051475186d;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 582.9143981028653d + "'", double40 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 875.1298242002123d + "'", double49 == 875.1298242002123d);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 35.0d + "'", double57 == 35.0d);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0211");
        code.src.Complex complex2 = new code.src.Complex(10.0d, 242.7106111527617d);
        code.src.Complex complex3 = null;
        // The following exception was thrown during execution in test generation
        try {
            code.src.Complex complex4 = complex2.add(complex3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0212");
        code.src.Complex complex2 = code.src.Complex.polar(393.80842089009553d, 35.0d);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0213");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        code.src.Complex complex40 = complex15.sub(complex35);
        double double41 = complex40.imaginary;
        java.lang.Class<?> wildcardClass42 = complex40.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 437.56491210010614d + "'", double41 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0214");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 0, (double) ' ');
        complex2.imaginary = (-1.0d);
        java.lang.Class<?> wildcardClass5 = complex2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0215");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 1, 290.95719905143267d);
        java.lang.String str3 = complex2.toString();
        double double4 = complex2.abs();
        complex2.real = 1051.4948429356753d;
        java.lang.Class<?> wildcardClass7 = complex2.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "(1.0,290.95719905143267)" + "'", str3, "(1.0,290.95719905143267)");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 290.9589175121722d + "'", double4 == 290.9589175121722d);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        code.src.Complex complex2 = new code.src.Complex((double) (byte) -1, 141.4213562373095d);
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0217");
        code.src.Complex complex2 = new code.src.Complex(100.0d, (double) 100);
        complex2.imaginary = 71852.21111515388d;
        code.src.Complex complex5 = null;
        // The following exception was thrown during execution in test generation
        try {
            code.src.Complex complex6 = complex2.multiply(complex5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0218");
        code.src.Complex complex2 = new code.src.Complex(291.95719905143267d, (double) 'a');
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0219");
        code.src.Complex complex2 = code.src.Complex.polar(290.95719905143267d, (-28.09571990514327d));
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0220");
        code.src.Complex complex2 = code.src.Complex.polar(141.4213562373095d, (double) 10.0f);
        java.lang.Class<?> wildcardClass3 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0221");
        code.src.Complex complex2 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex2.imaginary = (short) 0;
        complex2.imaginary = 100.0f;
        code.src.Complex complex9 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str10 = complex9.toString();
        code.src.Complex complex13 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        code.src.Complex complex14 = complex9.sub(complex13);
        code.src.Complex complex15 = complex2.multiply(complex14);
        code.src.Complex complex16 = new code.src.Complex();
        code.src.Complex complex19 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex22 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex23 = complex19.multiply(complex22);
        java.lang.String str24 = complex19.toString();
        code.src.Complex complex27 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex30 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex31 = complex27.multiply(complex30);
        code.src.Complex complex32 = complex19.add(complex31);
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        java.lang.String str40 = complex35.toString();
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        code.src.Complex complex48 = complex35.add(complex47);
        code.src.Complex complex49 = complex32.add(complex48);
        double double50 = complex49.real;
        code.src.Complex complex51 = complex16.multiply(complex49);
        code.src.Complex complex54 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex57 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex58 = complex54.multiply(complex57);
        java.lang.String str59 = complex54.toString();
        code.src.Complex complex62 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex65 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex66 = complex62.multiply(complex65);
        code.src.Complex complex67 = complex54.add(complex66);
        code.src.Complex complex70 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex73 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex74 = complex70.multiply(complex73);
        java.lang.String str75 = complex70.toString();
        code.src.Complex complex78 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex81 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex82 = complex78.multiply(complex81);
        code.src.Complex complex83 = complex70.add(complex82);
        code.src.Complex complex84 = complex67.add(complex83);
        java.lang.String str85 = complex67.toString();
        double double86 = complex67.abs();
        code.src.Complex complex87 = complex16.multiply(complex67);
        code.src.Complex complex88 = complex15.add(complex87);
        complex15.real = (-198.14967628541848d);
        double double91 = complex15.abs();
        complex15.imaginary = 0L;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(100.0,10.0)" + "'", str10, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(10.0,0.0)" + "'", str24, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(10.0,0.0)" + "'", str40, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 581.9143981028653d + "'", double50 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(10.0,0.0)" + "'", str59, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(10.0,0.0)" + "'", str75, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str85, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 525.4704025737593d + "'", double86 == 525.4704025737593d);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 58911.02077697936d + "'", double91 == 58911.02077697936d);
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0222");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        double double37 = complex36.real;
        java.lang.String str38 = complex36.toString();
        code.src.Complex complex41 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex44 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex45 = complex41.multiply(complex44);
        java.lang.String str46 = complex41.toString();
        code.src.Complex complex49 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex52 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex53 = complex49.multiply(complex52);
        code.src.Complex complex54 = complex41.add(complex53);
        double double55 = complex54.real;
        code.src.Complex complex58 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex61 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex62 = complex58.multiply(complex61);
        double double63 = complex62.imaginary;
        code.src.Complex complex64 = complex54.sub(complex62);
        double double65 = complex54.imaginary;
        code.src.Complex complex66 = complex36.multiply(complex54);
        code.src.Complex complex67 = null;
        // The following exception was thrown during execution in test generation
        try {
            code.src.Complex complex68 = complex36.add(complex67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 582.9143981028653d + "'", double37 == 582.9143981028653d);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(582.9143981028653,875.1298242002123)" + "'", str38, "(582.9143981028653,875.1298242002123)");
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(10.0,0.0)" + "'", str46, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 290.95719905143267d + "'", double55 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 437.56491210010614d + "'", double63 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 437.56491210010614d + "'", double65 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex66);
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0223");
        code.src.Complex complex2 = code.src.Complex.polar(10.0d, (double) '4');
        complex2.real = 1.0d;
        code.src.Complex complex7 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex7.imaginary = (short) 0;
        complex7.imaginary = 100.0f;
        code.src.Complex complex14 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str15 = complex14.toString();
        code.src.Complex complex18 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        code.src.Complex complex19 = complex14.sub(complex18);
        code.src.Complex complex20 = complex7.multiply(complex19);
        code.src.Complex complex21 = new code.src.Complex();
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex40 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex43 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex44 = complex40.multiply(complex43);
        java.lang.String str45 = complex40.toString();
        code.src.Complex complex48 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex51 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex52 = complex48.multiply(complex51);
        code.src.Complex complex53 = complex40.add(complex52);
        code.src.Complex complex54 = complex37.add(complex53);
        double double55 = complex54.real;
        code.src.Complex complex56 = complex21.multiply(complex54);
        code.src.Complex complex59 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex62 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex63 = complex59.multiply(complex62);
        java.lang.String str64 = complex59.toString();
        code.src.Complex complex67 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex70 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex71 = complex67.multiply(complex70);
        code.src.Complex complex72 = complex59.add(complex71);
        code.src.Complex complex75 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex78 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex79 = complex75.multiply(complex78);
        java.lang.String str80 = complex75.toString();
        code.src.Complex complex83 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex86 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex87 = complex83.multiply(complex86);
        code.src.Complex complex88 = complex75.add(complex87);
        code.src.Complex complex89 = complex72.add(complex88);
        java.lang.String str90 = complex72.toString();
        double double91 = complex72.abs();
        code.src.Complex complex92 = complex21.multiply(complex72);
        code.src.Complex complex93 = complex20.add(complex92);
        code.src.Complex complex94 = complex2.sub(complex93);
        java.lang.Class<?> wildcardClass95 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(100.0,10.0)" + "'", str15, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "(10.0,0.0)" + "'", str45, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 581.9143981028653d + "'", double55 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(10.0,0.0)" + "'", str64, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "(10.0,0.0)" + "'", str80, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str90, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 525.4704025737593d + "'", double91 == 525.4704025737593d);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertNotNull(complex94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0224");
        code.src.Complex complex2 = code.src.Complex.polar(71852.21111515388d, (double) (short) 10);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0225");
        code.src.Complex complex2 = code.src.Complex.polar(141.4213562373095d, (double) 10.0f);
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        double double10 = complex9.imaginary;
        complex9.imaginary = 572.0d;
        complex9.real = (byte) 0;
        code.src.Complex complex15 = complex2.sub(complex9);
        double double16 = complex9.abs();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 437.56491210010614d + "'", double10 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 572.0d + "'", double16 == 572.0d);
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0226");
        code.src.Complex complex2 = code.src.Complex.polar((double) (short) 0, (double) (byte) 10);
        code.src.Complex complex3 = new code.src.Complex();
        code.src.Complex complex6 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex9 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex10 = complex6.multiply(complex9);
        java.lang.String str11 = complex6.toString();
        code.src.Complex complex14 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex17 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex18 = complex14.multiply(complex17);
        code.src.Complex complex19 = complex6.add(complex18);
        code.src.Complex complex22 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex25 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex26 = complex22.multiply(complex25);
        java.lang.String str27 = complex22.toString();
        code.src.Complex complex30 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex33 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex34 = complex30.multiply(complex33);
        code.src.Complex complex35 = complex22.add(complex34);
        code.src.Complex complex36 = complex19.add(complex35);
        double double37 = complex36.real;
        code.src.Complex complex38 = complex3.multiply(complex36);
        double double39 = complex36.abs();
        code.src.Complex complex40 = complex2.sub(complex36);
        code.src.Complex complex43 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex43.imaginary = (short) 0;
        complex43.imaginary = 100.0f;
        code.src.Complex complex50 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str51 = complex50.toString();
        code.src.Complex complex54 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        code.src.Complex complex55 = complex50.sub(complex54);
        code.src.Complex complex56 = complex43.multiply(complex55);
        java.lang.String str57 = complex55.toString();
        double double58 = complex55.real;
        code.src.Complex complex59 = complex2.add(complex55);
        java.lang.Class<?> wildcardClass60 = complex59.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(10.0,0.0)" + "'", str11, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(10.0,0.0)" + "'", str27, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 581.9143981028653d + "'", double37 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1050.9408051475186d + "'", double39 == 1050.9408051475186d);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "(100.0,10.0)" + "'", str51, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(589.1068753368511,327.11773840932915)" + "'", str57, "(589.1068753368511,327.11773840932915)");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 589.1068753368511d + "'", double58 == 589.1068753368511d);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0227");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        double double7 = complex5.imaginary;
        java.lang.String str8 = complex5.toString();
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double12 = complex11.abs();
        double double13 = complex11.real;
        code.src.Complex complex14 = complex5.sub(complex11);
        java.lang.String str15 = complex14.toString();
        code.src.Complex complex16 = new code.src.Complex();
        complex16.real = 1L;
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex37 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex40 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex41 = complex37.multiply(complex40);
        java.lang.String str42 = complex37.toString();
        code.src.Complex complex45 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex45.multiply(complex48);
        code.src.Complex complex50 = complex37.add(complex49);
        code.src.Complex complex51 = complex34.add(complex50);
        code.src.Complex complex52 = complex16.add(complex51);
        double double53 = complex52.real;
        code.src.Complex complex56 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex59 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex60 = complex56.multiply(complex59);
        code.src.Complex complex61 = complex52.sub(complex59);
        code.src.Complex complex64 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex65 = complex59.add(complex64);
        code.src.Complex complex68 = new code.src.Complex((double) 10L, (double) '#');
        code.src.Complex complex69 = complex64.add(complex68);
        code.src.Complex complex70 = complex14.sub(complex68);
        double double71 = complex70.imaginary;
        java.lang.String str72 = complex70.toString();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 43.756491210010616d + "'", double7 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str8, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 52.0d + "'", double12 == 52.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 28.09571990514327d + "'", double13 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(0.0,0.0)" + "'", str15, "(0.0,0.0)");
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(10.0,0.0)" + "'", str42, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 582.9143981028653d + "'", double53 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + (-35.0d) + "'", double71 == (-35.0d));
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(-10.0,-35.0)" + "'", str72, "(-10.0,-35.0)");
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0228");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 100, 43.756491210010616d);
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        double double40 = complex39.real;
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        code.src.Complex complex48 = complex39.sub(complex46);
        code.src.Complex complex49 = complex2.add(complex46);
        code.src.Complex complex52 = new code.src.Complex((double) (byte) 100, (double) 'a');
        code.src.Complex complex55 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex58 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex59 = complex55.multiply(complex58);
        double double60 = complex58.imaginary;
        java.lang.String str61 = complex58.toString();
        code.src.Complex complex62 = complex52.sub(complex58);
        code.src.Complex complex63 = complex2.multiply(complex62);
        complex63.real = (short) 1;
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 582.9143981028653d + "'", double40 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 43.756491210010616d + "'", double60 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str61, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0229");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        double double7 = complex6.imaginary;
        java.lang.String str8 = complex6.toString();
        double double9 = complex6.real;
        code.src.Complex complex12 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double13 = complex12.abs();
        java.lang.String str14 = complex12.toString();
        code.src.Complex complex15 = complex6.sub(complex12);
        code.src.Complex complex18 = new code.src.Complex(100.0d, 0.0d);
        code.src.Complex complex19 = complex15.add(complex18);
        complex15.imaginary = 58910.68753368511d;
        java.lang.Class<?> wildcardClass22 = complex15.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 437.56491210010614d + "'", double7 == 437.56491210010614d);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(280.95719905143267,437.56491210010614)" + "'", str8, "(280.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 280.95719905143267d + "'", double9 == 280.95719905143267d);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str14, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0230");
        code.src.Complex complex2 = code.src.Complex.polar((-1.0d), 0.0d);
        complex2.imaginary = 10.0d;
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0231");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        complex2.real = (byte) 1;
        complex2.imaginary = (short) 100;
        code.src.Complex complex9 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex12 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex13 = complex9.multiply(complex12);
        java.lang.String str14 = complex9.toString();
        code.src.Complex complex17 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex20 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex21 = complex17.multiply(complex20);
        code.src.Complex complex22 = complex9.add(complex21);
        double double23 = complex22.real;
        code.src.Complex complex26 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex27 = complex22.multiply(complex26);
        code.src.Complex complex28 = complex2.multiply(complex22);
        code.src.Complex complex31 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str32 = complex31.toString();
        code.src.Complex complex35 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        code.src.Complex complex36 = complex31.sub(complex35);
        complex31.imaginary = (-1.0f);
        code.src.Complex complex39 = complex2.sub(complex31);
        java.lang.Class<?> wildcardClass40 = complex31.getClass();
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(10.0,0.0)" + "'", str14, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 290.95719905143267d + "'", double23 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(100.0,10.0)" + "'", str32, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0232");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        double double7 = complex6.imaginary;
        java.lang.String str8 = complex6.toString();
        double double9 = complex6.real;
        code.src.Complex complex12 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double13 = complex12.abs();
        java.lang.String str14 = complex12.toString();
        code.src.Complex complex15 = complex6.sub(complex12);
        java.lang.Class<?> wildcardClass16 = complex15.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 437.56491210010614d + "'", double7 == 437.56491210010614d);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(280.95719905143267,437.56491210010614)" + "'", str8, "(280.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 280.95719905143267d + "'", double9 == 280.95719905143267d);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str14, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0233");
        code.src.Complex complex2 = new code.src.Complex((-906.2883532154044d), (-213613.9212426372d));
        double double3 = complex2.imaginary;
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-213613.9212426372d) + "'", double3 == (-213613.9212426372d));
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0234");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        java.lang.String str33 = complex15.toString();
        code.src.Complex complex36 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex36.imaginary = (short) 0;
        java.lang.String str39 = complex36.toString();
        code.src.Complex complex40 = complex15.sub(complex36);
        java.lang.Class<?> wildcardClass41 = complex40.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str33, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(-0.0,0.0)" + "'", str39, "(-0.0,0.0)");
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0235");
        code.src.Complex complex2 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double3 = complex2.real;
        java.lang.Class<?> wildcardClass4 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 28.09571990514327d + "'", double3 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        code.src.Complex complex2 = code.src.Complex.polar((double) (short) -1, (double) (byte) 0);
        code.src.Complex complex5 = code.src.Complex.polar(28.09571990514327d, (-213613.9212426372d));
        code.src.Complex complex6 = complex2.sub(complex5);
        complex2.real = 1.0d;
        java.lang.String str9 = complex2.toString();
        java.lang.Class<?> wildcardClass10 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(1.0,-0.0)" + "'", str9, "(1.0,-0.0)");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0237");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        double double7 = complex5.imaginary;
        double double8 = complex5.imaginary;
        code.src.Complex complex11 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex14 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex15 = complex11.multiply(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex34 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex37 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex38 = complex34.multiply(complex37);
        java.lang.String str39 = complex34.toString();
        code.src.Complex complex42 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex45 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex46 = complex42.multiply(complex45);
        code.src.Complex complex47 = complex34.add(complex46);
        code.src.Complex complex48 = complex31.add(complex47);
        code.src.Complex complex51 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex54 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex55 = complex51.multiply(complex54);
        code.src.Complex complex56 = complex31.sub(complex51);
        code.src.Complex complex57 = complex14.add(complex56);
        double double58 = complex57.abs();
        double double59 = complex57.imaginary;
        complex57.imaginary = 1L;
        code.src.Complex complex62 = complex5.sub(complex57);
        double double63 = complex57.abs();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 43.756491210010616d + "'", double7 == 43.756491210010616d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 43.756491210010616d + "'", double8 == 43.756491210010616d);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(10.0,0.0)" + "'", str39, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 572.0d + "'", double58 == 572.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 481.32140331011675d + "'", double59 == 481.32140331011675d);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 309.0545367982484d + "'", double63 == 309.0545367982484d);
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0238");
        code.src.Complex complex2 = code.src.Complex.polar((double) 'a', (double) 1L);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double6 = complex5.abs();
        double double7 = complex5.real;
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        java.lang.String str15 = complex10.toString();
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        code.src.Complex complex23 = complex10.add(complex22);
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        java.lang.String str31 = complex26.toString();
        code.src.Complex complex34 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex37 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex38 = complex34.multiply(complex37);
        code.src.Complex complex39 = complex26.add(complex38);
        code.src.Complex complex40 = complex23.add(complex39);
        java.lang.String str41 = complex23.toString();
        double double42 = complex23.abs();
        double double43 = complex23.real;
        code.src.Complex complex44 = complex5.sub(complex23);
        code.src.Complex complex45 = complex2.sub(complex44);
        code.src.Complex complex46 = null;
        // The following exception was thrown during execution in test generation
        try {
            code.src.Complex complex47 = complex2.add(complex46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 28.09571990514327d + "'", double7 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(10.0,0.0)" + "'", str15, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(10.0,0.0)" + "'", str31, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str41, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 525.4704025737593d + "'", double42 == 525.4704025737593d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 290.95719905143267d + "'", double43 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0239");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        double double33 = complex15.real;
        double double34 = complex15.real;
        code.src.Complex complex37 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex40 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex41 = complex37.multiply(complex40);
        java.lang.String str42 = complex37.toString();
        code.src.Complex complex45 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex45.multiply(complex48);
        code.src.Complex complex50 = complex37.add(complex49);
        code.src.Complex complex53 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex56 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex57 = complex53.multiply(complex56);
        java.lang.String str58 = complex53.toString();
        code.src.Complex complex61 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex64 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex65 = complex61.multiply(complex64);
        code.src.Complex complex66 = complex53.add(complex65);
        code.src.Complex complex67 = complex50.add(complex66);
        code.src.Complex complex68 = complex15.sub(complex50);
        double double69 = complex68.imaginary;
        java.lang.Class<?> wildcardClass70 = complex68.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 290.95719905143267d + "'", double33 == 290.95719905143267d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 290.95719905143267d + "'", double34 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(10.0,0.0)" + "'", str42, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(10.0,0.0)" + "'", str58, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        code.src.Complex complex40 = complex15.sub(complex35);
        java.lang.String str41 = complex15.toString();
        code.src.Complex complex44 = new code.src.Complex((double) 100.0f, (double) (short) -1);
        code.src.Complex complex45 = complex15.add(complex44);
        java.lang.Class<?> wildcardClass46 = complex44.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str41, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0241");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        double double33 = complex15.real;
        double double34 = complex15.real;
        code.src.Complex complex37 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex40 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex41 = complex37.multiply(complex40);
        java.lang.String str42 = complex37.toString();
        code.src.Complex complex45 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex45.multiply(complex48);
        code.src.Complex complex50 = complex37.add(complex49);
        code.src.Complex complex53 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex56 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex57 = complex53.multiply(complex56);
        java.lang.String str58 = complex53.toString();
        code.src.Complex complex61 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex64 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex65 = complex61.multiply(complex64);
        code.src.Complex complex66 = complex53.add(complex65);
        code.src.Complex complex67 = complex50.add(complex66);
        code.src.Complex complex68 = complex15.sub(complex50);
        double double69 = complex68.imaginary;
        double double70 = complex68.real;
        double double71 = complex68.imaginary;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 290.95719905143267d + "'", double33 == 290.95719905143267d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 290.95719905143267d + "'", double34 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(10.0,0.0)" + "'", str42, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(10.0,0.0)" + "'", str58, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0242");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        code.src.Complex complex40 = complex15.sub(complex35);
        code.src.Complex complex43 = new code.src.Complex((double) 1.0f, (double) 10.0f);
        code.src.Complex complex44 = complex40.sub(complex43);
        java.lang.String str45 = complex44.toString();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "(279.95719905143267,427.56491210010614)" + "'", str45, "(279.95719905143267,427.56491210010614)");
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0243");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        code.src.Complex complex40 = complex15.sub(complex35);
        code.src.Complex complex41 = new code.src.Complex();
        code.src.Complex complex44 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex47 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex48 = complex44.multiply(complex47);
        java.lang.String str49 = complex44.toString();
        code.src.Complex complex52 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex55 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex56 = complex52.multiply(complex55);
        code.src.Complex complex57 = complex44.add(complex56);
        code.src.Complex complex60 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex63 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex64 = complex60.multiply(complex63);
        java.lang.String str65 = complex60.toString();
        code.src.Complex complex68 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex71 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex72 = complex68.multiply(complex71);
        code.src.Complex complex73 = complex60.add(complex72);
        code.src.Complex complex74 = complex57.add(complex73);
        double double75 = complex74.real;
        code.src.Complex complex76 = complex41.multiply(complex74);
        code.src.Complex complex77 = complex15.multiply(complex74);
        code.src.Complex complex80 = new code.src.Complex(43.756491210010616d, 437.56491210010614d);
        double double81 = complex80.imaginary;
        code.src.Complex complex82 = complex74.add(complex80);
        double double83 = complex74.abs();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(10.0,0.0)" + "'", str49, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(10.0,0.0)" + "'", str65, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 581.9143981028653d + "'", double75 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 437.56491210010614d + "'", double81 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1050.9408051475186d + "'", double83 == 1050.9408051475186d);
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0244");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        double double33 = complex15.real;
        code.src.Complex complex36 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        code.src.Complex complex37 = complex15.sub(complex36);
        complex37.real = (byte) -1;
        java.lang.Class<?> wildcardClass40 = complex37.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 290.95719905143267d + "'", double33 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0245");
        code.src.Complex complex2 = code.src.Complex.polar((double) (byte) 100, 35.0d);
        code.src.Complex complex3 = null;
        // The following exception was thrown during execution in test generation
        try {
            code.src.Complex complex4 = complex2.sub(complex3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0246");
        code.src.Complex complex2 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex2.imaginary = (short) 0;
        complex2.imaginary = 100.0f;
        code.src.Complex complex9 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex12 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex13 = complex9.multiply(complex12);
        java.lang.String str14 = complex9.toString();
        code.src.Complex complex17 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex20 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex21 = complex17.multiply(complex20);
        code.src.Complex complex22 = complex9.add(complex21);
        code.src.Complex complex25 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex28 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex29 = complex25.multiply(complex28);
        java.lang.String str30 = complex25.toString();
        code.src.Complex complex33 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex36 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex37 = complex33.multiply(complex36);
        code.src.Complex complex38 = complex25.add(complex37);
        code.src.Complex complex39 = complex22.add(complex38);
        java.lang.String str40 = complex22.toString();
        code.src.Complex complex43 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex43.imaginary = (short) 0;
        java.lang.String str46 = complex43.toString();
        code.src.Complex complex47 = complex22.sub(complex43);
        code.src.Complex complex48 = complex2.add(complex47);
        complex48.imaginary = 0;
        double double51 = complex48.imaginary;
        code.src.Complex complex54 = code.src.Complex.polar((double) (byte) 100, 582.9143981028653d);
        complex54.real = 875.1298242002123d;
        complex54.imaginary = (-317.11773840932915d);
        code.src.Complex complex61 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex61.real = 10;
        code.src.Complex complex64 = complex54.sub(complex61);
        double double65 = complex64.imaginary;
        complex64.real = (-272.8614791462894d);
        code.src.Complex complex68 = complex48.add(complex64);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(10.0,0.0)" + "'", str14, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(10.0,0.0)" + "'", str30, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str40, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(-0.0,0.0)" + "'", str46, "(-0.0,0.0)");
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + (-317.11773840932915d) + "'", double65 == (-317.11773840932915d));
        org.junit.Assert.assertNotNull(complex68);
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0247");
        code.src.Complex complex2 = code.src.Complex.polar((double) 1L, (double) 100);
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        double double40 = complex39.real;
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        code.src.Complex complex48 = complex39.sub(complex46);
        code.src.Complex complex51 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex52 = complex46.add(complex51);
        code.src.Complex complex55 = new code.src.Complex((double) 10L, (double) '#');
        code.src.Complex complex56 = complex51.add(complex55);
        complex51.real = 43.756491210010616d;
        complex51.imaginary = 100.0d;
        complex51.imaginary = (-317.11773840932915d);
        code.src.Complex complex65 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex68 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex69 = complex65.multiply(complex68);
        java.lang.String str70 = complex65.toString();
        code.src.Complex complex73 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex76 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex77 = complex73.multiply(complex76);
        code.src.Complex complex78 = complex65.add(complex77);
        code.src.Complex complex79 = complex51.multiply(complex77);
        code.src.Complex complex80 = complex2.sub(complex77);
        double double81 = complex80.imaginary;
        java.lang.String str82 = complex80.toString();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 582.9143981028653d + "'", double40 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(10.0,0.0)" + "'", str70, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + (-438.0712777412159d) + "'", double81 == (-438.0712777412159d));
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "(-280.094880179145,-438.0712777412159)" + "'", str82, "(-280.094880179145,-438.0712777412159)");
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        double double16 = complex15.real;
        code.src.Complex complex19 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex22 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex23 = complex19.multiply(complex22);
        double double24 = complex23.imaginary;
        code.src.Complex complex25 = complex15.sub(complex23);
        code.src.Complex complex28 = code.src.Complex.polar(0.0d, (double) (short) -1);
        code.src.Complex complex29 = complex15.multiply(complex28);
        complex29.imaginary = (-198.14967628541848d);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 290.95719905143267d + "'", double16 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 437.56491210010614d + "'", double24 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0249");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        complex2.imaginary = (-1.0f);
        code.src.Complex complex11 = new code.src.Complex((double) 100, (double) 10.0f);
        code.src.Complex complex14 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex17 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex18 = complex14.multiply(complex17);
        java.lang.String str19 = complex14.toString();
        code.src.Complex complex22 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex25 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex26 = complex22.multiply(complex25);
        code.src.Complex complex27 = complex14.add(complex26);
        code.src.Complex complex30 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex33 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex34 = complex30.multiply(complex33);
        java.lang.String str35 = complex30.toString();
        code.src.Complex complex38 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex41 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex42 = complex38.multiply(complex41);
        code.src.Complex complex43 = complex30.add(complex42);
        code.src.Complex complex44 = complex27.add(complex43);
        code.src.Complex complex47 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex50 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex51 = complex47.multiply(complex50);
        code.src.Complex complex52 = complex27.sub(complex47);
        code.src.Complex complex53 = new code.src.Complex();
        code.src.Complex complex56 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex59 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex60 = complex56.multiply(complex59);
        java.lang.String str61 = complex56.toString();
        code.src.Complex complex64 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex67 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex68 = complex64.multiply(complex67);
        code.src.Complex complex69 = complex56.add(complex68);
        code.src.Complex complex72 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex75 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex76 = complex72.multiply(complex75);
        java.lang.String str77 = complex72.toString();
        code.src.Complex complex80 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex83 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex84 = complex80.multiply(complex83);
        code.src.Complex complex85 = complex72.add(complex84);
        code.src.Complex complex86 = complex69.add(complex85);
        double double87 = complex86.real;
        code.src.Complex complex88 = complex53.multiply(complex86);
        code.src.Complex complex89 = complex27.multiply(complex86);
        code.src.Complex complex90 = complex11.sub(complex89);
        double double91 = complex89.real;
        double double92 = complex89.abs();
        code.src.Complex complex93 = complex2.sub(complex89);
        double double94 = complex93.imaginary;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(10.0,0.0)" + "'", str19, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(10.0,0.0)" + "'", str35, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(10.0,0.0)" + "'", str61, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(10.0,0.0)" + "'", str77, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 581.9143981028653d + "'", double87 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + (-213613.9212426372d) + "'", double91 == (-213613.9212426372d));
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 552238.2879620573d + "'", double92 == 552238.2879620573d);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + (-509251.64491133287d) + "'", double94 == (-509251.64491133287d));
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0250");
        code.src.Complex complex2 = code.src.Complex.polar(572.0d, (-393.80842089009553d));
        complex2.real = 1077.733215908709d;
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0251");
        code.src.Complex complex2 = new code.src.Complex(309.0545367982484d, (-495.7163425468028d));
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        double double16 = complex15.real;
        java.lang.Class<?> wildcardClass17 = complex15.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 290.95719905143267d + "'", double16 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0253");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 10, (-317.11773840932915d));
        code.src.Complex complex5 = code.src.Complex.polar(28.09571990514327d, (double) 0);
        code.src.Complex complex6 = new code.src.Complex();
        complex6.real = 1L;
        code.src.Complex complex11 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex14 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex15 = complex11.multiply(complex14);
        java.lang.String str16 = complex11.toString();
        code.src.Complex complex19 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex22 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex23 = complex19.multiply(complex22);
        code.src.Complex complex24 = complex11.add(complex23);
        code.src.Complex complex27 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex30 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex31 = complex27.multiply(complex30);
        java.lang.String str32 = complex27.toString();
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        code.src.Complex complex40 = complex27.add(complex39);
        code.src.Complex complex41 = complex24.add(complex40);
        code.src.Complex complex42 = complex6.add(complex41);
        double double43 = complex42.real;
        code.src.Complex complex44 = complex5.add(complex42);
        code.src.Complex complex45 = complex2.multiply(complex44);
        complex45.real = 907.1298242002123d;
        java.lang.Class<?> wildcardClass48 = complex45.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(10.0,0.0)" + "'", str16, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(10.0,0.0)" + "'", str32, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 582.9143981028653d + "'", double43 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0254");
        code.src.Complex complex2 = code.src.Complex.polar((double) 10.0f, 393.80842089009553d);
        code.src.Complex complex5 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex5.imaginary = (short) 0;
        complex5.imaginary = 100.0f;
        code.src.Complex complex12 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str13 = complex12.toString();
        code.src.Complex complex16 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        code.src.Complex complex17 = complex12.sub(complex16);
        code.src.Complex complex18 = complex5.multiply(complex17);
        code.src.Complex complex19 = new code.src.Complex();
        code.src.Complex complex22 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex25 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex26 = complex22.multiply(complex25);
        java.lang.String str27 = complex22.toString();
        code.src.Complex complex30 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex33 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex34 = complex30.multiply(complex33);
        code.src.Complex complex35 = complex22.add(complex34);
        code.src.Complex complex38 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex41 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex42 = complex38.multiply(complex41);
        java.lang.String str43 = complex38.toString();
        code.src.Complex complex46 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex49 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex50 = complex46.multiply(complex49);
        code.src.Complex complex51 = complex38.add(complex50);
        code.src.Complex complex52 = complex35.add(complex51);
        double double53 = complex52.real;
        code.src.Complex complex54 = complex19.multiply(complex52);
        code.src.Complex complex57 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex60 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex61 = complex57.multiply(complex60);
        java.lang.String str62 = complex57.toString();
        code.src.Complex complex65 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex68 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex69 = complex65.multiply(complex68);
        code.src.Complex complex70 = complex57.add(complex69);
        code.src.Complex complex73 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex76 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex77 = complex73.multiply(complex76);
        java.lang.String str78 = complex73.toString();
        code.src.Complex complex81 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex84 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex85 = complex81.multiply(complex84);
        code.src.Complex complex86 = complex73.add(complex85);
        code.src.Complex complex87 = complex70.add(complex86);
        java.lang.String str88 = complex70.toString();
        double double89 = complex70.abs();
        code.src.Complex complex90 = complex19.multiply(complex70);
        code.src.Complex complex91 = complex18.add(complex90);
        complex18.real = (-198.14967628541848d);
        double double94 = complex18.abs();
        code.src.Complex complex95 = complex2.multiply(complex18);
        double double96 = complex18.real;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(100.0,10.0)" + "'", str13, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(10.0,0.0)" + "'", str27, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(10.0,0.0)" + "'", str43, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 581.9143981028653d + "'", double53 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(10.0,0.0)" + "'", str62, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(10.0,0.0)" + "'", str78, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str88, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 525.4704025737593d + "'", double89 == 525.4704025737593d);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 58911.02077697936d + "'", double94 == 58911.02077697936d);
        org.junit.Assert.assertNotNull(complex95);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + (-198.14967628541848d) + "'", double96 == (-198.14967628541848d));
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0255");
        code.src.Complex complex0 = new code.src.Complex();
        code.src.Complex complex3 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex6 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex7 = complex3.multiply(complex6);
        java.lang.String str8 = complex3.toString();
        code.src.Complex complex11 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex14 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex15 = complex11.multiply(complex14);
        code.src.Complex complex16 = complex3.add(complex15);
        code.src.Complex complex19 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex22 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex23 = complex19.multiply(complex22);
        java.lang.String str24 = complex19.toString();
        code.src.Complex complex27 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex30 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex31 = complex27.multiply(complex30);
        code.src.Complex complex32 = complex19.add(complex31);
        code.src.Complex complex33 = complex16.add(complex32);
        double double34 = complex33.real;
        code.src.Complex complex35 = complex0.multiply(complex33);
        code.src.Complex complex36 = new code.src.Complex();
        complex36.real = 1L;
        code.src.Complex complex41 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex44 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex45 = complex41.multiply(complex44);
        java.lang.String str46 = complex41.toString();
        code.src.Complex complex49 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex52 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex53 = complex49.multiply(complex52);
        code.src.Complex complex54 = complex41.add(complex53);
        code.src.Complex complex57 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex60 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex61 = complex57.multiply(complex60);
        java.lang.String str62 = complex57.toString();
        code.src.Complex complex65 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex68 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex69 = complex65.multiply(complex68);
        code.src.Complex complex70 = complex57.add(complex69);
        code.src.Complex complex71 = complex54.add(complex70);
        code.src.Complex complex72 = complex36.add(complex71);
        double double73 = complex72.real;
        code.src.Complex complex76 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex79 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex80 = complex76.multiply(complex79);
        code.src.Complex complex81 = complex72.sub(complex79);
        code.src.Complex complex84 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex85 = complex79.add(complex84);
        code.src.Complex complex88 = new code.src.Complex((double) 10L, (double) '#');
        code.src.Complex complex89 = complex84.add(complex88);
        code.src.Complex complex90 = complex33.multiply(complex89);
        complex33.real = (-1.0f);
        double double93 = complex33.real;
        java.lang.Class<?> wildcardClass94 = complex33.getClass();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(10.0,0.0)" + "'", str8, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(10.0,0.0)" + "'", str24, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 581.9143981028653d + "'", double34 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(10.0,0.0)" + "'", str46, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(10.0,0.0)" + "'", str62, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 582.9143981028653d + "'", double73 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + (-1.0d) + "'", double93 == (-1.0d));
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0256");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex38 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex41 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex42 = complex38.multiply(complex41);
        code.src.Complex complex43 = complex18.sub(complex38);
        code.src.Complex complex44 = new code.src.Complex();
        code.src.Complex complex47 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex50 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex51 = complex47.multiply(complex50);
        java.lang.String str52 = complex47.toString();
        code.src.Complex complex55 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex58 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex59 = complex55.multiply(complex58);
        code.src.Complex complex60 = complex47.add(complex59);
        code.src.Complex complex63 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex66 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex67 = complex63.multiply(complex66);
        java.lang.String str68 = complex63.toString();
        code.src.Complex complex71 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex74 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex75 = complex71.multiply(complex74);
        code.src.Complex complex76 = complex63.add(complex75);
        code.src.Complex complex77 = complex60.add(complex76);
        double double78 = complex77.real;
        code.src.Complex complex79 = complex44.multiply(complex77);
        code.src.Complex complex80 = complex18.multiply(complex77);
        code.src.Complex complex81 = complex2.sub(complex80);
        double double82 = complex80.real;
        double double83 = complex80.real;
        java.lang.Class<?> wildcardClass84 = complex80.getClass();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(10.0,0.0)" + "'", str52, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(10.0,0.0)" + "'", str68, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 581.9143981028653d + "'", double78 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + (-213613.9212426372d) + "'", double82 == (-213613.9212426372d));
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + (-213613.9212426372d) + "'", double83 == (-213613.9212426372d));
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0257");
        code.src.Complex complex2 = code.src.Complex.polar((double) 100, 290.9589175121722d);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0258");
        code.src.Complex complex2 = new code.src.Complex(139.31618714277246d, 58911.02077697936d);
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0259");
        code.src.Complex complex2 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        code.src.Complex complex5 = new code.src.Complex(290.95719905143267d, (-213613.9212426372d));
        code.src.Complex complex6 = complex2.add(complex5);
        code.src.Complex complex9 = new code.src.Complex((double) 100, (double) 10.0f);
        complex9.real = (byte) 1;
        complex9.imaginary = (short) 100;
        code.src.Complex complex14 = new code.src.Complex();
        complex14.real = 1L;
        code.src.Complex complex19 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex22 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex23 = complex19.multiply(complex22);
        java.lang.String str24 = complex19.toString();
        code.src.Complex complex27 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex30 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex31 = complex27.multiply(complex30);
        code.src.Complex complex32 = complex19.add(complex31);
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        java.lang.String str40 = complex35.toString();
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        code.src.Complex complex48 = complex35.add(complex47);
        code.src.Complex complex49 = complex32.add(complex48);
        code.src.Complex complex50 = complex14.add(complex49);
        double double51 = complex14.imaginary;
        double double52 = complex14.imaginary;
        java.lang.String str53 = complex14.toString();
        code.src.Complex complex54 = complex9.sub(complex14);
        code.src.Complex complex57 = new code.src.Complex((double) (byte) 100, (double) 'a');
        code.src.Complex complex60 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex63 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex64 = complex60.multiply(complex63);
        double double65 = complex63.imaginary;
        java.lang.String str66 = complex63.toString();
        code.src.Complex complex67 = complex57.sub(complex63);
        code.src.Complex complex70 = new code.src.Complex((double) 100, (double) 10.0f);
        complex70.real = (byte) 1;
        code.src.Complex complex73 = complex63.multiply(complex70);
        code.src.Complex complex74 = complex54.sub(complex73);
        code.src.Complex complex75 = complex6.sub(complex74);
        double double76 = complex74.abs();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(10.0,0.0)" + "'", str24, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(10.0,0.0)" + "'", str40, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(1.0,0.0)" + "'", str53, "(1.0,0.0)");
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 43.756491210010616d + "'", double65 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str66, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 467.07736184459986d + "'", double76 == 467.07736184459986d);
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0260");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        double double33 = complex15.real;
        code.src.Complex complex36 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        code.src.Complex complex37 = complex15.sub(complex36);
        java.lang.Class<?> wildcardClass38 = complex37.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 290.95719905143267d + "'", double33 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0261");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex10.real = 10;
        code.src.Complex complex13 = complex2.multiply(complex10);
        code.src.Complex complex16 = new code.src.Complex(100.0d, (double) 100);
        code.src.Complex complex17 = complex10.add(complex16);
        double double18 = complex10.real;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0262");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 0, (double) ' ');
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        code.src.Complex complex40 = complex2.add(complex38);
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        double double48 = complex46.imaginary;
        java.lang.String str49 = complex46.toString();
        code.src.Complex complex52 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double53 = complex52.abs();
        double double54 = complex52.real;
        code.src.Complex complex55 = complex46.sub(complex52);
        code.src.Complex complex56 = complex38.sub(complex46);
        double double57 = complex38.real;
        java.lang.Class<?> wildcardClass58 = complex38.getClass();
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 43.756491210010616d + "'", double48 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str49, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 52.0d + "'", double53 == 52.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 28.09571990514327d + "'", double54 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 581.9143981028653d + "'", double57 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0263");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        double double37 = complex36.real;
        code.src.Complex complex40 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex43 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex44 = complex40.multiply(complex43);
        code.src.Complex complex45 = complex36.sub(complex43);
        double double46 = complex43.real;
        java.lang.String str47 = complex43.toString();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 582.9143981028653d + "'", double37 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 28.09571990514327d + "'", double46 == 28.09571990514327d);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str47, "(28.09571990514327,43.756491210010616)");
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0264");
        code.src.Complex complex2 = code.src.Complex.polar(10.0d, (double) '4');
        double double3 = complex2.imaginary;
        code.src.Complex complex6 = new code.src.Complex((double) (short) 0, (double) ' ');
        code.src.Complex complex7 = new code.src.Complex();
        complex7.real = 1L;
        code.src.Complex complex12 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex15 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex16 = complex12.multiply(complex15);
        java.lang.String str17 = complex12.toString();
        code.src.Complex complex20 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex23 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex24 = complex20.multiply(complex23);
        code.src.Complex complex25 = complex12.add(complex24);
        code.src.Complex complex28 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex31 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex32 = complex28.multiply(complex31);
        java.lang.String str33 = complex28.toString();
        code.src.Complex complex36 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex39 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex40 = complex36.multiply(complex39);
        code.src.Complex complex41 = complex28.add(complex40);
        code.src.Complex complex42 = complex25.add(complex41);
        code.src.Complex complex43 = complex7.add(complex42);
        code.src.Complex complex44 = complex6.add(complex42);
        code.src.Complex complex47 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex50 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex51 = complex47.multiply(complex50);
        double double52 = complex50.imaginary;
        java.lang.String str53 = complex50.toString();
        code.src.Complex complex56 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double57 = complex56.abs();
        double double58 = complex56.real;
        code.src.Complex complex59 = complex50.sub(complex56);
        code.src.Complex complex60 = complex42.sub(complex50);
        double double61 = complex42.real;
        code.src.Complex complex62 = complex2.multiply(complex42);
        java.lang.Class<?> wildcardClass63 = complex42.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 9.866275920404853d + "'", double3 == 9.866275920404853d);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(10.0,0.0)" + "'", str17, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(10.0,0.0)" + "'", str33, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 43.756491210010616d + "'", double52 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str53, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 52.0d + "'", double57 == 52.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 28.09571990514327d + "'", double58 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 581.9143981028653d + "'", double61 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0265");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        complex2.imaginary = '4';
        double double5 = complex2.real;
        double double6 = complex2.abs();
        java.lang.Class<?> wildcardClass7 = complex2.getClass();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 100.0d + "'", double5 == 100.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 112.71202242884297d + "'", double6 == 112.71202242884297d);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str3 = complex2.toString();
        java.lang.String str4 = complex2.toString();
        java.lang.String str5 = complex2.toString();
        code.src.Complex complex8 = new code.src.Complex((double) (byte) 100, (double) 'a');
        code.src.Complex complex11 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex14 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex15 = complex11.multiply(complex14);
        double double16 = complex14.imaginary;
        java.lang.String str17 = complex14.toString();
        code.src.Complex complex18 = complex8.sub(complex14);
        code.src.Complex complex21 = code.src.Complex.polar((double) (byte) 100, 582.9143981028653d);
        complex21.real = 875.1298242002123d;
        complex21.imaginary = (-317.11773840932915d);
        complex21.real = 0.0d;
        code.src.Complex complex28 = complex18.sub(complex21);
        code.src.Complex complex29 = complex2.sub(complex28);
        double double30 = complex29.real;
        java.lang.Class<?> wildcardClass31 = complex29.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "(100.0,10.0)" + "'", str3, "(100.0,10.0)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(100.0,10.0)" + "'", str4, "(100.0,10.0)");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(100.0,10.0)" + "'", str5, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 43.756491210010616d + "'", double16 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str17, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 28.09571990514327d + "'", double30 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0267");
        code.src.Complex complex2 = new code.src.Complex((double) 1.0f, (double) '#');
        double double3 = complex2.abs();
        java.lang.Class<?> wildcardClass4 = complex2.getClass();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 35.014282800023196d + "'", double3 == 35.014282800023196d);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0268");
        code.src.Complex complex2 = code.src.Complex.polar((double) 1L, (double) 100);
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        double double40 = complex39.real;
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        code.src.Complex complex48 = complex39.sub(complex46);
        code.src.Complex complex51 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex52 = complex46.add(complex51);
        code.src.Complex complex55 = new code.src.Complex((double) 10L, (double) '#');
        code.src.Complex complex56 = complex51.add(complex55);
        complex51.real = 43.756491210010616d;
        complex51.imaginary = 100.0d;
        complex51.imaginary = (-317.11773840932915d);
        code.src.Complex complex65 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex68 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex69 = complex65.multiply(complex68);
        java.lang.String str70 = complex65.toString();
        code.src.Complex complex73 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex76 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex77 = complex73.multiply(complex76);
        code.src.Complex complex78 = complex65.add(complex77);
        code.src.Complex complex79 = complex51.multiply(complex77);
        code.src.Complex complex80 = complex2.sub(complex77);
        double double81 = complex2.abs();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 582.9143981028653d + "'", double40 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(10.0,0.0)" + "'", str70, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.9999999999999999d + "'", double81 == 0.9999999999999999d);
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0269");
        code.src.Complex complex2 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex2.imaginary = (short) 0;
        complex2.imaginary = 100.0f;
        code.src.Complex complex9 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str10 = complex9.toString();
        code.src.Complex complex13 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        code.src.Complex complex14 = complex9.sub(complex13);
        code.src.Complex complex15 = complex2.multiply(complex14);
        java.lang.String str16 = complex14.toString();
        complex14.real = (byte) 1;
        java.lang.Class<?> wildcardClass19 = complex14.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(100.0,10.0)" + "'", str10, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(589.1068753368511,327.11773840932915)" + "'", str16, "(589.1068753368511,327.11773840932915)");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0270");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        double double7 = complex6.imaginary;
        complex6.imaginary = 572.0d;
        complex6.real = (byte) 0;
        java.lang.String str12 = complex6.toString();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 437.56491210010614d + "'", double7 == 437.56491210010614d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(0.0,572.0)" + "'", str12, "(0.0,572.0)");
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0271");
        code.src.Complex complex2 = code.src.Complex.polar(0.0d, (double) (short) -1);
        complex2.imaginary = 1.4142135623730951d;
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0272");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        double double37 = complex36.real;
        code.src.Complex complex40 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex43 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex44 = complex40.multiply(complex43);
        code.src.Complex complex45 = complex36.sub(complex43);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex43.add(complex48);
        code.src.Complex complex52 = new code.src.Complex((double) 10L, (double) '#');
        code.src.Complex complex53 = complex48.add(complex52);
        complex48.real = 43.756491210010616d;
        complex48.real = 309.0529189565759d;
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 582.9143981028653d + "'", double37 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex53);
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        code.src.Complex complex2 = new code.src.Complex((double) (byte) -1, (-198.14967628541848d));
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0274");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 0, (double) ' ');
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        code.src.Complex complex40 = complex2.add(complex38);
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        java.lang.String str48 = complex43.toString();
        code.src.Complex complex51 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex54 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex55 = complex51.multiply(complex54);
        code.src.Complex complex56 = complex43.add(complex55);
        code.src.Complex complex59 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex62 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex63 = complex59.multiply(complex62);
        java.lang.String str64 = complex59.toString();
        code.src.Complex complex67 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex70 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex71 = complex67.multiply(complex70);
        code.src.Complex complex72 = complex59.add(complex71);
        code.src.Complex complex73 = complex56.add(complex72);
        code.src.Complex complex74 = new code.src.Complex();
        code.src.Complex complex75 = complex73.add(complex74);
        code.src.Complex complex76 = complex40.add(complex74);
        java.lang.String str77 = complex40.toString();
        complex40.real = 170.71953646075502d;
        java.lang.Class<?> wildcardClass80 = complex40.getClass();
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(10.0,0.0)" + "'", str48, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(10.0,0.0)" + "'", str64, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(581.9143981028653,907.1298242002123)" + "'", str77, "(581.9143981028653,907.1298242002123)");
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0275");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        code.src.Complex complex9 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex12 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex13 = complex9.multiply(complex12);
        java.lang.String str14 = complex9.toString();
        code.src.Complex complex17 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex20 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex21 = complex17.multiply(complex20);
        code.src.Complex complex22 = complex9.add(complex21);
        code.src.Complex complex25 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex28 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex29 = complex25.multiply(complex28);
        java.lang.String str30 = complex25.toString();
        code.src.Complex complex33 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex36 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex37 = complex33.multiply(complex36);
        code.src.Complex complex38 = complex25.add(complex37);
        code.src.Complex complex39 = complex22.add(complex38);
        code.src.Complex complex42 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex45 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex46 = complex42.multiply(complex45);
        code.src.Complex complex47 = complex22.sub(complex42);
        code.src.Complex complex48 = complex5.add(complex47);
        double double49 = complex48.abs();
        double double50 = complex48.imaginary;
        code.src.Complex complex51 = null;
        // The following exception was thrown during execution in test generation
        try {
            code.src.Complex complex52 = complex48.add(complex51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(10.0,0.0)" + "'", str14, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(10.0,0.0)" + "'", str30, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 572.0d + "'", double49 == 572.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 481.32140331011675d + "'", double50 == 481.32140331011675d);
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0276");
        code.src.Complex complex2 = code.src.Complex.polar(32.0d, 1077.733215908709d);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0277");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        code.src.Complex complex33 = new code.src.Complex();
        code.src.Complex complex34 = complex32.add(complex33);
        code.src.Complex complex37 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex40 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex41 = complex37.multiply(complex40);
        java.lang.String str42 = complex37.toString();
        code.src.Complex complex45 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex45.multiply(complex48);
        code.src.Complex complex50 = complex37.add(complex49);
        code.src.Complex complex53 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex56 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex57 = complex53.multiply(complex56);
        java.lang.String str58 = complex53.toString();
        code.src.Complex complex61 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex64 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex65 = complex61.multiply(complex64);
        code.src.Complex complex66 = complex53.add(complex65);
        code.src.Complex complex67 = complex50.add(complex66);
        code.src.Complex complex68 = new code.src.Complex();
        code.src.Complex complex69 = complex67.add(complex68);
        code.src.Complex complex72 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex75 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex76 = complex72.multiply(complex75);
        double double77 = complex75.imaginary;
        java.lang.String str78 = complex75.toString();
        code.src.Complex complex81 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double82 = complex81.abs();
        double double83 = complex81.real;
        code.src.Complex complex84 = complex75.sub(complex81);
        code.src.Complex complex85 = complex68.sub(complex75);
        code.src.Complex complex86 = complex33.add(complex68);
        double double87 = complex86.abs();
        double double88 = complex86.real;
        complex86.imaginary = 432.1247009912124d;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(10.0,0.0)" + "'", str42, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(10.0,0.0)" + "'", str58, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 43.756491210010616d + "'", double77 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str78, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 52.0d + "'", double82 == 52.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 28.09571990514327d + "'", double83 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0278");
        code.src.Complex complex2 = code.src.Complex.polar((double) (short) 0, (-213613.9212426372d));
        java.lang.Class<?> wildcardClass3 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        code.src.Complex complex2 = code.src.Complex.polar((double) 100L, (-28.09571990514327d));
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0280");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        complex2.imaginary = 100L;
        code.src.Complex complex7 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex10 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex11 = complex7.multiply(complex10);
        code.src.Complex complex14 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex17 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex18 = complex14.multiply(complex17);
        java.lang.String str19 = complex14.toString();
        code.src.Complex complex22 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex25 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex26 = complex22.multiply(complex25);
        code.src.Complex complex27 = complex14.add(complex26);
        code.src.Complex complex30 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex33 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex34 = complex30.multiply(complex33);
        java.lang.String str35 = complex30.toString();
        code.src.Complex complex38 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex41 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex42 = complex38.multiply(complex41);
        code.src.Complex complex43 = complex30.add(complex42);
        code.src.Complex complex44 = complex27.add(complex43);
        code.src.Complex complex47 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex50 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex51 = complex47.multiply(complex50);
        code.src.Complex complex52 = complex27.sub(complex47);
        code.src.Complex complex53 = complex10.add(complex52);
        code.src.Complex complex54 = complex2.multiply(complex52);
        double double55 = complex2.real;
        code.src.Complex complex58 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        double double59 = complex58.imaginary;
        code.src.Complex complex60 = complex2.add(complex58);
        double double61 = complex60.real;
        code.src.Complex complex64 = code.src.Complex.polar(663.590879631022d, (double) ' ');
        code.src.Complex complex65 = complex60.sub(complex64);
        double double66 = complex65.abs();
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(10.0,0.0)" + "'", str19, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(10.0,0.0)" + "'", str35, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 100.0d + "'", double55 == 100.0d);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + (-317.11773840932915d) + "'", double59 == (-317.11773840932915d));
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + (-389.10687533685115d) + "'", double61 == (-389.10687533685115d));
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1108.4219560476556d + "'", double66 == 1108.4219560476556d);
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0281");
        code.src.Complex complex2 = new code.src.Complex(28.09571990514327d, 907.1298242002123d);
        code.src.Complex complex5 = code.src.Complex.polar((double) (byte) 10, (double) (short) 0);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.Class<?> wildcardClass7 = complex5.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        code.src.Complex complex2 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        double double3 = complex2.abs();
        code.src.Complex complex6 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str7 = complex6.toString();
        code.src.Complex complex8 = complex2.multiply(complex6);
        complex6.real = 35.0d;
        code.src.Complex complex11 = new code.src.Complex();
        complex11.real = 1L;
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        java.lang.String str21 = complex16.toString();
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        code.src.Complex complex29 = complex16.add(complex28);
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        java.lang.String str37 = complex32.toString();
        code.src.Complex complex40 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex43 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex44 = complex40.multiply(complex43);
        code.src.Complex complex45 = complex32.add(complex44);
        code.src.Complex complex46 = complex29.add(complex45);
        code.src.Complex complex47 = complex11.add(complex46);
        double double48 = complex47.real;
        code.src.Complex complex51 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex54 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex55 = complex51.multiply(complex54);
        code.src.Complex complex56 = complex47.sub(complex54);
        code.src.Complex complex59 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex60 = complex54.add(complex59);
        code.src.Complex complex61 = complex6.multiply(complex60);
        code.src.Complex complex64 = new code.src.Complex((double) 100, (double) 10.0f);
        complex64.real = (byte) 1;
        complex64.imaginary = (short) 100;
        code.src.Complex complex71 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex74 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex75 = complex71.multiply(complex74);
        java.lang.String str76 = complex71.toString();
        code.src.Complex complex79 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex82 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex83 = complex79.multiply(complex82);
        code.src.Complex complex84 = complex71.add(complex83);
        double double85 = complex84.real;
        code.src.Complex complex88 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex89 = complex84.multiply(complex88);
        code.src.Complex complex90 = complex64.multiply(complex84);
        code.src.Complex complex93 = code.src.Complex.polar((double) ' ', (double) (byte) 100);
        code.src.Complex complex94 = complex84.multiply(complex93);
        code.src.Complex complex95 = complex61.multiply(complex93);
        double double96 = complex93.real;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(100.0,10.0)" + "'", str7, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(10.0,0.0)" + "'", str21, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(10.0,0.0)" + "'", str37, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 582.9143981028653d + "'", double48 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "(10.0,0.0)" + "'", str76, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 290.95719905143267d + "'", double85 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertNotNull(complex94);
        org.junit.Assert.assertNotNull(complex95);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 27.594203913205885d + "'", double96 == 27.594203913205885d);
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0283");
        code.src.Complex complex2 = new code.src.Complex((double) 100.0f, (double) 100.0f);
        code.src.Complex complex5 = code.src.Complex.polar(10.0d, (double) '4');
        code.src.Complex complex6 = complex2.add(complex5);
        complex6.real = 481.32140331011675d;
        code.src.Complex complex11 = code.src.Complex.polar((double) (short) -1, 52.0d);
        code.src.Complex complex14 = new code.src.Complex((double) 100, (double) 10.0f);
        complex14.real = (byte) 1;
        complex14.real = 589.1068753368511d;
        java.lang.String str19 = complex14.toString();
        code.src.Complex complex22 = new code.src.Complex((double) (short) 100, 43.756491210010616d);
        code.src.Complex complex23 = new code.src.Complex();
        complex23.real = 1L;
        code.src.Complex complex28 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex31 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex32 = complex28.multiply(complex31);
        java.lang.String str33 = complex28.toString();
        code.src.Complex complex36 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex39 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex40 = complex36.multiply(complex39);
        code.src.Complex complex41 = complex28.add(complex40);
        code.src.Complex complex44 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex47 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex48 = complex44.multiply(complex47);
        java.lang.String str49 = complex44.toString();
        code.src.Complex complex52 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex55 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex56 = complex52.multiply(complex55);
        code.src.Complex complex57 = complex44.add(complex56);
        code.src.Complex complex58 = complex41.add(complex57);
        code.src.Complex complex59 = complex23.add(complex58);
        double double60 = complex59.real;
        code.src.Complex complex63 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex66 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex67 = complex63.multiply(complex66);
        code.src.Complex complex68 = complex59.sub(complex66);
        code.src.Complex complex69 = complex22.add(complex66);
        code.src.Complex complex70 = complex14.sub(complex66);
        code.src.Complex complex71 = complex11.add(complex14);
        code.src.Complex complex72 = complex6.sub(complex14);
        java.lang.String str73 = complex14.toString();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(589.1068753368511,10.0)" + "'", str19, "(589.1068753368511,10.0)");
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(10.0,0.0)" + "'", str33, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(10.0,0.0)" + "'", str49, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 582.9143981028653d + "'", double60 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(589.1068753368511,10.0)" + "'", str73, "(589.1068753368511,10.0)");
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0284");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        double double37 = complex36.real;
        code.src.Complex complex40 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex43 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex44 = complex40.multiply(complex43);
        code.src.Complex complex45 = complex36.sub(complex43);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex43.add(complex48);
        code.src.Complex complex52 = new code.src.Complex((double) 10L, (double) '#');
        code.src.Complex complex53 = complex48.add(complex52);
        complex48.real = 43.756491210010616d;
        complex48.imaginary = 100.0d;
        complex48.imaginary = (-317.11773840932915d);
        code.src.Complex complex62 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex65 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex66 = complex62.multiply(complex65);
        java.lang.String str67 = complex62.toString();
        code.src.Complex complex70 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex73 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex74 = complex70.multiply(complex73);
        code.src.Complex complex75 = complex62.add(complex74);
        code.src.Complex complex76 = complex48.multiply(complex74);
        complex48.imaginary = 43.756491210010616d;
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 582.9143981028653d + "'", double37 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(10.0,0.0)" + "'", str67, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0285");
        code.src.Complex complex2 = code.src.Complex.polar((double) (short) -1, (double) (byte) 0);
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        double double36 = complex18.real;
        double double37 = complex18.real;
        code.src.Complex complex40 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex43 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex44 = complex40.multiply(complex43);
        java.lang.String str45 = complex40.toString();
        code.src.Complex complex48 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex51 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex52 = complex48.multiply(complex51);
        code.src.Complex complex53 = complex40.add(complex52);
        code.src.Complex complex56 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex59 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex60 = complex56.multiply(complex59);
        java.lang.String str61 = complex56.toString();
        code.src.Complex complex64 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex67 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex68 = complex64.multiply(complex67);
        code.src.Complex complex69 = complex56.add(complex68);
        code.src.Complex complex70 = complex53.add(complex69);
        code.src.Complex complex71 = complex18.sub(complex53);
        double double72 = complex53.imaginary;
        code.src.Complex complex73 = complex2.add(complex53);
        double double74 = complex2.imaginary;
        code.src.Complex complex77 = new code.src.Complex((double) (short) 0, (double) ' ');
        code.src.Complex complex80 = new code.src.Complex((double) 10L, (double) '#');
        double double81 = complex80.imaginary;
        code.src.Complex complex82 = complex77.multiply(complex80);
        code.src.Complex complex85 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex88 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex89 = complex85.multiply(complex88);
        double double90 = complex89.imaginary;
        code.src.Complex complex91 = complex82.multiply(complex89);
        code.src.Complex complex92 = complex2.multiply(complex82);
        double double93 = complex82.real;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 290.95719905143267d + "'", double36 == 290.95719905143267d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 290.95719905143267d + "'", double37 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "(10.0,0.0)" + "'", str45, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(10.0,0.0)" + "'", str61, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 437.56491210010614d + "'", double72 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + (-0.0d) + "'", double74 == (-0.0d));
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 35.0d + "'", double81 == 35.0d);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 437.56491210010614d + "'", double90 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + (-1120.0d) + "'", double93 == (-1120.0d));
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0286");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 100, 43.756491210010616d);
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        double double40 = complex39.real;
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        code.src.Complex complex48 = complex39.sub(complex46);
        code.src.Complex complex49 = complex2.add(complex46);
        code.src.Complex complex52 = new code.src.Complex((double) (byte) 100, (double) 'a');
        code.src.Complex complex55 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex58 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex59 = complex55.multiply(complex58);
        double double60 = complex58.imaginary;
        java.lang.String str61 = complex58.toString();
        code.src.Complex complex62 = complex52.sub(complex58);
        code.src.Complex complex63 = complex2.multiply(complex62);
        complex2.real = 437.56491210010614d;
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 582.9143981028653d + "'", double40 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 43.756491210010616d + "'", double60 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str61, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0287");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        double double16 = complex15.real;
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex15.multiply(complex19);
        java.lang.Class<?> wildcardClass21 = complex19.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 290.95719905143267d + "'", double16 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0288");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        double double37 = complex36.real;
        code.src.Complex complex40 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex43 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex44 = complex40.multiply(complex43);
        code.src.Complex complex45 = complex36.sub(complex43);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex43.add(complex48);
        code.src.Complex complex52 = new code.src.Complex((double) 10L, (double) '#');
        code.src.Complex complex53 = complex48.add(complex52);
        complex48.real = 43.756491210010616d;
        complex48.imaginary = 100.0d;
        code.src.Complex complex60 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        double double61 = complex60.abs();
        code.src.Complex complex62 = complex48.add(complex60);
        java.lang.String str63 = complex62.toString();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 582.9143981028653d + "'", double37 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(43.756491210010616,100.0)" + "'", str63, "(43.756491210010616,100.0)");
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0289");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex10.real = 10;
        code.src.Complex complex13 = complex2.multiply(complex10);
        java.lang.Class<?> wildcardClass14 = complex13.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0290");
        code.src.Complex complex2 = code.src.Complex.polar(572.0d, (-393.80842089009553d));
        complex2.real = 0.0d;
        java.lang.Class<?> wildcardClass5 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        code.src.Complex complex33 = new code.src.Complex();
        code.src.Complex complex34 = complex32.add(complex33);
        code.src.Complex complex37 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex40 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex41 = complex37.multiply(complex40);
        double double42 = complex40.imaginary;
        java.lang.String str43 = complex40.toString();
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double47 = complex46.abs();
        double double48 = complex46.real;
        code.src.Complex complex49 = complex40.sub(complex46);
        code.src.Complex complex50 = complex33.sub(complex40);
        double double51 = complex33.real;
        code.src.Complex complex54 = new code.src.Complex(100.0d, (-1.0d));
        double double55 = complex54.abs();
        code.src.Complex complex56 = complex33.sub(complex54);
        double double57 = complex54.real;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 43.756491210010616d + "'", double42 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str43, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 52.0d + "'", double47 == 52.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 28.09571990514327d + "'", double48 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 100.00499987500625d + "'", double55 == 100.00499987500625d);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 100.0d + "'", double57 == 100.0d);
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0292");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 0, (double) ' ');
        complex2.imaginary = (-1.0d);
        double double5 = complex2.real;
        complex2.real = 437.56491210010614d;
        java.lang.Class<?> wildcardClass8 = complex2.getClass();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0293");
        code.src.Complex complex2 = code.src.Complex.polar(589.1068753368511d, (double) (byte) -1);
        double double3 = complex2.imaginary;
        double double4 = complex2.real;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-495.7163425468028d) + "'", double3 == (-495.7163425468028d));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 318.2958031472754d + "'", double4 == 318.2958031472754d);
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0294");
        code.src.Complex complex2 = code.src.Complex.polar(291.13071236105446d, (double) '#');
        java.lang.Class<?> wildcardClass3 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0295");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        java.lang.String str8 = complex2.toString();
        code.src.Complex complex11 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex14 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex15 = complex11.multiply(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        java.lang.String str32 = complex18.toString();
        code.src.Complex complex33 = complex15.add(complex18);
        code.src.Complex complex34 = complex2.sub(complex18);
        java.lang.String str35 = complex34.toString();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(10.0,0.0)" + "'", str8, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(10.0,0.0)" + "'", str32, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(0.0,0.0)" + "'", str35, "(0.0,0.0)");
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0296");
        code.src.Complex complex2 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex2.imaginary = (short) 0;
        complex2.imaginary = 100.0f;
        code.src.Complex complex9 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex12 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex13 = complex9.multiply(complex12);
        java.lang.String str14 = complex9.toString();
        code.src.Complex complex17 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex20 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex21 = complex17.multiply(complex20);
        code.src.Complex complex22 = complex9.add(complex21);
        code.src.Complex complex25 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex28 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex29 = complex25.multiply(complex28);
        java.lang.String str30 = complex25.toString();
        code.src.Complex complex33 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex36 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex37 = complex33.multiply(complex36);
        code.src.Complex complex38 = complex25.add(complex37);
        code.src.Complex complex39 = complex22.add(complex38);
        java.lang.String str40 = complex22.toString();
        code.src.Complex complex43 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex43.imaginary = (short) 0;
        java.lang.String str46 = complex43.toString();
        code.src.Complex complex47 = complex22.sub(complex43);
        code.src.Complex complex48 = complex2.add(complex47);
        complex48.imaginary = 0;
        complex48.real = 10.0f;
        complex48.imaginary = 481.32140331011675d;
        code.src.Complex complex57 = new code.src.Complex(290.9589175121722d, (double) 10);
        code.src.Complex complex58 = complex48.add(complex57);
        double double59 = complex57.abs();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(10.0,0.0)" + "'", str14, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(10.0,0.0)" + "'", str30, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str40, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(-0.0,0.0)" + "'", str46, "(-0.0,0.0)");
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 291.13071236105446d + "'", double59 == 291.13071236105446d);
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0297");
        code.src.Complex complex2 = new code.src.Complex(35.014282800023196d, (-54.40211108893698d));
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = new code.src.Complex();
        code.src.Complex complex37 = complex35.add(complex36);
        code.src.Complex complex40 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex43 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex44 = complex40.multiply(complex43);
        java.lang.String str45 = complex40.toString();
        code.src.Complex complex48 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex51 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex52 = complex48.multiply(complex51);
        code.src.Complex complex53 = complex40.add(complex52);
        code.src.Complex complex56 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex59 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex60 = complex56.multiply(complex59);
        java.lang.String str61 = complex56.toString();
        code.src.Complex complex64 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex67 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex68 = complex64.multiply(complex67);
        code.src.Complex complex69 = complex56.add(complex68);
        code.src.Complex complex70 = complex53.add(complex69);
        code.src.Complex complex71 = new code.src.Complex();
        code.src.Complex complex72 = complex70.add(complex71);
        code.src.Complex complex75 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex78 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex79 = complex75.multiply(complex78);
        double double80 = complex78.imaginary;
        java.lang.String str81 = complex78.toString();
        code.src.Complex complex84 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double85 = complex84.abs();
        double double86 = complex84.real;
        code.src.Complex complex87 = complex78.sub(complex84);
        code.src.Complex complex88 = complex71.sub(complex78);
        code.src.Complex complex89 = complex36.add(complex71);
        double double90 = complex89.real;
        double double91 = complex89.real;
        code.src.Complex complex92 = complex2.sub(complex89);
        java.lang.Class<?> wildcardClass93 = complex92.getClass();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "(10.0,0.0)" + "'", str45, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(10.0,0.0)" + "'", str61, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 43.756491210010616d + "'", double80 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str81, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 52.0d + "'", double85 == 52.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 28.09571990514327d + "'", double86 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0298");
        code.src.Complex complex2 = code.src.Complex.polar((double) 1L, (double) 100);
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        double double40 = complex39.real;
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        code.src.Complex complex48 = complex39.sub(complex46);
        code.src.Complex complex51 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex52 = complex46.add(complex51);
        code.src.Complex complex55 = new code.src.Complex((double) 10L, (double) '#');
        code.src.Complex complex56 = complex51.add(complex55);
        code.src.Complex complex59 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex59.imaginary = (short) 0;
        complex59.imaginary = 100.0f;
        code.src.Complex complex64 = complex51.multiply(complex59);
        code.src.Complex complex65 = complex2.add(complex59);
        double double66 = complex2.imaginary;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 582.9143981028653d + "'", double40 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + (-0.5063656411097588d) + "'", double66 == (-0.5063656411097588d));
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0299");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, (double) '#');
        double double3 = complex2.imaginary;
        double double4 = complex2.abs();
        code.src.Complex complex7 = new code.src.Complex(100.0d, 0.0d);
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        java.lang.String str15 = complex10.toString();
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        code.src.Complex complex23 = complex10.add(complex22);
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        java.lang.String str31 = complex26.toString();
        code.src.Complex complex34 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex37 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex38 = complex34.multiply(complex37);
        code.src.Complex complex39 = complex26.add(complex38);
        code.src.Complex complex42 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex45 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex46 = complex42.multiply(complex45);
        java.lang.String str47 = complex42.toString();
        code.src.Complex complex50 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex53 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex54 = complex50.multiply(complex53);
        code.src.Complex complex55 = complex42.add(complex54);
        code.src.Complex complex56 = complex39.add(complex55);
        java.lang.String str57 = complex39.toString();
        double double58 = complex39.abs();
        code.src.Complex complex59 = complex23.multiply(complex39);
        code.src.Complex complex60 = complex7.add(complex59);
        code.src.Complex complex61 = complex2.multiply(complex60);
        complex60.imaginary = 10;
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 35.0d + "'", double3 == 35.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 36.40054944640259d + "'", double4 == 36.40054944640259d);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(10.0,0.0)" + "'", str15, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(10.0,0.0)" + "'", str31, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(10.0,0.0)" + "'", str47, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str57, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 525.4704025737593d + "'", double58 == 525.4704025737593d);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0300");
        code.src.Complex complex2 = code.src.Complex.polar(28.09571990514327d, (double) 0);
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        double double40 = complex39.real;
        code.src.Complex complex41 = complex2.add(complex39);
        code.src.Complex complex44 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double45 = complex44.abs();
        double double46 = complex44.real;
        code.src.Complex complex49 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex52 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex53 = complex49.multiply(complex52);
        java.lang.String str54 = complex49.toString();
        code.src.Complex complex57 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex60 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex61 = complex57.multiply(complex60);
        code.src.Complex complex62 = complex49.add(complex61);
        code.src.Complex complex65 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex68 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex69 = complex65.multiply(complex68);
        java.lang.String str70 = complex65.toString();
        code.src.Complex complex73 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex76 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex77 = complex73.multiply(complex76);
        code.src.Complex complex78 = complex65.add(complex77);
        code.src.Complex complex79 = complex62.add(complex78);
        java.lang.String str80 = complex62.toString();
        double double81 = complex62.abs();
        double double82 = complex62.real;
        code.src.Complex complex83 = complex44.sub(complex62);
        java.lang.String str84 = complex44.toString();
        code.src.Complex complex85 = complex41.multiply(complex44);
        double double86 = complex41.real;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 582.9143981028653d + "'", double40 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 52.0d + "'", double45 == 52.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 28.09571990514327d + "'", double46 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(10.0,0.0)" + "'", str54, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(10.0,0.0)" + "'", str70, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str80, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 525.4704025737593d + "'", double81 == 525.4704025737593d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 290.95719905143267d + "'", double82 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str84, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 611.0101180080086d + "'", double86 == 611.0101180080086d);
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0301");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        double double37 = complex36.real;
        code.src.Complex complex40 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex43 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex44 = complex40.multiply(complex43);
        code.src.Complex complex45 = complex36.sub(complex43);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex43.add(complex48);
        java.lang.String str50 = complex43.toString();
        double double51 = complex43.abs();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 582.9143981028653d + "'", double37 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str50, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 52.0d + "'", double51 == 52.0d);
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0302");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        double double37 = complex36.real;
        code.src.Complex complex40 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex43 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex44 = complex40.multiply(complex43);
        code.src.Complex complex45 = complex36.sub(complex43);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex43.add(complex48);
        code.src.Complex complex52 = new code.src.Complex((double) 10L, (double) '#');
        code.src.Complex complex53 = complex48.add(complex52);
        complex48.real = 43.756491210010616d;
        complex48.imaginary = 100.0d;
        complex48.imaginary = (-317.11773840932915d);
        code.src.Complex complex62 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex65 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex66 = complex62.multiply(complex65);
        java.lang.String str67 = complex62.toString();
        code.src.Complex complex70 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex73 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex74 = complex70.multiply(complex73);
        code.src.Complex complex75 = complex62.add(complex74);
        code.src.Complex complex76 = complex48.multiply(complex74);
        complex76.imaginary = (-213613.9212426372d);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 582.9143981028653d + "'", double37 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(10.0,0.0)" + "'", str67, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0303");
        code.src.Complex complex2 = code.src.Complex.polar((double) (short) 0, (double) (byte) 10);
        code.src.Complex complex3 = new code.src.Complex();
        code.src.Complex complex6 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex9 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex10 = complex6.multiply(complex9);
        java.lang.String str11 = complex6.toString();
        code.src.Complex complex14 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex17 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex18 = complex14.multiply(complex17);
        code.src.Complex complex19 = complex6.add(complex18);
        code.src.Complex complex22 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex25 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex26 = complex22.multiply(complex25);
        java.lang.String str27 = complex22.toString();
        code.src.Complex complex30 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex33 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex34 = complex30.multiply(complex33);
        code.src.Complex complex35 = complex22.add(complex34);
        code.src.Complex complex36 = complex19.add(complex35);
        double double37 = complex36.real;
        code.src.Complex complex38 = complex3.multiply(complex36);
        double double39 = complex36.abs();
        code.src.Complex complex40 = complex2.sub(complex36);
        code.src.Complex complex43 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex43.imaginary = (short) 0;
        complex43.imaginary = 100.0f;
        code.src.Complex complex50 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str51 = complex50.toString();
        code.src.Complex complex54 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        code.src.Complex complex55 = complex50.sub(complex54);
        code.src.Complex complex56 = complex43.multiply(complex55);
        java.lang.String str57 = complex55.toString();
        double double58 = complex55.real;
        code.src.Complex complex59 = complex2.add(complex55);
        complex55.real = 1.0d;
        double double62 = complex55.real;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(10.0,0.0)" + "'", str11, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(10.0,0.0)" + "'", str27, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 581.9143981028653d + "'", double37 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1050.9408051475186d + "'", double39 == 1050.9408051475186d);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "(100.0,10.0)" + "'", str51, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(589.1068753368511,327.11773840932915)" + "'", str57, "(589.1068753368511,327.11773840932915)");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 589.1068753368511d + "'", double58 == 589.1068753368511d);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1.0d + "'", double62 == 1.0d);
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        code.src.Complex complex2 = code.src.Complex.polar((double) (byte) 0, 1051.4948429356753d);
        java.lang.String str3 = complex2.toString();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "(-0.0,0.0)" + "'", str3, "(-0.0,0.0)");
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0305");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        code.src.Complex complex40 = complex15.sub(complex35);
        double double41 = complex40.imaginary;
        code.src.Complex complex42 = new code.src.Complex();
        complex42.real = 1L;
        code.src.Complex complex47 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex50 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex51 = complex47.multiply(complex50);
        java.lang.String str52 = complex47.toString();
        code.src.Complex complex55 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex58 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex59 = complex55.multiply(complex58);
        code.src.Complex complex60 = complex47.add(complex59);
        code.src.Complex complex63 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex66 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex67 = complex63.multiply(complex66);
        java.lang.String str68 = complex63.toString();
        code.src.Complex complex71 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex74 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex75 = complex71.multiply(complex74);
        code.src.Complex complex76 = complex63.add(complex75);
        code.src.Complex complex77 = complex60.add(complex76);
        code.src.Complex complex78 = complex42.add(complex77);
        double double79 = complex78.real;
        code.src.Complex complex82 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex85 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex86 = complex82.multiply(complex85);
        code.src.Complex complex87 = complex78.sub(complex85);
        complex87.real = 0.0d;
        code.src.Complex complex90 = complex40.sub(complex87);
        double double91 = complex87.imaginary;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 437.56491210010614d + "'", double41 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(10.0,0.0)" + "'", str52, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(10.0,0.0)" + "'", str68, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 582.9143981028653d + "'", double79 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 831.3733329902017d + "'", double91 == 831.3733329902017d);
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0306");
        code.src.Complex complex2 = code.src.Complex.polar((double) (short) 0, (double) (byte) 10);
        code.src.Complex complex5 = code.src.Complex.polar((-317.11773840932915d), 445.65251212240173d);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.Class<?> wildcardClass7 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        java.lang.String str8 = complex2.toString();
        java.lang.Class<?> wildcardClass9 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(10.0,0.0)" + "'", str8, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0308");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        double double7 = complex6.imaginary;
        complex6.imaginary = 572.0d;
        code.src.Complex complex10 = new code.src.Complex();
        complex10.real = 1L;
        code.src.Complex complex15 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex18 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex19 = complex15.multiply(complex18);
        java.lang.String str20 = complex15.toString();
        code.src.Complex complex23 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex26 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex27 = complex23.multiply(complex26);
        code.src.Complex complex28 = complex15.add(complex27);
        code.src.Complex complex31 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex34 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex35 = complex31.multiply(complex34);
        java.lang.String str36 = complex31.toString();
        code.src.Complex complex39 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex42 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex43 = complex39.multiply(complex42);
        code.src.Complex complex44 = complex31.add(complex43);
        code.src.Complex complex45 = complex28.add(complex44);
        code.src.Complex complex46 = complex10.add(complex45);
        double double47 = complex46.real;
        java.lang.String str48 = complex46.toString();
        code.src.Complex complex51 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex54 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex55 = complex51.multiply(complex54);
        java.lang.String str56 = complex51.toString();
        code.src.Complex complex59 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex62 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex63 = complex59.multiply(complex62);
        code.src.Complex complex64 = complex51.add(complex63);
        double double65 = complex64.real;
        code.src.Complex complex68 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex71 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex72 = complex68.multiply(complex71);
        double double73 = complex72.imaginary;
        code.src.Complex complex74 = complex64.sub(complex72);
        double double75 = complex64.imaginary;
        code.src.Complex complex76 = complex46.multiply(complex64);
        code.src.Complex complex77 = complex6.multiply(complex46);
        java.lang.Class<?> wildcardClass78 = complex46.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 437.56491210010614d + "'", double7 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(10.0,0.0)" + "'", str20, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(10.0,0.0)" + "'", str36, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 582.9143981028653d + "'", double47 == 582.9143981028653d);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(582.9143981028653,875.1298242002123)" + "'", str48, "(582.9143981028653,875.1298242002123)");
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "(10.0,0.0)" + "'", str56, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 290.95719905143267d + "'", double65 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 437.56491210010614d + "'", double73 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 437.56491210010614d + "'", double75 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0309");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        double double37 = complex0.imaginary;
        double double38 = complex0.imaginary;
        code.src.Complex complex39 = new code.src.Complex();
        complex39.real = 1L;
        code.src.Complex complex44 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex47 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex48 = complex44.multiply(complex47);
        java.lang.String str49 = complex44.toString();
        code.src.Complex complex52 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex55 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex56 = complex52.multiply(complex55);
        code.src.Complex complex57 = complex44.add(complex56);
        code.src.Complex complex60 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex63 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex64 = complex60.multiply(complex63);
        java.lang.String str65 = complex60.toString();
        code.src.Complex complex68 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex71 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex72 = complex68.multiply(complex71);
        code.src.Complex complex73 = complex60.add(complex72);
        code.src.Complex complex74 = complex57.add(complex73);
        code.src.Complex complex75 = complex39.add(complex74);
        double double76 = complex75.real;
        code.src.Complex complex79 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex82 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex83 = complex79.multiply(complex82);
        code.src.Complex complex84 = complex75.sub(complex82);
        code.src.Complex complex85 = complex0.sub(complex75);
        complex0.imaginary = 100.0d;
        double double88 = complex0.imaginary;
        java.lang.Class<?> wildcardClass89 = complex0.getClass();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(10.0,0.0)" + "'", str49, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(10.0,0.0)" + "'", str65, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 582.9143981028653d + "'", double76 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 100.0d + "'", double88 == 100.0d);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0310");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex2.add(complex18);
        code.src.Complex complex39 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex39.imaginary = (short) 0;
        complex39.imaginary = 100.0f;
        code.src.Complex complex46 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str47 = complex46.toString();
        code.src.Complex complex50 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        code.src.Complex complex51 = complex46.sub(complex50);
        code.src.Complex complex52 = complex39.multiply(complex51);
        java.lang.String str53 = complex51.toString();
        code.src.Complex complex54 = complex2.sub(complex51);
        complex2.imaginary = (byte) -1;
        complex2.real = '4';
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(100.0,10.0)" + "'", str47, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(589.1068753368511,327.11773840932915)" + "'", str53, "(589.1068753368511,327.11773840932915)");
        org.junit.Assert.assertNotNull(complex54);
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0311");
        code.src.Complex complex2 = code.src.Complex.polar((double) 1L, (double) 100);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.add(complex5);
        code.src.Complex complex9 = new code.src.Complex((double) 100, (double) 10.0f);
        complex9.imaginary = 100L;
        code.src.Complex complex14 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex17 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex18 = complex14.multiply(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex37 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex40 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex41 = complex37.multiply(complex40);
        java.lang.String str42 = complex37.toString();
        code.src.Complex complex45 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex45.multiply(complex48);
        code.src.Complex complex50 = complex37.add(complex49);
        code.src.Complex complex51 = complex34.add(complex50);
        code.src.Complex complex54 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex57 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex58 = complex54.multiply(complex57);
        code.src.Complex complex59 = complex34.sub(complex54);
        code.src.Complex complex60 = complex17.add(complex59);
        code.src.Complex complex61 = complex9.multiply(complex59);
        java.lang.String str62 = complex9.toString();
        code.src.Complex complex63 = complex2.multiply(complex9);
        code.src.Complex complex66 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double67 = complex66.abs();
        java.lang.String str68 = complex66.toString();
        code.src.Complex complex69 = complex9.add(complex66);
        code.src.Complex complex72 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        code.src.Complex complex73 = complex9.sub(complex72);
        java.lang.Class<?> wildcardClass74 = complex9.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(10.0,0.0)" + "'", str42, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(100.0,100.0)" + "'", str62, "(100.0,100.0)");
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 52.0d + "'", double67 == 52.0d);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str68, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0312");
        code.src.Complex complex2 = new code.src.Complex(10.0d, (-906.2883532154044d));
        java.lang.String str3 = complex2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "(10.0,-906.2883532154044)" + "'", str3, "(10.0,-906.2883532154044)");
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0313");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        code.src.Complex complex40 = complex15.sub(complex35);
        code.src.Complex complex41 = new code.src.Complex();
        code.src.Complex complex44 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex47 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex48 = complex44.multiply(complex47);
        java.lang.String str49 = complex44.toString();
        code.src.Complex complex52 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex55 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex56 = complex52.multiply(complex55);
        code.src.Complex complex57 = complex44.add(complex56);
        code.src.Complex complex60 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex63 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex64 = complex60.multiply(complex63);
        java.lang.String str65 = complex60.toString();
        code.src.Complex complex68 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex71 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex72 = complex68.multiply(complex71);
        code.src.Complex complex73 = complex60.add(complex72);
        code.src.Complex complex74 = complex57.add(complex73);
        double double75 = complex74.real;
        code.src.Complex complex76 = complex41.multiply(complex74);
        code.src.Complex complex77 = complex15.multiply(complex74);
        code.src.Complex complex80 = new code.src.Complex(43.756491210010616d, 437.56491210010614d);
        double double81 = complex80.imaginary;
        code.src.Complex complex82 = complex74.add(complex80);
        complex82.real = (-437.56491210010614d);
        java.lang.String str85 = complex82.toString();
        complex82.real = 875.8294407044641d;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(10.0,0.0)" + "'", str49, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(10.0,0.0)" + "'", str65, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 581.9143981028653d + "'", double75 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 437.56491210010614d + "'", double81 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "(-437.56491210010614,1312.6947363003185)" + "'", str85, "(-437.56491210010614,1312.6947363003185)");
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0314");
        code.src.Complex complex2 = new code.src.Complex((double) (byte) 1, (double) (-1.0f));
        double double3 = complex2.real;
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0315");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 0, (double) ' ');
        code.src.Complex complex5 = new code.src.Complex((double) 10L, (double) '#');
        double double6 = complex5.imaginary;
        code.src.Complex complex7 = complex2.multiply(complex5);
        complex2.imaginary = 10.0d;
        double double10 = complex2.real;
        double double11 = complex2.abs();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0316");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 0, (double) ' ');
        code.src.Complex complex5 = new code.src.Complex((double) 10L, (double) '#');
        double double6 = complex5.imaginary;
        code.src.Complex complex7 = complex2.multiply(complex5);
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        double double15 = complex14.imaginary;
        code.src.Complex complex16 = complex7.multiply(complex14);
        complex16.real = (short) 10;
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 437.56491210010614d + "'", double15 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex16);
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0317");
        code.src.Complex complex2 = code.src.Complex.polar((double) 10.0f, 393.80842089009553d);
        code.src.Complex complex5 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex5.imaginary = (short) 0;
        complex5.imaginary = 100.0f;
        code.src.Complex complex12 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str13 = complex12.toString();
        code.src.Complex complex16 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        code.src.Complex complex17 = complex12.sub(complex16);
        code.src.Complex complex18 = complex5.multiply(complex17);
        code.src.Complex complex19 = new code.src.Complex();
        code.src.Complex complex22 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex25 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex26 = complex22.multiply(complex25);
        java.lang.String str27 = complex22.toString();
        code.src.Complex complex30 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex33 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex34 = complex30.multiply(complex33);
        code.src.Complex complex35 = complex22.add(complex34);
        code.src.Complex complex38 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex41 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex42 = complex38.multiply(complex41);
        java.lang.String str43 = complex38.toString();
        code.src.Complex complex46 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex49 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex50 = complex46.multiply(complex49);
        code.src.Complex complex51 = complex38.add(complex50);
        code.src.Complex complex52 = complex35.add(complex51);
        double double53 = complex52.real;
        code.src.Complex complex54 = complex19.multiply(complex52);
        code.src.Complex complex57 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex60 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex61 = complex57.multiply(complex60);
        java.lang.String str62 = complex57.toString();
        code.src.Complex complex65 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex68 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex69 = complex65.multiply(complex68);
        code.src.Complex complex70 = complex57.add(complex69);
        code.src.Complex complex73 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex76 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex77 = complex73.multiply(complex76);
        java.lang.String str78 = complex73.toString();
        code.src.Complex complex81 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex84 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex85 = complex81.multiply(complex84);
        code.src.Complex complex86 = complex73.add(complex85);
        code.src.Complex complex87 = complex70.add(complex86);
        java.lang.String str88 = complex70.toString();
        double double89 = complex70.abs();
        code.src.Complex complex90 = complex19.multiply(complex70);
        code.src.Complex complex91 = complex18.add(complex90);
        complex18.real = (-198.14967628541848d);
        double double94 = complex18.abs();
        code.src.Complex complex95 = complex2.multiply(complex18);
        complex18.imaginary = 100;
        complex18.real = 1051.4948429356753d;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(100.0,10.0)" + "'", str13, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(10.0,0.0)" + "'", str27, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(10.0,0.0)" + "'", str43, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 581.9143981028653d + "'", double53 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(10.0,0.0)" + "'", str62, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(10.0,0.0)" + "'", str78, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str88, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 525.4704025737593d + "'", double89 == 525.4704025737593d);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 58911.02077697936d + "'", double94 == 58911.02077697936d);
        org.junit.Assert.assertNotNull(complex95);
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0318");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        double double7 = complex5.imaginary;
        java.lang.String str8 = complex5.toString();
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double12 = complex11.abs();
        double double13 = complex11.real;
        code.src.Complex complex14 = complex5.sub(complex11);
        complex11.imaginary = 467.07736184459986d;
        code.src.Complex complex19 = new code.src.Complex((double) 100.0f, (double) 100.0f);
        code.src.Complex complex22 = code.src.Complex.polar(10.0d, (double) '4');
        code.src.Complex complex23 = complex19.add(complex22);
        code.src.Complex complex24 = complex11.add(complex23);
        java.lang.Class<?> wildcardClass25 = complex23.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 43.756491210010616d + "'", double7 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str8, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 52.0d + "'", double12 == 52.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 28.09571990514327d + "'", double13 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0319");
        code.src.Complex complex2 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        double double40 = complex39.real;
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        code.src.Complex complex48 = complex39.sub(complex46);
        double double49 = complex39.imaginary;
        code.src.Complex complex50 = complex2.sub(complex39);
        complex2.imaginary = (byte) -1;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 582.9143981028653d + "'", double40 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 875.1298242002123d + "'", double49 == 875.1298242002123d);
        org.junit.Assert.assertNotNull(complex50);
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0320");
        code.src.Complex complex2 = new code.src.Complex(0.0d, (double) 'a');
        double double3 = complex2.abs();
        double double4 = complex2.imaginary;
        code.src.Complex complex7 = new code.src.Complex(291.95719905143267d, (double) 0);
        code.src.Complex complex8 = complex2.sub(complex7);
        java.lang.Class<?> wildcardClass9 = complex8.getClass();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 97.0d + "'", double3 == 97.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 97.0d + "'", double4 == 97.0d);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0321");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        double double37 = complex36.real;
        code.src.Complex complex40 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex43 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex44 = complex40.multiply(complex43);
        code.src.Complex complex45 = complex36.sub(complex43);
        complex43.real = (-1120.0d);
        code.src.Complex complex48 = null;
        // The following exception was thrown during execution in test generation
        try {
            code.src.Complex complex49 = complex43.sub(complex48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 582.9143981028653d + "'", double37 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0322");
        code.src.Complex complex2 = new code.src.Complex(28.09571990514327d, (double) (byte) -1);
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0323");
        code.src.Complex complex2 = code.src.Complex.polar((-906.2883532154044d), (double) 0);
        double double3 = complex2.abs();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 906.2883532154044d + "'", double3 == 906.2883532154044d);
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0324");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        double double33 = complex15.real;
        double double34 = complex15.real;
        code.src.Complex complex37 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex40 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex41 = complex37.multiply(complex40);
        java.lang.String str42 = complex37.toString();
        code.src.Complex complex45 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex45.multiply(complex48);
        code.src.Complex complex50 = complex37.add(complex49);
        code.src.Complex complex53 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex56 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex57 = complex53.multiply(complex56);
        java.lang.String str58 = complex53.toString();
        code.src.Complex complex61 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex64 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex65 = complex61.multiply(complex64);
        code.src.Complex complex66 = complex53.add(complex65);
        code.src.Complex complex67 = complex50.add(complex66);
        code.src.Complex complex68 = complex15.sub(complex50);
        complex68.imaginary = 1.0f;
        double double71 = complex68.real;
        double double72 = complex68.real;
        code.src.Complex complex73 = null;
        // The following exception was thrown during execution in test generation
        try {
            code.src.Complex complex74 = complex68.sub(complex73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 290.95719905143267d + "'", double33 == 290.95719905143267d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 290.95719905143267d + "'", double34 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(10.0,0.0)" + "'", str42, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(10.0,0.0)" + "'", str58, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0325");
        code.src.Complex complex2 = new code.src.Complex(0.0d, 354080.08284857025d);
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        complex2.imaginary = (-1.0f);
        double double18 = complex2.real;
        double double19 = complex2.real;
        java.lang.Class<?> wildcardClass20 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0327");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str3 = complex2.toString();
        java.lang.String str4 = complex2.toString();
        java.lang.String str5 = complex2.toString();
        double double6 = complex2.imaginary;
        double double7 = complex2.real;
        java.lang.Class<?> wildcardClass8 = complex2.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "(100.0,10.0)" + "'", str3, "(100.0,10.0)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(100.0,10.0)" + "'", str4, "(100.0,10.0)");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(100.0,10.0)" + "'", str5, "(100.0,10.0)");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0328");
        code.src.Complex complex2 = code.src.Complex.polar((double) (short) 10, (double) 1.0f);
        double double3 = complex2.abs();
        complex2.imaginary = 906.2883532154044d;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.0d + "'", double3 == 10.0d);
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0329");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        code.src.Complex complex9 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex12 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex13 = complex9.multiply(complex12);
        java.lang.String str14 = complex9.toString();
        code.src.Complex complex17 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex20 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex21 = complex17.multiply(complex20);
        code.src.Complex complex22 = complex9.add(complex21);
        code.src.Complex complex25 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex28 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex29 = complex25.multiply(complex28);
        java.lang.String str30 = complex25.toString();
        code.src.Complex complex33 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex36 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex37 = complex33.multiply(complex36);
        code.src.Complex complex38 = complex25.add(complex37);
        code.src.Complex complex39 = complex22.add(complex38);
        code.src.Complex complex42 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex45 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex46 = complex42.multiply(complex45);
        code.src.Complex complex47 = complex22.sub(complex42);
        code.src.Complex complex48 = complex5.add(complex47);
        double double49 = complex48.abs();
        double double50 = complex48.imaginary;
        complex48.real = (short) -1;
        java.lang.String str53 = complex48.toString();
        complex48.imaginary = 109.15415943981125d;
        code.src.Complex complex58 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex61 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex62 = complex58.multiply(complex61);
        double double63 = complex61.imaginary;
        java.lang.String str64 = complex61.toString();
        code.src.Complex complex67 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double68 = complex67.abs();
        double double69 = complex67.real;
        code.src.Complex complex70 = complex61.sub(complex67);
        double double71 = complex70.real;
        code.src.Complex complex72 = complex48.add(complex70);
        java.lang.Class<?> wildcardClass73 = complex48.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(10.0,0.0)" + "'", str14, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(10.0,0.0)" + "'", str30, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 572.0d + "'", double49 == 572.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 481.32140331011675d + "'", double50 == 481.32140331011675d);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(-1.0,481.32140331011675)" + "'", str53, "(-1.0,481.32140331011675)");
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 43.756491210010616d + "'", double63 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str64, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 52.0d + "'", double68 == 52.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 28.09571990514327d + "'", double69 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0330");
        code.src.Complex complex2 = code.src.Complex.polar(445.65251212240173d, 525.4704025737593d);
        java.lang.Class<?> wildcardClass3 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0331");
        code.src.Complex complex2 = code.src.Complex.polar(141.4213562373095d, 393.80842089009553d);
        code.src.Complex complex5 = code.src.Complex.polar((double) 10L, 100.0d);
        code.src.Complex complex8 = new code.src.Complex((double) 100, (double) 10.0f);
        complex8.real = (byte) 1;
        complex8.imaginary = (short) 100;
        code.src.Complex complex13 = new code.src.Complex();
        complex13.real = 1L;
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex34 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex37 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex38 = complex34.multiply(complex37);
        java.lang.String str39 = complex34.toString();
        code.src.Complex complex42 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex45 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex46 = complex42.multiply(complex45);
        code.src.Complex complex47 = complex34.add(complex46);
        code.src.Complex complex48 = complex31.add(complex47);
        code.src.Complex complex49 = complex13.add(complex48);
        double double50 = complex13.imaginary;
        double double51 = complex13.imaginary;
        java.lang.String str52 = complex13.toString();
        code.src.Complex complex53 = complex8.sub(complex13);
        code.src.Complex complex56 = new code.src.Complex((double) (byte) 100, (double) 'a');
        code.src.Complex complex59 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex62 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex63 = complex59.multiply(complex62);
        double double64 = complex62.imaginary;
        java.lang.String str65 = complex62.toString();
        code.src.Complex complex66 = complex56.sub(complex62);
        code.src.Complex complex69 = new code.src.Complex((double) 100, (double) 10.0f);
        complex69.real = (byte) 1;
        code.src.Complex complex72 = complex62.multiply(complex69);
        code.src.Complex complex73 = complex53.sub(complex72);
        code.src.Complex complex74 = complex5.multiply(complex72);
        double double75 = complex74.abs();
        code.src.Complex complex76 = complex2.sub(complex74);
        double double77 = complex2.real;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(10.0,0.0)" + "'", str39, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(1.0,0.0)" + "'", str52, "(1.0,0.0)");
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 43.756491210010616d + "'", double64 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str65, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 5225.935322982863d + "'", double75 == 5225.935322982863d);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + (-62.9683262670583d) + "'", double77 == (-62.9683262670583d));
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0332");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        code.src.Complex complex39 = new code.src.Complex(32.0d, 214489.24976920983d);
        code.src.Complex complex40 = complex0.add(complex39);
        complex0.real = ' ';
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex40);
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0333");
        code.src.Complex complex2 = new code.src.Complex(242.7106111527617d, (double) (-1.0f));
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0334");
        code.src.Complex complex2 = new code.src.Complex(0.0d, 663.590879631022d);
        code.src.Complex complex5 = code.src.Complex.polar(28.09571990514327d, (double) 0);
        code.src.Complex complex6 = new code.src.Complex();
        complex6.real = 1L;
        code.src.Complex complex11 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex14 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex15 = complex11.multiply(complex14);
        java.lang.String str16 = complex11.toString();
        code.src.Complex complex19 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex22 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex23 = complex19.multiply(complex22);
        code.src.Complex complex24 = complex11.add(complex23);
        code.src.Complex complex27 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex30 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex31 = complex27.multiply(complex30);
        java.lang.String str32 = complex27.toString();
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        code.src.Complex complex40 = complex27.add(complex39);
        code.src.Complex complex41 = complex24.add(complex40);
        code.src.Complex complex42 = complex6.add(complex41);
        double double43 = complex42.real;
        code.src.Complex complex44 = complex5.add(complex42);
        code.src.Complex complex47 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double48 = complex47.abs();
        double double49 = complex47.real;
        code.src.Complex complex52 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex55 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex56 = complex52.multiply(complex55);
        java.lang.String str57 = complex52.toString();
        code.src.Complex complex60 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex63 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex64 = complex60.multiply(complex63);
        code.src.Complex complex65 = complex52.add(complex64);
        code.src.Complex complex68 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex71 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex72 = complex68.multiply(complex71);
        java.lang.String str73 = complex68.toString();
        code.src.Complex complex76 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex79 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex80 = complex76.multiply(complex79);
        code.src.Complex complex81 = complex68.add(complex80);
        code.src.Complex complex82 = complex65.add(complex81);
        java.lang.String str83 = complex65.toString();
        double double84 = complex65.abs();
        double double85 = complex65.real;
        code.src.Complex complex86 = complex47.sub(complex65);
        java.lang.String str87 = complex47.toString();
        code.src.Complex complex88 = complex44.multiply(complex47);
        code.src.Complex complex89 = complex2.multiply(complex44);
        java.lang.Class<?> wildcardClass90 = complex89.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(10.0,0.0)" + "'", str16, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(10.0,0.0)" + "'", str32, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 582.9143981028653d + "'", double43 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 52.0d + "'", double48 == 52.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 28.09571990514327d + "'", double49 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(10.0,0.0)" + "'", str57, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(10.0,0.0)" + "'", str73, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str83, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 525.4704025737593d + "'", double84 == 525.4704025737593d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 290.95719905143267d + "'", double85 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str87, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0335");
        code.src.Complex complex2 = new code.src.Complex((double) (byte) 100, (double) 'a');
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        double double10 = complex8.imaginary;
        java.lang.String str11 = complex8.toString();
        code.src.Complex complex12 = complex2.sub(complex8);
        double double13 = complex8.real;
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 43.756491210010616d + "'", double10 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str11, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 28.09571990514327d + "'", double13 == 28.09571990514327d);
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0336");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        java.lang.String str33 = complex15.toString();
        double double34 = complex15.abs();
        double double35 = complex15.real;
        complex15.imaginary = 0;
        double double38 = complex15.imaginary;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str33, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 525.4704025737593d + "'", double34 == 525.4704025737593d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 290.95719905143267d + "'", double35 == 290.95719905143267d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0337");
        code.src.Complex complex2 = code.src.Complex.polar(10.0d, (double) '4');
        double double3 = complex2.imaginary;
        code.src.Complex complex6 = new code.src.Complex((double) (short) 0, (double) ' ');
        code.src.Complex complex7 = new code.src.Complex();
        complex7.real = 1L;
        code.src.Complex complex12 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex15 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex16 = complex12.multiply(complex15);
        java.lang.String str17 = complex12.toString();
        code.src.Complex complex20 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex23 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex24 = complex20.multiply(complex23);
        code.src.Complex complex25 = complex12.add(complex24);
        code.src.Complex complex28 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex31 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex32 = complex28.multiply(complex31);
        java.lang.String str33 = complex28.toString();
        code.src.Complex complex36 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex39 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex40 = complex36.multiply(complex39);
        code.src.Complex complex41 = complex28.add(complex40);
        code.src.Complex complex42 = complex25.add(complex41);
        code.src.Complex complex43 = complex7.add(complex42);
        code.src.Complex complex44 = complex6.add(complex42);
        code.src.Complex complex47 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex50 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex51 = complex47.multiply(complex50);
        double double52 = complex50.imaginary;
        java.lang.String str53 = complex50.toString();
        code.src.Complex complex56 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double57 = complex56.abs();
        double double58 = complex56.real;
        code.src.Complex complex59 = complex50.sub(complex56);
        code.src.Complex complex60 = complex42.sub(complex50);
        double double61 = complex42.real;
        code.src.Complex complex62 = complex2.multiply(complex42);
        complex2.real = 352.8614791462894d;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 9.866275920404853d + "'", double3 == 9.866275920404853d);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(10.0,0.0)" + "'", str17, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(10.0,0.0)" + "'", str33, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 43.756491210010616d + "'", double52 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str53, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 52.0d + "'", double57 == 52.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 28.09571990514327d + "'", double58 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 581.9143981028653d + "'", double61 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex62);
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0338");
        code.src.Complex complex2 = code.src.Complex.polar((double) 10.0f, (-0.5063656411097588d));
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0339");
        code.src.Complex complex2 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double3 = complex2.abs();
        double double4 = complex2.real;
        code.src.Complex complex7 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex10 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex11 = complex7.multiply(complex10);
        java.lang.String str12 = complex7.toString();
        code.src.Complex complex15 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex18 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex19 = complex15.multiply(complex18);
        code.src.Complex complex20 = complex7.add(complex19);
        code.src.Complex complex23 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex26 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex27 = complex23.multiply(complex26);
        java.lang.String str28 = complex23.toString();
        code.src.Complex complex31 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex34 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex35 = complex31.multiply(complex34);
        code.src.Complex complex36 = complex23.add(complex35);
        code.src.Complex complex37 = complex20.add(complex36);
        java.lang.String str38 = complex20.toString();
        double double39 = complex20.abs();
        double double40 = complex20.real;
        code.src.Complex complex41 = complex2.sub(complex20);
        code.src.Complex complex44 = code.src.Complex.polar(875.1298242002123d, (double) (-1L));
        code.src.Complex complex45 = complex41.sub(complex44);
        double double46 = complex41.imaginary;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 52.0d + "'", double3 == 52.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 28.09571990514327d + "'", double4 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(10.0,0.0)" + "'", str12, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(10.0,0.0)" + "'", str28, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str38, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 525.4704025737593d + "'", double39 == 525.4704025737593d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 290.95719905143267d + "'", double40 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-393.80842089009553d) + "'", double46 == (-393.80842089009553d));
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0340");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        double double7 = complex6.imaginary;
        java.lang.String str8 = complex6.toString();
        double double9 = complex6.real;
        code.src.Complex complex12 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double13 = complex12.abs();
        java.lang.String str14 = complex12.toString();
        code.src.Complex complex15 = complex6.sub(complex12);
        code.src.Complex complex18 = new code.src.Complex(100.0d, 0.0d);
        code.src.Complex complex19 = complex15.add(complex18);
        double double20 = complex19.abs();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 437.56491210010614d + "'", double7 == 437.56491210010614d);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(280.95719905143267,437.56491210010614)" + "'", str8, "(280.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 280.95719905143267d + "'", double9 == 280.95719905143267d);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str14, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 528.7686600293723d + "'", double20 == 528.7686600293723d);
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0341");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        double double37 = complex36.real;
        java.lang.String str38 = complex36.toString();
        code.src.Complex complex41 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex44 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex45 = complex41.multiply(complex44);
        java.lang.String str46 = complex41.toString();
        code.src.Complex complex49 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex52 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex53 = complex49.multiply(complex52);
        code.src.Complex complex54 = complex41.add(complex53);
        double double55 = complex54.real;
        code.src.Complex complex58 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex61 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex62 = complex58.multiply(complex61);
        double double63 = complex62.imaginary;
        code.src.Complex complex64 = complex54.sub(complex62);
        double double65 = complex54.imaginary;
        code.src.Complex complex66 = complex36.multiply(complex54);
        double double67 = complex36.abs();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 582.9143981028653d + "'", double37 == 582.9143981028653d);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(582.9143981028653,875.1298242002123)" + "'", str38, "(582.9143981028653,875.1298242002123)");
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(10.0,0.0)" + "'", str46, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 290.95719905143267d + "'", double55 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 437.56491210010614d + "'", double63 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 437.56491210010614d + "'", double65 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 1051.4948429356753d + "'", double67 == 1051.4948429356753d);
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0342");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex10.real = 10;
        code.src.Complex complex13 = complex2.multiply(complex10);
        double double14 = complex2.real;
        java.lang.Class<?> wildcardClass15 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0343");
        code.src.Complex complex2 = code.src.Complex.polar((double) (byte) 100, 582.9143981028653d);
        complex2.real = 875.1298242002123d;
        complex2.imaginary = (-317.11773840932915d);
        code.src.Complex complex9 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex9.real = 10;
        code.src.Complex complex12 = complex2.sub(complex9);
        double double13 = complex12.imaginary;
        complex12.real = (-272.8614791462894d);
        double double16 = complex12.imaginary;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-317.11773840932915d) + "'", double13 == (-317.11773840932915d));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-317.11773840932915d) + "'", double16 == (-317.11773840932915d));
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0344");
        code.src.Complex complex2 = code.src.Complex.polar((-213613.9212426372d), (double) (byte) 1);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0345");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        double double37 = complex36.real;
        code.src.Complex complex40 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex43 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex44 = complex40.multiply(complex43);
        code.src.Complex complex45 = complex36.sub(complex43);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex43.add(complex48);
        complex48.real = 43.756491210010616d;
        java.lang.Class<?> wildcardClass52 = complex48.getClass();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 582.9143981028653d + "'", double37 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0346");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, (double) '#');
        double double3 = complex2.imaginary;
        code.src.Complex complex6 = new code.src.Complex((double) 100, (double) 10.0f);
        complex6.imaginary = 100L;
        java.lang.String str9 = complex6.toString();
        code.src.Complex complex10 = complex2.multiply(complex6);
        complex10.real = 100.00499987500625d;
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 35.0d + "'", double3 == 35.0d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(100.0,100.0)" + "'", str9, "(100.0,100.0)");
        org.junit.Assert.assertNotNull(complex10);
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0347");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 0, (double) ' ');
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        code.src.Complex complex40 = complex2.add(complex38);
        code.src.Complex complex43 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double44 = complex43.abs();
        code.src.Complex complex45 = complex2.add(complex43);
        complex2.real = 906.2883532154044d;
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 52.0d + "'", double44 == 52.0d);
        org.junit.Assert.assertNotNull(complex45);
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0348");
        code.src.Complex complex2 = new code.src.Complex(1.0d, 52.0d);
        double double3 = complex2.abs();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 52.009614495783374d + "'", double3 == 52.009614495783374d);
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0349");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        complex2.imaginary = (-1.0f);
        double double18 = complex2.real;
        double double19 = complex2.real;
        complex2.imaginary = 141.4213562373095d;
        code.src.Complex complex24 = new code.src.Complex((double) (byte) 1, (double) (-1.0f));
        complex24.imaginary = (byte) 1;
        code.src.Complex complex27 = complex2.multiply(complex24);
        java.lang.Class<?> wildcardClass28 = complex24.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0350");
        code.src.Complex complex2 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        complex2.real = 582.9143981028653d;
        code.src.Complex complex7 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str8 = complex7.toString();
        code.src.Complex complex11 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        code.src.Complex complex12 = complex7.sub(complex11);
        code.src.Complex complex13 = complex2.sub(complex11);
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        java.lang.String str21 = complex16.toString();
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        code.src.Complex complex29 = complex16.add(complex28);
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        java.lang.String str37 = complex32.toString();
        code.src.Complex complex40 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex43 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex44 = complex40.multiply(complex43);
        code.src.Complex complex45 = complex32.add(complex44);
        code.src.Complex complex46 = complex29.add(complex45);
        double double47 = complex46.real;
        code.src.Complex complex50 = code.src.Complex.polar((double) (byte) 100, 582.9143981028653d);
        code.src.Complex complex51 = complex46.sub(complex50);
        code.src.Complex complex54 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double55 = complex54.abs();
        code.src.Complex complex56 = complex50.add(complex54);
        code.src.Complex complex57 = complex2.sub(complex54);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(100.0,10.0)" + "'", str8, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(10.0,0.0)" + "'", str21, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(10.0,0.0)" + "'", str37, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 581.9143981028653d + "'", double47 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 52.0d + "'", double55 == 52.0d);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0351");
        code.src.Complex complex2 = new code.src.Complex(1051.4948429356753d, (double) '#');
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0352");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex38 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex41 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex42 = complex38.multiply(complex41);
        code.src.Complex complex43 = complex18.sub(complex38);
        code.src.Complex complex44 = new code.src.Complex();
        code.src.Complex complex47 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex50 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex51 = complex47.multiply(complex50);
        java.lang.String str52 = complex47.toString();
        code.src.Complex complex55 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex58 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex59 = complex55.multiply(complex58);
        code.src.Complex complex60 = complex47.add(complex59);
        code.src.Complex complex63 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex66 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex67 = complex63.multiply(complex66);
        java.lang.String str68 = complex63.toString();
        code.src.Complex complex71 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex74 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex75 = complex71.multiply(complex74);
        code.src.Complex complex76 = complex63.add(complex75);
        code.src.Complex complex77 = complex60.add(complex76);
        double double78 = complex77.real;
        code.src.Complex complex79 = complex44.multiply(complex77);
        code.src.Complex complex80 = complex18.multiply(complex77);
        code.src.Complex complex81 = complex2.sub(complex80);
        java.lang.String str82 = complex2.toString();
        java.lang.String str83 = complex2.toString();
        double double84 = complex2.abs();
        double double85 = complex2.imaginary;
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(10.0,0.0)" + "'", str52, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(10.0,0.0)" + "'", str68, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 581.9143981028653d + "'", double78 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "(100.0,10.0)" + "'", str82, "(100.0,10.0)");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(100.0,10.0)" + "'", str83, "(100.0,10.0)");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 100.4987562112089d + "'", double84 == 100.4987562112089d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 10.0d + "'", double85 == 10.0d);
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0353");
        code.src.Complex complex2 = code.src.Complex.polar(71852.21111515388d, 100.00499987500625d);
        double double3 = complex2.imaginary;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-36073.24762350389d) + "'", double3 == (-36073.24762350389d));
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0354");
        code.src.Complex complex0 = new code.src.Complex();
        code.src.Complex complex3 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex6 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex7 = complex3.multiply(complex6);
        java.lang.String str8 = complex3.toString();
        code.src.Complex complex11 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex14 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex15 = complex11.multiply(complex14);
        code.src.Complex complex16 = complex3.add(complex15);
        code.src.Complex complex19 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex22 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex23 = complex19.multiply(complex22);
        java.lang.String str24 = complex19.toString();
        code.src.Complex complex27 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex30 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex31 = complex27.multiply(complex30);
        code.src.Complex complex32 = complex19.add(complex31);
        code.src.Complex complex33 = complex16.add(complex32);
        double double34 = complex33.real;
        code.src.Complex complex35 = complex0.multiply(complex33);
        code.src.Complex complex38 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex41 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex42 = complex38.multiply(complex41);
        java.lang.String str43 = complex38.toString();
        code.src.Complex complex46 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex49 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex50 = complex46.multiply(complex49);
        code.src.Complex complex51 = complex38.add(complex50);
        code.src.Complex complex54 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex57 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex58 = complex54.multiply(complex57);
        java.lang.String str59 = complex54.toString();
        code.src.Complex complex62 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex65 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex66 = complex62.multiply(complex65);
        code.src.Complex complex67 = complex54.add(complex66);
        code.src.Complex complex68 = complex51.add(complex67);
        java.lang.String str69 = complex51.toString();
        double double70 = complex51.abs();
        code.src.Complex complex71 = complex0.multiply(complex51);
        code.src.Complex complex74 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex74.imaginary = (short) 0;
        complex74.real = 525.4704025737593d;
        double double79 = complex74.real;
        code.src.Complex complex80 = complex51.add(complex74);
        code.src.Complex complex83 = code.src.Complex.polar((double) (short) 1, 10.0d);
        code.src.Complex complex84 = complex74.multiply(complex83);
        complex83.real = (-1.0d);
        java.lang.Class<?> wildcardClass87 = complex83.getClass();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(10.0,0.0)" + "'", str8, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(10.0,0.0)" + "'", str24, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 581.9143981028653d + "'", double34 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(10.0,0.0)" + "'", str43, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(10.0,0.0)" + "'", str59, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str69, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 525.4704025737593d + "'", double70 == 525.4704025737593d);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 525.4704025737593d + "'", double79 == 525.4704025737593d);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0355");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex38 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex41 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex42 = complex38.multiply(complex41);
        code.src.Complex complex43 = complex18.sub(complex38);
        code.src.Complex complex44 = new code.src.Complex();
        code.src.Complex complex47 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex50 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex51 = complex47.multiply(complex50);
        java.lang.String str52 = complex47.toString();
        code.src.Complex complex55 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex58 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex59 = complex55.multiply(complex58);
        code.src.Complex complex60 = complex47.add(complex59);
        code.src.Complex complex63 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex66 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex67 = complex63.multiply(complex66);
        java.lang.String str68 = complex63.toString();
        code.src.Complex complex71 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex74 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex75 = complex71.multiply(complex74);
        code.src.Complex complex76 = complex63.add(complex75);
        code.src.Complex complex77 = complex60.add(complex76);
        double double78 = complex77.real;
        code.src.Complex complex79 = complex44.multiply(complex77);
        code.src.Complex complex80 = complex18.multiply(complex77);
        code.src.Complex complex81 = complex2.sub(complex80);
        java.lang.String str82 = complex2.toString();
        java.lang.String str83 = complex2.toString();
        complex2.imaginary = 280.95719905143267d;
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(10.0,0.0)" + "'", str52, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(10.0,0.0)" + "'", str68, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 581.9143981028653d + "'", double78 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "(100.0,10.0)" + "'", str82, "(100.0,10.0)");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(100.0,10.0)" + "'", str83, "(100.0,10.0)");
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0356");
        code.src.Complex complex2 = code.src.Complex.polar((-198.14967628541848d), (double) ' ');
        java.lang.Class<?> wildcardClass3 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0357");
        code.src.Complex complex2 = new code.src.Complex(525.4704025737593d, (double) (byte) 100);
        code.src.Complex complex3 = null;
        // The following exception was thrown during execution in test generation
        try {
            code.src.Complex complex4 = complex2.sub(complex3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0358");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        java.lang.String str16 = complex2.toString();
        complex2.imaginary = '#';
        code.src.Complex complex21 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        double double22 = complex21.abs();
        code.src.Complex complex25 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str26 = complex25.toString();
        code.src.Complex complex27 = complex21.multiply(complex25);
        double double28 = complex25.real;
        code.src.Complex complex31 = new code.src.Complex((double) 100, (double) 10.0f);
        complex31.real = (byte) 1;
        complex31.imaginary = (short) 100;
        code.src.Complex complex38 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex41 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex42 = complex38.multiply(complex41);
        java.lang.String str43 = complex38.toString();
        code.src.Complex complex46 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex49 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex50 = complex46.multiply(complex49);
        code.src.Complex complex51 = complex38.add(complex50);
        double double52 = complex51.real;
        code.src.Complex complex55 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex56 = complex51.multiply(complex55);
        code.src.Complex complex57 = complex31.multiply(complex51);
        code.src.Complex complex60 = code.src.Complex.polar((double) ' ', (double) (byte) 100);
        code.src.Complex complex61 = complex51.multiply(complex60);
        code.src.Complex complex62 = complex25.multiply(complex61);
        code.src.Complex complex63 = complex2.multiply(complex61);
        double double64 = complex63.abs();
        java.lang.Class<?> wildcardClass65 = complex63.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(10.0,0.0)" + "'", str16, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(100.0,10.0)" + "'", str26, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(10.0,0.0)" + "'", str43, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 290.95719905143267d + "'", double52 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 612077.1638882305d + "'", double64 == 612077.1638882305d);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0359");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 100, 43.756491210010616d);
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        double double40 = complex39.real;
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        code.src.Complex complex48 = complex39.sub(complex46);
        code.src.Complex complex49 = complex2.add(complex46);
        code.src.Complex complex52 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex55 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex56 = complex52.multiply(complex55);
        java.lang.String str57 = complex52.toString();
        code.src.Complex complex60 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex63 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex64 = complex60.multiply(complex63);
        code.src.Complex complex65 = complex52.add(complex64);
        code.src.Complex complex68 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex71 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex72 = complex68.multiply(complex71);
        java.lang.String str73 = complex68.toString();
        code.src.Complex complex76 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex79 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex80 = complex76.multiply(complex79);
        code.src.Complex complex81 = complex68.add(complex80);
        code.src.Complex complex82 = complex65.add(complex81);
        code.src.Complex complex85 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex88 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex89 = complex85.multiply(complex88);
        code.src.Complex complex90 = complex65.sub(complex85);
        code.src.Complex complex91 = complex49.multiply(complex65);
        java.lang.Class<?> wildcardClass92 = complex65.getClass();
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 582.9143981028653d + "'", double40 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(10.0,0.0)" + "'", str57, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(10.0,0.0)" + "'", str73, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0360");
        code.src.Complex complex2 = new code.src.Complex(1.0d, (double) ' ');
        complex2.imaginary = 907.1298242002123d;
        double double5 = complex2.real;
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0361");
        code.src.Complex complex2 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double3 = complex2.abs();
        double double4 = complex2.real;
        code.src.Complex complex7 = new code.src.Complex(10.0d, 875.1298242002123d);
        code.src.Complex complex8 = complex2.multiply(complex7);
        complex7.real = 0.0d;
        double double11 = complex7.abs();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 52.0d + "'", double3 == 52.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 28.09571990514327d + "'", double4 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 875.1298242002123d + "'", double11 == 875.1298242002123d);
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0362");
        code.src.Complex complex2 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex2.imaginary = (short) 0;
        complex2.real = 525.4704025737593d;
        double double7 = complex2.real;
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        double double15 = complex14.imaginary;
        java.lang.String str16 = complex14.toString();
        double double17 = complex14.real;
        code.src.Complex complex18 = complex2.add(complex14);
        complex14.real = (-43.756491210010616d);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 525.4704025737593d + "'", double7 == 525.4704025737593d);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 437.56491210010614d + "'", double15 == 437.56491210010614d);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(280.95719905143267,437.56491210010614)" + "'", str16, "(280.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 280.95719905143267d + "'", double17 == 280.95719905143267d);
        org.junit.Assert.assertNotNull(complex18);
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0363");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        complex2.real = (byte) 1;
        complex2.imaginary = (short) 100;
        code.src.Complex complex9 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex12 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex13 = complex9.multiply(complex12);
        java.lang.String str14 = complex9.toString();
        code.src.Complex complex17 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex20 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex21 = complex17.multiply(complex20);
        code.src.Complex complex22 = complex9.add(complex21);
        double double23 = complex22.real;
        code.src.Complex complex26 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex27 = complex22.multiply(complex26);
        code.src.Complex complex28 = complex2.multiply(complex22);
        code.src.Complex complex31 = new code.src.Complex((double) 100, (double) 10.0f);
        complex31.imaginary = 100L;
        code.src.Complex complex36 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex39 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex40 = complex36.multiply(complex39);
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        java.lang.String str48 = complex43.toString();
        code.src.Complex complex51 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex54 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex55 = complex51.multiply(complex54);
        code.src.Complex complex56 = complex43.add(complex55);
        code.src.Complex complex59 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex62 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex63 = complex59.multiply(complex62);
        java.lang.String str64 = complex59.toString();
        code.src.Complex complex67 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex70 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex71 = complex67.multiply(complex70);
        code.src.Complex complex72 = complex59.add(complex71);
        code.src.Complex complex73 = complex56.add(complex72);
        code.src.Complex complex76 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex79 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex80 = complex76.multiply(complex79);
        code.src.Complex complex81 = complex56.sub(complex76);
        code.src.Complex complex82 = complex39.add(complex81);
        code.src.Complex complex83 = complex31.multiply(complex81);
        code.src.Complex complex84 = complex2.sub(complex31);
        java.lang.Class<?> wildcardClass85 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(10.0,0.0)" + "'", str14, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 290.95719905143267d + "'", double23 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(10.0,0.0)" + "'", str48, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(10.0,0.0)" + "'", str64, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        code.src.Complex complex2 = new code.src.Complex(291.95719905143267d, 509250.64491133287d);
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0365");
        code.src.Complex complex2 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex2.imaginary = (short) 0;
        complex2.real = 525.4704025737593d;
        double double7 = complex2.real;
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        double double15 = complex14.imaginary;
        java.lang.String str16 = complex14.toString();
        double double17 = complex14.real;
        code.src.Complex complex18 = complex2.add(complex14);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex37 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex40 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex41 = complex37.multiply(complex40);
        java.lang.String str42 = complex37.toString();
        code.src.Complex complex45 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex45.multiply(complex48);
        code.src.Complex complex50 = complex37.add(complex49);
        code.src.Complex complex51 = complex34.add(complex50);
        code.src.Complex complex52 = new code.src.Complex();
        code.src.Complex complex53 = complex51.add(complex52);
        code.src.Complex complex56 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double57 = complex56.abs();
        double double58 = complex56.real;
        code.src.Complex complex61 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex64 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex65 = complex61.multiply(complex64);
        java.lang.String str66 = complex61.toString();
        code.src.Complex complex69 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex72 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex73 = complex69.multiply(complex72);
        code.src.Complex complex74 = complex61.add(complex73);
        code.src.Complex complex77 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex80 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex81 = complex77.multiply(complex80);
        java.lang.String str82 = complex77.toString();
        code.src.Complex complex85 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex88 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex89 = complex85.multiply(complex88);
        code.src.Complex complex90 = complex77.add(complex89);
        code.src.Complex complex91 = complex74.add(complex90);
        java.lang.String str92 = complex74.toString();
        double double93 = complex74.abs();
        double double94 = complex74.real;
        code.src.Complex complex95 = complex56.sub(complex74);
        code.src.Complex complex96 = complex52.add(complex74);
        complex52.imaginary = 52.0d;
        code.src.Complex complex99 = complex14.multiply(complex52);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 525.4704025737593d + "'", double7 == 525.4704025737593d);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 437.56491210010614d + "'", double15 == 437.56491210010614d);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(280.95719905143267,437.56491210010614)" + "'", str16, "(280.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 280.95719905143267d + "'", double17 == 280.95719905143267d);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(10.0,0.0)" + "'", str42, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 52.0d + "'", double57 == 52.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 28.09571990514327d + "'", double58 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(10.0,0.0)" + "'", str66, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "(10.0,0.0)" + "'", str82, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str92, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 525.4704025737593d + "'", double93 == 525.4704025737593d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 290.95719905143267d + "'", double94 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex95);
        org.junit.Assert.assertNotNull(complex96);
        org.junit.Assert.assertNotNull(complex99);
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0366");
        code.src.Complex complex2 = code.src.Complex.polar((double) (short) -1, (double) (byte) 0);
        code.src.Complex complex5 = code.src.Complex.polar(28.09571990514327d, (-213613.9212426372d));
        code.src.Complex complex6 = complex2.sub(complex5);
        java.lang.Class<?> wildcardClass7 = complex5.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 8101.177047836208d);
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0368");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, (double) '#');
        double double3 = complex2.imaginary;
        code.src.Complex complex6 = new code.src.Complex((double) 100, (double) 10.0f);
        complex6.imaginary = 100L;
        java.lang.String str9 = complex6.toString();
        code.src.Complex complex10 = complex2.multiply(complex6);
        code.src.Complex complex13 = code.src.Complex.polar(663.590879631022d, (double) ' ');
        code.src.Complex complex14 = complex10.sub(complex13);
        double double15 = complex13.real;
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 35.0d + "'", double3 == 35.0d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(100.0,100.0)" + "'", str9, "(100.0,100.0)");
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 553.5830136072623d + "'", double15 == 553.5830136072623d);
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0369");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 100, (double) (-1L));
        double double3 = complex2.abs();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 100.00499987500625d + "'", double3 == 100.00499987500625d);
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0370");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        code.src.Complex complex9 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex12 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex13 = complex9.multiply(complex12);
        java.lang.String str14 = complex9.toString();
        code.src.Complex complex17 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex20 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex21 = complex17.multiply(complex20);
        code.src.Complex complex22 = complex9.add(complex21);
        code.src.Complex complex25 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex28 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex29 = complex25.multiply(complex28);
        java.lang.String str30 = complex25.toString();
        code.src.Complex complex33 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex36 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex37 = complex33.multiply(complex36);
        code.src.Complex complex38 = complex25.add(complex37);
        code.src.Complex complex39 = complex22.add(complex38);
        code.src.Complex complex42 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex45 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex46 = complex42.multiply(complex45);
        code.src.Complex complex47 = complex22.sub(complex42);
        code.src.Complex complex48 = complex5.add(complex47);
        double double49 = complex48.abs();
        code.src.Complex complex50 = new code.src.Complex();
        complex50.real = 1L;
        code.src.Complex complex55 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex58 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex59 = complex55.multiply(complex58);
        java.lang.String str60 = complex55.toString();
        code.src.Complex complex63 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex66 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex67 = complex63.multiply(complex66);
        code.src.Complex complex68 = complex55.add(complex67);
        code.src.Complex complex71 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex74 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex75 = complex71.multiply(complex74);
        java.lang.String str76 = complex71.toString();
        code.src.Complex complex79 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex82 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex83 = complex79.multiply(complex82);
        code.src.Complex complex84 = complex71.add(complex83);
        code.src.Complex complex85 = complex68.add(complex84);
        code.src.Complex complex86 = complex50.add(complex85);
        code.src.Complex complex87 = complex48.sub(complex85);
        complex85.imaginary = 43.756491210010616d;
        code.src.Complex complex92 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex92.imaginary = (short) 0;
        complex92.real = 525.4704025737593d;
        double double97 = complex92.real;
        double double98 = complex92.abs();
        code.src.Complex complex99 = complex85.add(complex92);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(10.0,0.0)" + "'", str14, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(10.0,0.0)" + "'", str30, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 572.0d + "'", double49 == 572.0d);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(10.0,0.0)" + "'", str60, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "(10.0,0.0)" + "'", str76, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 525.4704025737593d + "'", double97 == 525.4704025737593d);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 525.4704025737593d + "'", double98 == 525.4704025737593d);
        org.junit.Assert.assertNotNull(complex99);
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0371");
        code.src.Complex complex2 = code.src.Complex.polar((double) '4', (-1.0d));
        double double3 = complex2.imaginary;
        code.src.Complex complex6 = new code.src.Complex(100.0d, (double) (short) 10);
        code.src.Complex complex9 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex12 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex13 = complex9.multiply(complex12);
        java.lang.String str14 = complex9.toString();
        code.src.Complex complex17 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex20 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex21 = complex17.multiply(complex20);
        code.src.Complex complex22 = complex9.add(complex21);
        code.src.Complex complex25 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex28 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex29 = complex25.multiply(complex28);
        java.lang.String str30 = complex25.toString();
        code.src.Complex complex33 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex36 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex37 = complex33.multiply(complex36);
        code.src.Complex complex38 = complex25.add(complex37);
        code.src.Complex complex39 = complex22.add(complex38);
        code.src.Complex complex40 = new code.src.Complex();
        code.src.Complex complex41 = complex39.add(complex40);
        code.src.Complex complex44 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double45 = complex44.abs();
        double double46 = complex44.real;
        code.src.Complex complex49 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex52 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex53 = complex49.multiply(complex52);
        java.lang.String str54 = complex49.toString();
        code.src.Complex complex57 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex60 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex61 = complex57.multiply(complex60);
        code.src.Complex complex62 = complex49.add(complex61);
        code.src.Complex complex65 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex68 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex69 = complex65.multiply(complex68);
        java.lang.String str70 = complex65.toString();
        code.src.Complex complex73 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex76 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex77 = complex73.multiply(complex76);
        code.src.Complex complex78 = complex65.add(complex77);
        code.src.Complex complex79 = complex62.add(complex78);
        java.lang.String str80 = complex62.toString();
        double double81 = complex62.abs();
        double double82 = complex62.real;
        code.src.Complex complex83 = complex44.sub(complex62);
        code.src.Complex complex84 = complex40.add(complex62);
        code.src.Complex complex85 = complex6.sub(complex84);
        code.src.Complex complex86 = complex2.add(complex85);
        double double87 = complex2.imaginary;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-43.756491210010616d) + "'", double3 == (-43.756491210010616d));
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(10.0,0.0)" + "'", str14, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(10.0,0.0)" + "'", str30, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 52.0d + "'", double45 == 52.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 28.09571990514327d + "'", double46 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(10.0,0.0)" + "'", str54, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(10.0,0.0)" + "'", str70, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str80, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 525.4704025737593d + "'", double81 == 525.4704025737593d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 290.95719905143267d + "'", double82 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + (-43.756491210010616d) + "'", double87 == (-43.756491210010616d));
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0372");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        double double37 = complex0.imaginary;
        double double38 = complex0.imaginary;
        code.src.Complex complex39 = new code.src.Complex();
        complex39.real = 1L;
        code.src.Complex complex44 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex47 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex48 = complex44.multiply(complex47);
        java.lang.String str49 = complex44.toString();
        code.src.Complex complex52 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex55 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex56 = complex52.multiply(complex55);
        code.src.Complex complex57 = complex44.add(complex56);
        code.src.Complex complex60 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex63 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex64 = complex60.multiply(complex63);
        java.lang.String str65 = complex60.toString();
        code.src.Complex complex68 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex71 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex72 = complex68.multiply(complex71);
        code.src.Complex complex73 = complex60.add(complex72);
        code.src.Complex complex74 = complex57.add(complex73);
        code.src.Complex complex75 = complex39.add(complex74);
        double double76 = complex75.real;
        code.src.Complex complex79 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex82 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex83 = complex79.multiply(complex82);
        code.src.Complex complex84 = complex75.sub(complex82);
        code.src.Complex complex85 = complex0.sub(complex75);
        complex0.imaginary = 100.0d;
        java.lang.Class<?> wildcardClass88 = complex0.getClass();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(10.0,0.0)" + "'", str49, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(10.0,0.0)" + "'", str65, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 582.9143981028653d + "'", double76 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0373");
        code.src.Complex complex2 = new code.src.Complex(170.71953646075502d, (double) (short) 0);
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0374");
        code.src.Complex complex2 = code.src.Complex.polar(10.0d, (double) '4');
        double double3 = complex2.imaginary;
        code.src.Complex complex6 = new code.src.Complex((double) (short) 0, (double) ' ');
        code.src.Complex complex7 = new code.src.Complex();
        complex7.real = 1L;
        code.src.Complex complex12 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex15 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex16 = complex12.multiply(complex15);
        java.lang.String str17 = complex12.toString();
        code.src.Complex complex20 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex23 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex24 = complex20.multiply(complex23);
        code.src.Complex complex25 = complex12.add(complex24);
        code.src.Complex complex28 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex31 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex32 = complex28.multiply(complex31);
        java.lang.String str33 = complex28.toString();
        code.src.Complex complex36 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex39 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex40 = complex36.multiply(complex39);
        code.src.Complex complex41 = complex28.add(complex40);
        code.src.Complex complex42 = complex25.add(complex41);
        code.src.Complex complex43 = complex7.add(complex42);
        code.src.Complex complex44 = complex6.add(complex42);
        code.src.Complex complex47 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex50 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex51 = complex47.multiply(complex50);
        double double52 = complex50.imaginary;
        java.lang.String str53 = complex50.toString();
        code.src.Complex complex56 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double57 = complex56.abs();
        double double58 = complex56.real;
        code.src.Complex complex59 = complex50.sub(complex56);
        code.src.Complex complex60 = complex42.sub(complex50);
        double double61 = complex42.real;
        code.src.Complex complex62 = complex2.multiply(complex42);
        complex42.imaginary = (-272.8614791462894d);
        double double65 = complex42.real;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 9.866275920404853d + "'", double3 == 9.866275920404853d);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(10.0,0.0)" + "'", str17, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(10.0,0.0)" + "'", str33, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 43.756491210010616d + "'", double52 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str53, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 52.0d + "'", double57 == 52.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 28.09571990514327d + "'", double58 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 581.9143981028653d + "'", double61 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 581.9143981028653d + "'", double65 == 581.9143981028653d);
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0375");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, (double) 1);
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        java.lang.String str19 = complex5.toString();
        complex5.imaginary = '#';
        code.src.Complex complex24 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        double double25 = complex24.abs();
        code.src.Complex complex28 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str29 = complex28.toString();
        code.src.Complex complex30 = complex24.multiply(complex28);
        double double31 = complex28.real;
        code.src.Complex complex34 = new code.src.Complex((double) 100, (double) 10.0f);
        complex34.real = (byte) 1;
        complex34.imaginary = (short) 100;
        code.src.Complex complex41 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex44 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex45 = complex41.multiply(complex44);
        java.lang.String str46 = complex41.toString();
        code.src.Complex complex49 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex52 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex53 = complex49.multiply(complex52);
        code.src.Complex complex54 = complex41.add(complex53);
        double double55 = complex54.real;
        code.src.Complex complex58 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex59 = complex54.multiply(complex58);
        code.src.Complex complex60 = complex34.multiply(complex54);
        code.src.Complex complex63 = code.src.Complex.polar((double) ' ', (double) (byte) 100);
        code.src.Complex complex64 = complex54.multiply(complex63);
        code.src.Complex complex65 = complex28.multiply(complex64);
        code.src.Complex complex66 = complex5.multiply(complex64);
        code.src.Complex complex67 = complex2.multiply(complex64);
        code.src.Complex complex70 = code.src.Complex.polar((double) (short) -1, (double) (byte) 0);
        code.src.Complex complex73 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex76 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex77 = complex73.multiply(complex76);
        java.lang.String str78 = complex73.toString();
        code.src.Complex complex81 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex84 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex85 = complex81.multiply(complex84);
        code.src.Complex complex86 = complex73.add(complex85);
        double double87 = complex86.real;
        code.src.Complex complex90 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex93 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex94 = complex90.multiply(complex93);
        double double95 = complex94.imaginary;
        code.src.Complex complex96 = complex86.sub(complex94);
        double double97 = complex86.imaginary;
        code.src.Complex complex98 = complex70.multiply(complex86);
        code.src.Complex complex99 = complex64.multiply(complex98);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(10.0,0.0)" + "'", str19, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(100.0,10.0)" + "'", str29, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 100.0d + "'", double31 == 100.0d);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(10.0,0.0)" + "'", str46, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 290.95719905143267d + "'", double55 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(10.0,0.0)" + "'", str78, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 290.95719905143267d + "'", double87 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertNotNull(complex94);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 437.56491210010614d + "'", double95 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex96);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 437.56491210010614d + "'", double97 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex98);
        org.junit.Assert.assertNotNull(complex99);
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 0, (double) ' ');
        code.src.Complex complex5 = new code.src.Complex((double) 10L, (double) '#');
        double double6 = complex5.imaginary;
        code.src.Complex complex7 = complex2.multiply(complex5);
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        double double15 = complex14.imaginary;
        code.src.Complex complex16 = complex7.multiply(complex14);
        java.lang.Class<?> wildcardClass17 = complex14.getClass();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 437.56491210010614d + "'", double15 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0377");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        double double33 = complex15.real;
        double double34 = complex15.real;
        code.src.Complex complex37 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex40 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex41 = complex37.multiply(complex40);
        java.lang.String str42 = complex37.toString();
        code.src.Complex complex45 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex45.multiply(complex48);
        code.src.Complex complex50 = complex37.add(complex49);
        code.src.Complex complex53 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex56 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex57 = complex53.multiply(complex56);
        java.lang.String str58 = complex53.toString();
        code.src.Complex complex61 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex64 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex65 = complex61.multiply(complex64);
        code.src.Complex complex66 = complex53.add(complex65);
        code.src.Complex complex67 = complex50.add(complex66);
        code.src.Complex complex68 = complex15.sub(complex50);
        java.lang.String str69 = complex68.toString();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 290.95719905143267d + "'", double33 == 290.95719905143267d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 290.95719905143267d + "'", double34 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(10.0,0.0)" + "'", str42, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(10.0,0.0)" + "'", str58, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(0.0,0.0)" + "'", str69, "(0.0,0.0)");
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0378");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        code.src.Complex complex9 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex12 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex13 = complex9.multiply(complex12);
        java.lang.String str14 = complex9.toString();
        code.src.Complex complex17 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex20 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex21 = complex17.multiply(complex20);
        code.src.Complex complex22 = complex9.add(complex21);
        code.src.Complex complex25 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex28 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex29 = complex25.multiply(complex28);
        java.lang.String str30 = complex25.toString();
        code.src.Complex complex33 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex36 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex37 = complex33.multiply(complex36);
        code.src.Complex complex38 = complex25.add(complex37);
        code.src.Complex complex39 = complex22.add(complex38);
        code.src.Complex complex42 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex45 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex46 = complex42.multiply(complex45);
        code.src.Complex complex47 = complex22.sub(complex42);
        code.src.Complex complex48 = complex5.add(complex47);
        double double49 = complex48.abs();
        double double50 = complex48.imaginary;
        complex48.real = (short) -1;
        java.lang.String str53 = complex48.toString();
        complex48.imaginary = 109.15415943981125d;
        code.src.Complex complex58 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex61 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex62 = complex58.multiply(complex61);
        double double63 = complex61.imaginary;
        java.lang.String str64 = complex61.toString();
        code.src.Complex complex67 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double68 = complex67.abs();
        double double69 = complex67.real;
        code.src.Complex complex70 = complex61.sub(complex67);
        double double71 = complex70.real;
        code.src.Complex complex72 = complex48.add(complex70);
        java.lang.Class<?> wildcardClass73 = complex72.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(10.0,0.0)" + "'", str14, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(10.0,0.0)" + "'", str30, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 572.0d + "'", double49 == 572.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 481.32140331011675d + "'", double50 == 481.32140331011675d);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(-1.0,481.32140331011675)" + "'", str53, "(-1.0,481.32140331011675)");
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 43.756491210010616d + "'", double63 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str64, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 52.0d + "'", double68 == 52.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 28.09571990514327d + "'", double69 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0379");
        code.src.Complex complex0 = new code.src.Complex();
        code.src.Complex complex3 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex6 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex7 = complex3.multiply(complex6);
        java.lang.String str8 = complex3.toString();
        code.src.Complex complex11 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex14 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex15 = complex11.multiply(complex14);
        code.src.Complex complex16 = complex3.add(complex15);
        code.src.Complex complex19 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex22 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex23 = complex19.multiply(complex22);
        java.lang.String str24 = complex19.toString();
        code.src.Complex complex27 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex30 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex31 = complex27.multiply(complex30);
        code.src.Complex complex32 = complex19.add(complex31);
        code.src.Complex complex33 = complex16.add(complex32);
        double double34 = complex33.real;
        code.src.Complex complex35 = complex0.multiply(complex33);
        code.src.Complex complex36 = new code.src.Complex();
        complex36.real = 1L;
        code.src.Complex complex41 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex44 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex45 = complex41.multiply(complex44);
        java.lang.String str46 = complex41.toString();
        code.src.Complex complex49 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex52 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex53 = complex49.multiply(complex52);
        code.src.Complex complex54 = complex41.add(complex53);
        code.src.Complex complex57 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex60 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex61 = complex57.multiply(complex60);
        java.lang.String str62 = complex57.toString();
        code.src.Complex complex65 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex68 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex69 = complex65.multiply(complex68);
        code.src.Complex complex70 = complex57.add(complex69);
        code.src.Complex complex71 = complex54.add(complex70);
        code.src.Complex complex72 = complex36.add(complex71);
        double double73 = complex72.real;
        code.src.Complex complex76 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex79 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex80 = complex76.multiply(complex79);
        code.src.Complex complex81 = complex72.sub(complex79);
        code.src.Complex complex84 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex85 = complex79.add(complex84);
        code.src.Complex complex88 = new code.src.Complex((double) 10L, (double) '#');
        code.src.Complex complex89 = complex84.add(complex88);
        code.src.Complex complex90 = complex33.multiply(complex89);
        double double91 = complex89.abs();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(10.0,0.0)" + "'", str8, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(10.0,0.0)" + "'", str24, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 581.9143981028653d + "'", double34 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(10.0,0.0)" + "'", str46, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(10.0,0.0)" + "'", str62, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 582.9143981028653d + "'", double73 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 87.48639198643185d + "'", double91 == 87.48639198643185d);
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0380");
        code.src.Complex complex2 = code.src.Complex.polar((double) (short) 0, (double) (byte) 10);
        code.src.Complex complex3 = new code.src.Complex();
        code.src.Complex complex6 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex9 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex10 = complex6.multiply(complex9);
        java.lang.String str11 = complex6.toString();
        code.src.Complex complex14 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex17 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex18 = complex14.multiply(complex17);
        code.src.Complex complex19 = complex6.add(complex18);
        code.src.Complex complex22 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex25 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex26 = complex22.multiply(complex25);
        java.lang.String str27 = complex22.toString();
        code.src.Complex complex30 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex33 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex34 = complex30.multiply(complex33);
        code.src.Complex complex35 = complex22.add(complex34);
        code.src.Complex complex36 = complex19.add(complex35);
        double double37 = complex36.real;
        code.src.Complex complex38 = complex3.multiply(complex36);
        double double39 = complex36.abs();
        code.src.Complex complex40 = complex2.sub(complex36);
        code.src.Complex complex43 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex43.imaginary = (short) 0;
        complex43.imaginary = 100.0f;
        code.src.Complex complex50 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str51 = complex50.toString();
        code.src.Complex complex54 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        code.src.Complex complex55 = complex50.sub(complex54);
        code.src.Complex complex56 = complex43.multiply(complex55);
        java.lang.String str57 = complex55.toString();
        double double58 = complex55.real;
        code.src.Complex complex59 = complex2.add(complex55);
        double double60 = complex55.imaginary;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(10.0,0.0)" + "'", str11, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(10.0,0.0)" + "'", str27, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 581.9143981028653d + "'", double37 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1050.9408051475186d + "'", double39 == 1050.9408051475186d);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "(100.0,10.0)" + "'", str51, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(589.1068753368511,327.11773840932915)" + "'", str57, "(589.1068753368511,327.11773840932915)");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 589.1068753368511d + "'", double58 == 589.1068753368511d);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 327.11773840932915d + "'", double60 == 327.11773840932915d);
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        code.src.Complex complex2 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex2.imaginary = (short) 0;
        complex2.imaginary = 100.0f;
        code.src.Complex complex9 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex12 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex13 = complex9.multiply(complex12);
        java.lang.String str14 = complex9.toString();
        code.src.Complex complex17 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex20 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex21 = complex17.multiply(complex20);
        code.src.Complex complex22 = complex9.add(complex21);
        code.src.Complex complex25 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex28 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex29 = complex25.multiply(complex28);
        java.lang.String str30 = complex25.toString();
        code.src.Complex complex33 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex36 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex37 = complex33.multiply(complex36);
        code.src.Complex complex38 = complex25.add(complex37);
        code.src.Complex complex39 = complex22.add(complex38);
        java.lang.String str40 = complex22.toString();
        code.src.Complex complex43 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex43.imaginary = (short) 0;
        java.lang.String str46 = complex43.toString();
        code.src.Complex complex47 = complex22.sub(complex43);
        code.src.Complex complex48 = complex2.add(complex47);
        double double49 = complex2.imaginary;
        code.src.Complex complex52 = new code.src.Complex((double) 100, (double) 10.0f);
        complex52.real = (byte) 1;
        complex52.imaginary = (short) 100;
        complex52.real = (-1);
        code.src.Complex complex59 = complex2.multiply(complex52);
        java.lang.Class<?> wildcardClass60 = complex59.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(10.0,0.0)" + "'", str14, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(10.0,0.0)" + "'", str30, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str40, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(-0.0,0.0)" + "'", str46, "(-0.0,0.0)");
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 100.0d + "'", double49 == 100.0d);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0382");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        double double33 = complex15.real;
        double double34 = complex15.real;
        code.src.Complex complex37 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex40 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex41 = complex37.multiply(complex40);
        java.lang.String str42 = complex37.toString();
        code.src.Complex complex45 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex45.multiply(complex48);
        code.src.Complex complex50 = complex37.add(complex49);
        code.src.Complex complex53 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex56 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex57 = complex53.multiply(complex56);
        java.lang.String str58 = complex53.toString();
        code.src.Complex complex61 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex64 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex65 = complex61.multiply(complex64);
        code.src.Complex complex66 = complex53.add(complex65);
        code.src.Complex complex67 = complex50.add(complex66);
        code.src.Complex complex68 = complex15.sub(complex50);
        double double69 = complex50.abs();
        complex50.imaginary = 1.0d;
        double double72 = complex50.imaginary;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 290.95719905143267d + "'", double33 == 290.95719905143267d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 290.95719905143267d + "'", double34 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(10.0,0.0)" + "'", str42, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(10.0,0.0)" + "'", str58, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 525.4704025737593d + "'", double69 == 525.4704025737593d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 1.0d + "'", double72 == 1.0d);
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0383");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 0, (double) ' ');
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        code.src.Complex complex40 = complex2.add(complex38);
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        java.lang.String str48 = complex43.toString();
        code.src.Complex complex51 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex54 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex55 = complex51.multiply(complex54);
        code.src.Complex complex56 = complex43.add(complex55);
        code.src.Complex complex59 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex62 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex63 = complex59.multiply(complex62);
        java.lang.String str64 = complex59.toString();
        code.src.Complex complex67 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex70 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex71 = complex67.multiply(complex70);
        code.src.Complex complex72 = complex59.add(complex71);
        code.src.Complex complex73 = complex56.add(complex72);
        code.src.Complex complex74 = new code.src.Complex();
        code.src.Complex complex75 = complex73.add(complex74);
        code.src.Complex complex76 = complex40.add(complex74);
        code.src.Complex complex79 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str80 = complex79.toString();
        java.lang.String str81 = complex79.toString();
        code.src.Complex complex82 = complex40.sub(complex79);
        java.lang.Class<?> wildcardClass83 = complex40.getClass();
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(10.0,0.0)" + "'", str48, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(10.0,0.0)" + "'", str64, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "(100.0,10.0)" + "'", str80, "(100.0,10.0)");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "(100.0,10.0)" + "'", str81, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0384");
        code.src.Complex complex0 = new code.src.Complex();
        code.src.Complex complex3 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex6 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex7 = complex3.multiply(complex6);
        java.lang.String str8 = complex3.toString();
        code.src.Complex complex11 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex14 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex15 = complex11.multiply(complex14);
        code.src.Complex complex16 = complex3.add(complex15);
        code.src.Complex complex19 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex22 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex23 = complex19.multiply(complex22);
        java.lang.String str24 = complex19.toString();
        code.src.Complex complex27 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex30 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex31 = complex27.multiply(complex30);
        code.src.Complex complex32 = complex19.add(complex31);
        code.src.Complex complex33 = complex16.add(complex32);
        double double34 = complex33.real;
        code.src.Complex complex35 = complex0.multiply(complex33);
        code.src.Complex complex36 = new code.src.Complex();
        complex36.real = 1L;
        code.src.Complex complex41 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex44 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex45 = complex41.multiply(complex44);
        java.lang.String str46 = complex41.toString();
        code.src.Complex complex49 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex52 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex53 = complex49.multiply(complex52);
        code.src.Complex complex54 = complex41.add(complex53);
        code.src.Complex complex57 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex60 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex61 = complex57.multiply(complex60);
        java.lang.String str62 = complex57.toString();
        code.src.Complex complex65 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex68 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex69 = complex65.multiply(complex68);
        code.src.Complex complex70 = complex57.add(complex69);
        code.src.Complex complex71 = complex54.add(complex70);
        code.src.Complex complex72 = complex36.add(complex71);
        double double73 = complex72.real;
        code.src.Complex complex76 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex79 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex80 = complex76.multiply(complex79);
        code.src.Complex complex81 = complex72.sub(complex79);
        code.src.Complex complex84 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex85 = complex79.add(complex84);
        code.src.Complex complex88 = new code.src.Complex((double) 10L, (double) '#');
        code.src.Complex complex89 = complex84.add(complex88);
        code.src.Complex complex90 = complex33.multiply(complex89);
        complex33.real = (-1.0f);
        double double93 = complex33.real;
        java.lang.String str94 = complex33.toString();
        double double95 = complex33.abs();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(10.0,0.0)" + "'", str8, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(10.0,0.0)" + "'", str24, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 581.9143981028653d + "'", double34 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(10.0,0.0)" + "'", str46, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(10.0,0.0)" + "'", str62, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 582.9143981028653d + "'", double73 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + (-1.0d) + "'", double93 == (-1.0d));
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "(-1.0,875.1298242002123)" + "'", str94, "(-1.0,875.1298242002123)");
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 875.1303955438267d + "'", double95 == 875.1303955438267d);
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0385");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        code.src.Complex complex33 = new code.src.Complex();
        code.src.Complex complex34 = complex32.add(complex33);
        complex32.real = 10;
        double double37 = complex32.imaginary;
        java.lang.String str38 = complex32.toString();
        code.src.Complex complex41 = new code.src.Complex(10.04987562112089d, (double) '#');
        double double42 = complex41.abs();
        code.src.Complex complex43 = complex32.sub(complex41);
        double double44 = complex32.abs();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 875.1298242002123d + "'", double37 == 875.1298242002123d);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(10.0,875.1298242002123)" + "'", str38, "(10.0,875.1298242002123)");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 36.41428291206625d + "'", double42 == 36.41428291206625d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 875.1869567153606d + "'", double44 == 875.1869567153606d);
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0386");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 0, (double) ' ');
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        code.src.Complex complex40 = complex2.add(complex38);
        code.src.Complex complex43 = new code.src.Complex(28.09571990514327d, 907.1298242002123d);
        code.src.Complex complex46 = code.src.Complex.polar((double) (byte) 10, (double) (short) 0);
        code.src.Complex complex47 = complex43.multiply(complex46);
        code.src.Complex complex48 = complex2.add(complex43);
        double double49 = complex43.abs();
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 907.5648116969368d + "'", double49 == 907.5648116969368d);
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0387");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        code.src.Complex complex9 = new code.src.Complex((double) 100, (double) 10.0f);
        complex9.real = (byte) 1;
        complex9.imaginary = (short) 100;
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        java.lang.String str21 = complex16.toString();
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        code.src.Complex complex29 = complex16.add(complex28);
        double double30 = complex29.real;
        code.src.Complex complex33 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex34 = complex29.multiply(complex33);
        code.src.Complex complex35 = complex9.multiply(complex29);
        code.src.Complex complex36 = complex2.sub(complex29);
        complex2.real = 432.1247009912124d;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(10.0,0.0)" + "'", str21, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 290.95719905143267d + "'", double30 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0388");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        double double16 = complex15.real;
        code.src.Complex complex19 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex22 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex23 = complex19.multiply(complex22);
        double double24 = complex23.imaginary;
        code.src.Complex complex25 = complex15.sub(complex23);
        code.src.Complex complex28 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex31 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex32 = complex28.multiply(complex31);
        java.lang.String str33 = complex28.toString();
        java.lang.String str34 = complex28.toString();
        code.src.Complex complex35 = complex25.multiply(complex28);
        double double36 = complex35.abs();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 290.95719905143267d + "'", double16 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 437.56491210010614d + "'", double24 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(10.0,0.0)" + "'", str33, "(10.0,0.0)");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(10.0,0.0)" + "'", str34, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0389");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        double double7 = complex6.imaginary;
        java.lang.String str8 = complex6.toString();
        double double9 = complex6.real;
        code.src.Complex complex12 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double13 = complex12.abs();
        java.lang.String str14 = complex12.toString();
        code.src.Complex complex15 = complex6.sub(complex12);
        code.src.Complex complex18 = new code.src.Complex(100.0d, 0.0d);
        code.src.Complex complex19 = complex15.add(complex18);
        double double20 = complex15.real;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 437.56491210010614d + "'", double7 == 437.56491210010614d);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(280.95719905143267,437.56491210010614)" + "'", str8, "(280.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 280.95719905143267d + "'", double9 == 280.95719905143267d);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str14, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 252.8614791462894d + "'", double20 == 252.8614791462894d);
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0390");
        code.src.Complex complex2 = new code.src.Complex(511.0653454891018d, (double) (short) -1);
        java.lang.Class<?> wildcardClass3 = complex2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0391");
        code.src.Complex complex2 = new code.src.Complex((-54.40211108893698d), 35.0d);
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0392");
        code.src.Complex complex2 = code.src.Complex.polar(492.8116754934422d, (double) (byte) 100);
        code.src.Complex complex5 = code.src.Complex.polar((double) 0.0f, 36.40054944640259d);
        double double6 = complex5.real;
        java.lang.String str7 = complex5.toString();
        code.src.Complex complex10 = code.src.Complex.polar(290.95719905143267d, (double) 1.0f);
        code.src.Complex complex13 = new code.src.Complex((double) (byte) 100, 437.56491210010614d);
        code.src.Complex complex14 = new code.src.Complex();
        complex14.real = 1L;
        code.src.Complex complex19 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex22 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex23 = complex19.multiply(complex22);
        java.lang.String str24 = complex19.toString();
        code.src.Complex complex27 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex30 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex31 = complex27.multiply(complex30);
        code.src.Complex complex32 = complex19.add(complex31);
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        java.lang.String str40 = complex35.toString();
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        code.src.Complex complex48 = complex35.add(complex47);
        code.src.Complex complex49 = complex32.add(complex48);
        code.src.Complex complex50 = complex14.add(complex49);
        double double51 = complex50.real;
        code.src.Complex complex54 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex57 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex58 = complex54.multiply(complex57);
        code.src.Complex complex59 = complex50.sub(complex57);
        code.src.Complex complex62 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex63 = complex57.add(complex62);
        code.src.Complex complex64 = complex13.add(complex62);
        code.src.Complex complex65 = complex10.multiply(complex62);
        complex62.real = 100;
        double double68 = complex62.imaginary;
        code.src.Complex complex69 = complex5.add(complex62);
        code.src.Complex complex70 = complex2.sub(complex69);
        double double71 = complex2.imaginary;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(0.0,-0.0)" + "'", str7, "(0.0,-0.0)");
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(10.0,0.0)" + "'", str24, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(10.0,0.0)" + "'", str40, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 582.9143981028653d + "'", double51 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 43.756491210010616d + "'", double68 == 43.756491210010616d);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + (-249.54290000761125d) + "'", double71 == (-249.54290000761125d));
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        complex2.imaginary = '4';
        code.src.Complex complex7 = new code.src.Complex((double) (short) 1, 290.95719905143267d);
        java.lang.String str8 = complex7.toString();
        double double9 = complex7.abs();
        code.src.Complex complex10 = complex2.multiply(complex7);
        java.lang.String str11 = complex10.toString();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(1.0,290.95719905143267)" + "'", str8, "(1.0,290.95719905143267)");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 290.9589175121722d + "'", double9 == 290.9589175121722d);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(-15029.7743506745,29147.719905143265)" + "'", str11, "(-15029.7743506745,29147.719905143265)");
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0394");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex2.add(complex18);
        code.src.Complex complex39 = code.src.Complex.polar((-317.11773840932915d), (double) (-1.0f));
        code.src.Complex complex40 = complex18.sub(complex39);
        code.src.Complex complex43 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex43.imaginary = (short) 0;
        complex43.real = 525.4704025737593d;
        double double48 = complex43.real;
        code.src.Complex complex51 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex54 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex55 = complex51.multiply(complex54);
        double double56 = complex55.imaginary;
        java.lang.String str57 = complex55.toString();
        double double58 = complex55.real;
        code.src.Complex complex59 = complex43.add(complex55);
        double double60 = complex43.imaginary;
        double double61 = complex43.imaginary;
        code.src.Complex complex62 = complex39.sub(complex43);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 525.4704025737593d + "'", double48 == 525.4704025737593d);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 437.56491210010614d + "'", double56 == 437.56491210010614d);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(280.95719905143267,437.56491210010614)" + "'", str57, "(280.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 280.95719905143267d + "'", double58 == 280.95719905143267d);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertNotNull(complex62);
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0395");
        code.src.Complex complex2 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex2.imaginary = (short) 0;
        complex2.real = 525.4704025737593d;
        java.lang.String str7 = complex2.toString();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(525.4704025737593,0.0)" + "'", str7, "(525.4704025737593,0.0)");
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0396");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex2.add(complex18);
        code.src.Complex complex39 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex39.imaginary = (short) 0;
        complex39.imaginary = 100.0f;
        code.src.Complex complex46 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str47 = complex46.toString();
        code.src.Complex complex50 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        code.src.Complex complex51 = complex46.sub(complex50);
        code.src.Complex complex52 = complex39.multiply(complex51);
        java.lang.String str53 = complex51.toString();
        code.src.Complex complex54 = complex2.sub(complex51);
        complex2.imaginary = (byte) -1;
        complex2.imaginary = 35.014282800023196d;
        double double59 = complex2.abs();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(100.0,10.0)" + "'", str47, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(589.1068753368511,327.11773840932915)" + "'", str53, "(589.1068753368511,327.11773840932915)");
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 36.41428291206625d + "'", double59 == 36.41428291206625d);
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0397");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        double double37 = complex36.real;
        code.src.Complex complex40 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex43 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex44 = complex40.multiply(complex43);
        code.src.Complex complex45 = complex36.sub(complex43);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex43.add(complex48);
        code.src.Complex complex52 = new code.src.Complex((double) 10L, (double) '#');
        code.src.Complex complex53 = complex48.add(complex52);
        complex48.real = 43.756491210010616d;
        complex48.imaginary = 100.0d;
        complex48.imaginary = (-317.11773840932915d);
        code.src.Complex complex62 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex65 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex66 = complex62.multiply(complex65);
        java.lang.String str67 = complex62.toString();
        code.src.Complex complex70 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex73 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex74 = complex70.multiply(complex73);
        code.src.Complex complex75 = complex62.add(complex74);
        code.src.Complex complex76 = complex48.multiply(complex74);
        double double77 = complex74.imaginary;
        complex74.real = 907.5648116969368d;
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 582.9143981028653d + "'", double37 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(10.0,0.0)" + "'", str67, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 437.56491210010614d + "'", double77 == 437.56491210010614d);
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        code.src.Complex complex2 = code.src.Complex.polar(101.9803902718557d, 109.15415943981125d);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0399");
        code.src.Complex complex2 = code.src.Complex.polar((-317.11773840932915d), (double) (-1.0f));
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        double double40 = complex39.real;
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        code.src.Complex complex48 = complex39.sub(complex46);
        double double49 = complex39.imaginary;
        code.src.Complex complex50 = complex2.sub(complex39);
        complex39.imaginary = (-317.11773840932915d);
        double double53 = complex39.abs();
        java.lang.Class<?> wildcardClass54 = complex39.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 582.9143981028653d + "'", double40 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 875.1298242002123d + "'", double49 == 875.1298242002123d);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 663.590879631022d + "'", double53 == 663.590879631022d);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0400");
        code.src.Complex complex2 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex2.imaginary = (short) 0;
        complex2.imaginary = 100.0f;
        code.src.Complex complex9 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str10 = complex9.toString();
        code.src.Complex complex13 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        code.src.Complex complex14 = complex9.sub(complex13);
        code.src.Complex complex15 = complex2.multiply(complex14);
        complex2.real = 97.0d;
        double double18 = complex2.imaginary;
        java.lang.String str19 = complex2.toString();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(100.0,10.0)" + "'", str10, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(97.0,100.0)" + "'", str19, "(97.0,100.0)");
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0401");
        code.src.Complex complex2 = code.src.Complex.polar((-317.11773840932915d), 0.0d);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0402");
        code.src.Complex complex2 = code.src.Complex.polar((double) (byte) 1, (double) 0.0f);
        code.src.Complex complex5 = new code.src.Complex(100.0d, (-1.0d));
        code.src.Complex complex6 = complex2.add(complex5);
        java.lang.Class<?> wildcardClass7 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0403");
        code.src.Complex complex2 = new code.src.Complex(0.0d, 663.590879631022d);
        code.src.Complex complex5 = code.src.Complex.polar(28.09571990514327d, (double) 0);
        code.src.Complex complex6 = new code.src.Complex();
        complex6.real = 1L;
        code.src.Complex complex11 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex14 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex15 = complex11.multiply(complex14);
        java.lang.String str16 = complex11.toString();
        code.src.Complex complex19 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex22 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex23 = complex19.multiply(complex22);
        code.src.Complex complex24 = complex11.add(complex23);
        code.src.Complex complex27 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex30 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex31 = complex27.multiply(complex30);
        java.lang.String str32 = complex27.toString();
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        code.src.Complex complex40 = complex27.add(complex39);
        code.src.Complex complex41 = complex24.add(complex40);
        code.src.Complex complex42 = complex6.add(complex41);
        double double43 = complex42.real;
        code.src.Complex complex44 = complex5.add(complex42);
        code.src.Complex complex47 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double48 = complex47.abs();
        double double49 = complex47.real;
        code.src.Complex complex52 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex55 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex56 = complex52.multiply(complex55);
        java.lang.String str57 = complex52.toString();
        code.src.Complex complex60 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex63 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex64 = complex60.multiply(complex63);
        code.src.Complex complex65 = complex52.add(complex64);
        code.src.Complex complex68 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex71 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex72 = complex68.multiply(complex71);
        java.lang.String str73 = complex68.toString();
        code.src.Complex complex76 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex79 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex80 = complex76.multiply(complex79);
        code.src.Complex complex81 = complex68.add(complex80);
        code.src.Complex complex82 = complex65.add(complex81);
        java.lang.String str83 = complex65.toString();
        double double84 = complex65.abs();
        double double85 = complex65.real;
        code.src.Complex complex86 = complex47.sub(complex65);
        java.lang.String str87 = complex47.toString();
        code.src.Complex complex88 = complex44.multiply(complex47);
        code.src.Complex complex89 = complex2.multiply(complex44);
        code.src.Complex complex92 = new code.src.Complex(663.590879631022d, 43.756491210010616d);
        complex92.imaginary = '#';
        double double95 = complex92.real;
        code.src.Complex complex96 = complex89.sub(complex92);
        double double97 = complex89.abs();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(10.0,0.0)" + "'", str16, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(10.0,0.0)" + "'", str32, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 582.9143981028653d + "'", double43 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 52.0d + "'", double48 == 52.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 28.09571990514327d + "'", double49 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(10.0,0.0)" + "'", str57, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(10.0,0.0)" + "'", str73, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str83, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 525.4704025737593d + "'", double84 == 525.4704025737593d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 290.95719905143267d + "'", double85 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str87, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 663.590879631022d + "'", double95 == 663.590879631022d);
        org.junit.Assert.assertNotNull(complex96);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 708268.0426747819d + "'", double97 == 708268.0426747819d);
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0404");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        code.src.Complex complex33 = new code.src.Complex();
        code.src.Complex complex34 = complex32.add(complex33);
        code.src.Complex complex37 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex40 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex41 = complex37.multiply(complex40);
        double double42 = complex40.imaginary;
        java.lang.String str43 = complex40.toString();
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double47 = complex46.abs();
        double double48 = complex46.real;
        code.src.Complex complex49 = complex40.sub(complex46);
        code.src.Complex complex50 = complex33.sub(complex40);
        java.lang.String str51 = complex50.toString();
        java.lang.String str52 = complex50.toString();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 43.756491210010616d + "'", double42 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str43, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 52.0d + "'", double47 == 52.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 28.09571990514327d + "'", double48 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "(-28.09571990514327,-43.756491210010616)" + "'", str51, "(-28.09571990514327,-43.756491210010616)");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(-28.09571990514327,-43.756491210010616)" + "'", str52, "(-28.09571990514327,-43.756491210010616)");
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0405");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        double double16 = complex2.abs();
        code.src.Complex complex19 = new code.src.Complex((double) 10, (double) 10);
        complex19.imaginary = 100;
        code.src.Complex complex22 = complex2.add(complex19);
        complex19.imaginary = 101.9803902718557d;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertNotNull(complex22);
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0406");
        code.src.Complex complex2 = new code.src.Complex((double) (byte) 10, 831.3733329902017d);
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0407");
        code.src.Complex complex2 = code.src.Complex.polar((-280.95719905143267d), 36.40054944640259d);
        java.lang.String str3 = complex2.toString();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "(-75.54482981588266,270.61028507230776)" + "'", str3, "(-75.54482981588266,270.61028507230776)");
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0408");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, (double) '#');
        double double3 = complex2.imaginary;
        code.src.Complex complex6 = new code.src.Complex((double) 100, (double) 10.0f);
        complex6.imaginary = 100L;
        java.lang.String str9 = complex6.toString();
        code.src.Complex complex10 = complex2.multiply(complex6);
        code.src.Complex complex13 = code.src.Complex.polar(663.590879631022d, (double) ' ');
        code.src.Complex complex14 = complex10.sub(complex13);
        complex10.real = (-1.0f);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 35.0d + "'", double3 == 35.0d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(100.0,100.0)" + "'", str9, "(100.0,100.0)");
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0409");
        code.src.Complex complex2 = code.src.Complex.polar(100.0d, 28.09571990514327d);
        complex2.real = (short) 100;
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 235.63140523513093d);
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        code.src.Complex complex2 = new code.src.Complex(43.756491210010616d, 0.0d);
        complex2.imaginary = 58.01650108462993d;
        complex2.real = 32.0d;
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0412");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        double double37 = complex36.real;
        code.src.Complex complex40 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex43 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex44 = complex40.multiply(complex43);
        code.src.Complex complex45 = complex36.sub(complex43);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex43.add(complex48);
        code.src.Complex complex52 = new code.src.Complex((double) 10L, (double) '#');
        code.src.Complex complex53 = complex48.add(complex52);
        complex48.real = 43.756491210010616d;
        complex48.imaginary = 100.0d;
        complex48.imaginary = (-317.11773840932915d);
        code.src.Complex complex62 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex65 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex66 = complex62.multiply(complex65);
        java.lang.String str67 = complex62.toString();
        code.src.Complex complex70 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex73 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex74 = complex70.multiply(complex73);
        code.src.Complex complex75 = complex62.add(complex74);
        code.src.Complex complex76 = complex48.multiply(complex74);
        double double77 = complex48.real;
        complex48.imaginary = 907.5648116969368d;
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 582.9143981028653d + "'", double37 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(10.0,0.0)" + "'", str67, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 43.756491210010616d + "'", double77 == 43.756491210010616d);
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0413");
        code.src.Complex complex2 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double3 = complex2.abs();
        double double4 = complex2.real;
        code.src.Complex complex7 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex10 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex11 = complex7.multiply(complex10);
        java.lang.String str12 = complex7.toString();
        code.src.Complex complex15 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex18 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex19 = complex15.multiply(complex18);
        code.src.Complex complex20 = complex7.add(complex19);
        code.src.Complex complex23 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex26 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex27 = complex23.multiply(complex26);
        java.lang.String str28 = complex23.toString();
        code.src.Complex complex31 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex34 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex35 = complex31.multiply(complex34);
        code.src.Complex complex36 = complex23.add(complex35);
        code.src.Complex complex37 = complex20.add(complex36);
        java.lang.String str38 = complex20.toString();
        double double39 = complex20.abs();
        double double40 = complex20.real;
        code.src.Complex complex41 = complex2.sub(complex20);
        code.src.Complex complex44 = code.src.Complex.polar(875.1298242002123d, (double) (-1L));
        code.src.Complex complex45 = complex41.sub(complex44);
        java.lang.Class<?> wildcardClass46 = complex41.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 52.0d + "'", double3 == 52.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 28.09571990514327d + "'", double4 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(10.0,0.0)" + "'", str12, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(10.0,0.0)" + "'", str28, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str38, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 525.4704025737593d + "'", double39 == 525.4704025737593d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 290.95719905143267d + "'", double40 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0414");
        code.src.Complex complex2 = code.src.Complex.polar(71852.21111515388d, 100.00499987500625d);
        code.src.Complex complex3 = null;
        // The following exception was thrown during execution in test generation
        try {
            code.src.Complex complex4 = complex2.sub(complex3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0415");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        code.src.Complex complex40 = complex15.sub(complex35);
        double double41 = complex40.imaginary;
        code.src.Complex complex44 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex47 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex50 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex51 = complex47.multiply(complex50);
        java.lang.String str52 = complex47.toString();
        code.src.Complex complex55 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex58 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex59 = complex55.multiply(complex58);
        code.src.Complex complex60 = complex47.add(complex59);
        code.src.Complex complex63 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex66 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex67 = complex63.multiply(complex66);
        java.lang.String str68 = complex63.toString();
        code.src.Complex complex71 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex74 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex75 = complex71.multiply(complex74);
        code.src.Complex complex76 = complex63.add(complex75);
        code.src.Complex complex77 = complex60.add(complex76);
        code.src.Complex complex78 = complex44.add(complex60);
        code.src.Complex complex81 = code.src.Complex.polar((-317.11773840932915d), (double) (-1.0f));
        code.src.Complex complex82 = complex60.sub(complex81);
        code.src.Complex complex83 = complex40.add(complex81);
        complex81.real = 35.0d;
        complex81.real = (-317.11773840932915d);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 437.56491210010614d + "'", double41 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(10.0,0.0)" + "'", str52, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(10.0,0.0)" + "'", str68, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        code.src.Complex complex2 = code.src.Complex.polar(1077.733215908709d, (-118.66263362210499d));
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0417");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        double double37 = complex36.real;
        code.src.Complex complex40 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex43 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex44 = complex40.multiply(complex43);
        code.src.Complex complex45 = complex36.sub(complex43);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex43.add(complex48);
        code.src.Complex complex52 = new code.src.Complex((double) 10L, (double) '#');
        code.src.Complex complex53 = complex48.add(complex52);
        code.src.Complex complex56 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex56.imaginary = (short) 0;
        complex56.imaginary = 100.0f;
        code.src.Complex complex61 = complex48.multiply(complex56);
        code.src.Complex complex64 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex67 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex68 = complex64.multiply(complex67);
        java.lang.String str69 = complex64.toString();
        code.src.Complex complex72 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex75 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex76 = complex72.multiply(complex75);
        code.src.Complex complex77 = complex64.add(complex76);
        double double78 = complex77.real;
        code.src.Complex complex81 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex84 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex85 = complex81.multiply(complex84);
        double double86 = complex85.imaginary;
        code.src.Complex complex87 = complex77.sub(complex85);
        code.src.Complex complex90 = code.src.Complex.polar(0.0d, (double) (short) -1);
        code.src.Complex complex91 = complex77.multiply(complex90);
        code.src.Complex complex92 = complex48.multiply(complex90);
        double double93 = complex48.real;
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 582.9143981028653d + "'", double37 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(10.0,0.0)" + "'", str69, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 290.95719905143267d + "'", double78 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 437.56491210010614d + "'", double86 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 28.09571990514327d + "'", double93 == 28.09571990514327d);
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0418");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        code.src.Complex complex9 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex12 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex13 = complex9.multiply(complex12);
        java.lang.String str14 = complex9.toString();
        code.src.Complex complex17 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex20 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex21 = complex17.multiply(complex20);
        code.src.Complex complex22 = complex9.add(complex21);
        code.src.Complex complex25 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex28 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex29 = complex25.multiply(complex28);
        java.lang.String str30 = complex25.toString();
        code.src.Complex complex33 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex36 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex37 = complex33.multiply(complex36);
        code.src.Complex complex38 = complex25.add(complex37);
        code.src.Complex complex39 = complex22.add(complex38);
        code.src.Complex complex42 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex45 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex46 = complex42.multiply(complex45);
        code.src.Complex complex47 = complex22.sub(complex42);
        code.src.Complex complex48 = complex5.add(complex47);
        double double49 = complex48.abs();
        complex48.real = 10.0d;
        double double52 = complex48.imaginary;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(10.0,0.0)" + "'", str14, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(10.0,0.0)" + "'", str30, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 572.0d + "'", double49 == 572.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 481.32140331011675d + "'", double52 == 481.32140331011675d);
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0419");
        code.src.Complex complex2 = code.src.Complex.polar(492.8116754934422d, 467.07736184459986d);
        java.lang.Class<?> wildcardClass3 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        code.src.Complex complex2 = code.src.Complex.polar((double) (byte) 1, (double) 0.0f);
        java.lang.String str3 = complex2.toString();
        code.src.Complex complex6 = code.src.Complex.polar((double) (short) 10, (double) 1.0f);
        double double7 = complex6.abs();
        code.src.Complex complex8 = complex2.sub(complex6);
        complex8.real = (byte) 10;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "(1.0,0.0)" + "'", str3, "(1.0,0.0)");
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertNotNull(complex8);
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0421");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        double double37 = complex36.real;
        code.src.Complex complex40 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex43 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex44 = complex40.multiply(complex43);
        code.src.Complex complex45 = complex36.sub(complex43);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex43.add(complex48);
        code.src.Complex complex52 = new code.src.Complex((double) 10L, (double) '#');
        code.src.Complex complex53 = complex48.add(complex52);
        complex48.real = 43.756491210010616d;
        complex48.imaginary = 100.0d;
        complex48.imaginary = (-317.11773840932915d);
        code.src.Complex complex62 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex65 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex66 = complex62.multiply(complex65);
        java.lang.String str67 = complex62.toString();
        code.src.Complex complex70 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex73 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex74 = complex70.multiply(complex73);
        code.src.Complex complex75 = complex62.add(complex74);
        code.src.Complex complex76 = complex48.multiply(complex74);
        complex74.imaginary = (-1.0d);
        java.lang.Class<?> wildcardClass79 = complex74.getClass();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 582.9143981028653d + "'", double37 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(10.0,0.0)" + "'", str67, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0422");
        code.src.Complex complex2 = code.src.Complex.polar((double) (short) 0, (double) (byte) 10);
        code.src.Complex complex3 = new code.src.Complex();
        code.src.Complex complex6 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex9 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex10 = complex6.multiply(complex9);
        java.lang.String str11 = complex6.toString();
        code.src.Complex complex14 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex17 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex18 = complex14.multiply(complex17);
        code.src.Complex complex19 = complex6.add(complex18);
        code.src.Complex complex22 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex25 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex26 = complex22.multiply(complex25);
        java.lang.String str27 = complex22.toString();
        code.src.Complex complex30 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex33 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex34 = complex30.multiply(complex33);
        code.src.Complex complex35 = complex22.add(complex34);
        code.src.Complex complex36 = complex19.add(complex35);
        double double37 = complex36.real;
        code.src.Complex complex38 = complex3.multiply(complex36);
        double double39 = complex36.abs();
        code.src.Complex complex40 = complex2.sub(complex36);
        code.src.Complex complex43 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex43.imaginary = (short) 0;
        complex43.imaginary = 100.0f;
        code.src.Complex complex50 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str51 = complex50.toString();
        code.src.Complex complex54 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        code.src.Complex complex55 = complex50.sub(complex54);
        code.src.Complex complex56 = complex43.multiply(complex55);
        java.lang.String str57 = complex55.toString();
        double double58 = complex55.real;
        code.src.Complex complex59 = complex2.add(complex55);
        complex59.real = 324.9608082617091d;
        java.lang.String str62 = complex59.toString();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(10.0,0.0)" + "'", str11, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(10.0,0.0)" + "'", str27, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 581.9143981028653d + "'", double37 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1050.9408051475186d + "'", double39 == 1050.9408051475186d);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "(100.0,10.0)" + "'", str51, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(589.1068753368511,327.11773840932915)" + "'", str57, "(589.1068753368511,327.11773840932915)");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 589.1068753368511d + "'", double58 == 589.1068753368511d);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(324.9608082617091,327.11773840932915)" + "'", str62, "(324.9608082617091,327.11773840932915)");
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0423");
        code.src.Complex complex2 = new code.src.Complex(100.00499987500625d, (double) '4');
        java.lang.Class<?> wildcardClass3 = complex2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0424");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        double double33 = complex32.real;
        code.src.Complex complex36 = code.src.Complex.polar((double) (byte) 100, 582.9143981028653d);
        code.src.Complex complex37 = complex32.sub(complex36);
        code.src.Complex complex40 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex43 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex44 = complex40.multiply(complex43);
        java.lang.String str45 = complex40.toString();
        code.src.Complex complex48 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex51 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex52 = complex48.multiply(complex51);
        code.src.Complex complex53 = complex40.add(complex52);
        double double54 = complex53.real;
        code.src.Complex complex57 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex58 = complex53.multiply(complex57);
        code.src.Complex complex59 = complex36.add(complex57);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 581.9143981028653d + "'", double33 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "(10.0,0.0)" + "'", str45, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 290.95719905143267d + "'", double54 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0425");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        java.lang.String str8 = complex2.toString();
        code.src.Complex complex11 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex14 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex15 = complex11.multiply(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        java.lang.String str32 = complex18.toString();
        code.src.Complex complex33 = complex15.add(complex18);
        code.src.Complex complex34 = complex2.sub(complex18);
        double double35 = complex18.imaginary;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(10.0,0.0)" + "'", str8, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(10.0,0.0)" + "'", str32, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0426");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex10.real = 10;
        code.src.Complex complex13 = complex2.multiply(complex10);
        double double14 = complex10.abs();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0427");
        code.src.Complex complex2 = code.src.Complex.polar((double) (byte) 100, 582.9143981028653d);
        complex2.real = 875.1298242002123d;
        complex2.imaginary = (-317.11773840932915d);
        code.src.Complex complex9 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex9.real = 10;
        code.src.Complex complex12 = complex2.sub(complex9);
        double double13 = complex9.abs();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0428");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex38 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex41 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex42 = complex38.multiply(complex41);
        code.src.Complex complex43 = complex18.sub(complex38);
        code.src.Complex complex44 = new code.src.Complex();
        code.src.Complex complex47 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex50 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex51 = complex47.multiply(complex50);
        java.lang.String str52 = complex47.toString();
        code.src.Complex complex55 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex58 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex59 = complex55.multiply(complex58);
        code.src.Complex complex60 = complex47.add(complex59);
        code.src.Complex complex63 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex66 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex67 = complex63.multiply(complex66);
        java.lang.String str68 = complex63.toString();
        code.src.Complex complex71 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex74 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex75 = complex71.multiply(complex74);
        code.src.Complex complex76 = complex63.add(complex75);
        code.src.Complex complex77 = complex60.add(complex76);
        double double78 = complex77.real;
        code.src.Complex complex79 = complex44.multiply(complex77);
        code.src.Complex complex80 = complex18.multiply(complex77);
        code.src.Complex complex81 = complex2.sub(complex80);
        double double82 = complex2.imaginary;
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(10.0,0.0)" + "'", str52, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(10.0,0.0)" + "'", str68, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 581.9143981028653d + "'", double78 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 10.0d + "'", double82 == 10.0d);
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0429");
        code.src.Complex complex2 = code.src.Complex.polar(36.40054944640259d, (double) (short) 10);
        complex2.real = 875.8294407044641d;
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0430");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 100, 43.756491210010616d);
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        double double40 = complex39.real;
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        code.src.Complex complex48 = complex39.sub(complex46);
        code.src.Complex complex49 = complex2.add(complex46);
        code.src.Complex complex52 = new code.src.Complex((double) (short) 1, 290.95719905143267d);
        java.lang.String str53 = complex52.toString();
        code.src.Complex complex56 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double57 = complex56.abs();
        double double58 = complex56.real;
        code.src.Complex complex61 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex64 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex65 = complex61.multiply(complex64);
        java.lang.String str66 = complex61.toString();
        code.src.Complex complex69 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex72 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex73 = complex69.multiply(complex72);
        code.src.Complex complex74 = complex61.add(complex73);
        code.src.Complex complex77 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex80 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex81 = complex77.multiply(complex80);
        java.lang.String str82 = complex77.toString();
        code.src.Complex complex85 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex88 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex89 = complex85.multiply(complex88);
        code.src.Complex complex90 = complex77.add(complex89);
        code.src.Complex complex91 = complex74.add(complex90);
        java.lang.String str92 = complex74.toString();
        double double93 = complex74.abs();
        double double94 = complex74.real;
        code.src.Complex complex95 = complex56.sub(complex74);
        code.src.Complex complex96 = complex52.add(complex56);
        code.src.Complex complex97 = complex2.add(complex56);
        double double98 = complex2.imaginary;
        double double99 = complex2.real;
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 582.9143981028653d + "'", double40 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(1.0,290.95719905143267)" + "'", str53, "(1.0,290.95719905143267)");
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 52.0d + "'", double57 == 52.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 28.09571990514327d + "'", double58 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(10.0,0.0)" + "'", str66, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "(10.0,0.0)" + "'", str82, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str92, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 525.4704025737593d + "'", double93 == 525.4704025737593d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 290.95719905143267d + "'", double94 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex95);
        org.junit.Assert.assertNotNull(complex96);
        org.junit.Assert.assertNotNull(complex97);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 43.756491210010616d + "'", double98 == 43.756491210010616d);
        org.junit.Assert.assertTrue("'" + double99 + "' != '" + 100.0d + "'", double99 == 100.0d);
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0431");
        code.src.Complex complex2 = code.src.Complex.polar(1018.3729221500101d, 0.0d);
        double double3 = complex2.abs();
        code.src.Complex complex6 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        code.src.Complex complex9 = new code.src.Complex(290.95719905143267d, (-213613.9212426372d));
        code.src.Complex complex10 = complex6.add(complex9);
        complex10.real = 1018.3729221500101d;
        code.src.Complex complex13 = complex2.multiply(complex10);
        double double14 = complex2.real;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1018.3729221500101d + "'", double3 == 1018.3729221500101d);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1018.3729221500101d + "'", double14 == 1018.3729221500101d);
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0432");
        code.src.Complex complex2 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double3 = complex2.abs();
        double double4 = complex2.real;
        code.src.Complex complex7 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex10 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex11 = complex7.multiply(complex10);
        java.lang.String str12 = complex7.toString();
        code.src.Complex complex15 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex18 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex19 = complex15.multiply(complex18);
        code.src.Complex complex20 = complex7.add(complex19);
        code.src.Complex complex23 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex26 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex27 = complex23.multiply(complex26);
        java.lang.String str28 = complex23.toString();
        code.src.Complex complex31 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex34 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex35 = complex31.multiply(complex34);
        code.src.Complex complex36 = complex23.add(complex35);
        code.src.Complex complex37 = complex20.add(complex36);
        java.lang.String str38 = complex20.toString();
        double double39 = complex20.abs();
        double double40 = complex20.real;
        code.src.Complex complex41 = complex2.sub(complex20);
        code.src.Complex complex44 = code.src.Complex.polar(875.1298242002123d, (double) (-1L));
        code.src.Complex complex45 = complex41.sub(complex44);
        code.src.Complex complex48 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex51 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex52 = complex48.multiply(complex51);
        java.lang.String str53 = complex48.toString();
        code.src.Complex complex56 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex59 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex60 = complex56.multiply(complex59);
        code.src.Complex complex61 = complex48.add(complex60);
        code.src.Complex complex64 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex67 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex68 = complex64.multiply(complex67);
        java.lang.String str69 = complex64.toString();
        code.src.Complex complex72 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex75 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex76 = complex72.multiply(complex75);
        code.src.Complex complex77 = complex64.add(complex76);
        code.src.Complex complex78 = complex61.add(complex77);
        code.src.Complex complex81 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex84 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex85 = complex81.multiply(complex84);
        code.src.Complex complex86 = complex61.sub(complex81);
        java.lang.String str87 = complex61.toString();
        code.src.Complex complex90 = new code.src.Complex((double) 100.0f, (double) (short) -1);
        code.src.Complex complex91 = complex61.add(complex90);
        code.src.Complex complex92 = complex45.multiply(complex61);
        double double93 = complex92.real;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 52.0d + "'", double3 == 52.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 28.09571990514327d + "'", double4 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(10.0,0.0)" + "'", str12, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(10.0,0.0)" + "'", str28, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str38, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 525.4704025737593d + "'", double39 == 525.4704025737593d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 290.95719905143267d + "'", double40 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(10.0,0.0)" + "'", str53, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(10.0,0.0)" + "'", str69, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str87, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + (-363960.5478434686d) + "'", double93 == (-363960.5478434686d));
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0433");
        code.src.Complex complex2 = new code.src.Complex(1051.4948429356753d, 36.40054944640259d);
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0434");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 10, (-317.11773840932915d));
        code.src.Complex complex5 = code.src.Complex.polar(28.09571990514327d, (double) 0);
        code.src.Complex complex6 = new code.src.Complex();
        complex6.real = 1L;
        code.src.Complex complex11 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex14 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex15 = complex11.multiply(complex14);
        java.lang.String str16 = complex11.toString();
        code.src.Complex complex19 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex22 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex23 = complex19.multiply(complex22);
        code.src.Complex complex24 = complex11.add(complex23);
        code.src.Complex complex27 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex30 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex31 = complex27.multiply(complex30);
        java.lang.String str32 = complex27.toString();
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        code.src.Complex complex40 = complex27.add(complex39);
        code.src.Complex complex41 = complex24.add(complex40);
        code.src.Complex complex42 = complex6.add(complex41);
        double double43 = complex42.real;
        code.src.Complex complex44 = complex5.add(complex42);
        code.src.Complex complex45 = complex2.multiply(complex44);
        double double46 = complex44.abs();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(10.0,0.0)" + "'", str16, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(10.0,0.0)" + "'", str32, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 582.9143981028653d + "'", double43 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1067.326366915413d + "'", double46 == 1067.326366915413d);
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0435");
        code.src.Complex complex2 = new code.src.Complex(907.1298242002123d, 0.0d);
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0436");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        double double16 = complex15.real;
        code.src.Complex complex19 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex22 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex23 = complex19.multiply(complex22);
        double double24 = complex23.imaginary;
        code.src.Complex complex25 = complex15.sub(complex23);
        double double26 = complex15.imaginary;
        code.src.Complex complex27 = null;
        // The following exception was thrown during execution in test generation
        try {
            code.src.Complex complex28 = complex15.add(complex27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 290.95719905143267d + "'", double16 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 437.56491210010614d + "'", double24 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 437.56491210010614d + "'", double26 == 437.56491210010614d);
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0437");
        code.src.Complex complex2 = new code.src.Complex(43.756491210010616d, 437.56491210010614d);
        double double3 = complex2.imaginary;
        double double4 = complex2.imaginary;
        code.src.Complex complex5 = null;
        // The following exception was thrown during execution in test generation
        try {
            code.src.Complex complex6 = complex2.multiply(complex5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 437.56491210010614d + "'", double3 == 437.56491210010614d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 437.56491210010614d + "'", double4 == 437.56491210010614d);
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0438");
        code.src.Complex complex2 = new code.src.Complex(100.0d, (-1.0d));
        double double3 = complex2.abs();
        complex2.real = (-438.56491210010614d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 100.00499987500625d + "'", double3 == 100.00499987500625d);
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0439");
        code.src.Complex complex0 = new code.src.Complex();
        double double1 = complex0.abs();
        double double2 = complex0.imaginary;
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0440");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 0, (double) ' ');
        code.src.Complex complex5 = new code.src.Complex((double) 10L, (double) '#');
        double double6 = complex5.imaginary;
        code.src.Complex complex7 = complex2.multiply(complex5);
        complex2.imaginary = 10.0d;
        double double10 = complex2.real;
        java.lang.Class<?> wildcardClass11 = complex2.getClass();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0441");
        code.src.Complex complex2 = new code.src.Complex(1.0d, 35.014282800023196d);
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0442");
        code.src.Complex complex2 = new code.src.Complex(875.1303955438267d, (-0.5063656411097588d));
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0443");
        code.src.Complex complex2 = new code.src.Complex(214489.24976920983d, (-288.4361024143587d));
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0444");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        double double37 = complex35.abs();
        code.src.Complex complex40 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex43 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex44 = complex40.multiply(complex43);
        code.src.Complex complex47 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex50 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex51 = complex47.multiply(complex50);
        java.lang.String str52 = complex47.toString();
        code.src.Complex complex55 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex58 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex59 = complex55.multiply(complex58);
        code.src.Complex complex60 = complex47.add(complex59);
        code.src.Complex complex63 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex66 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex67 = complex63.multiply(complex66);
        java.lang.String str68 = complex63.toString();
        code.src.Complex complex71 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex74 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex75 = complex71.multiply(complex74);
        code.src.Complex complex76 = complex63.add(complex75);
        code.src.Complex complex77 = complex60.add(complex76);
        code.src.Complex complex80 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex83 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex84 = complex80.multiply(complex83);
        code.src.Complex complex85 = complex60.sub(complex80);
        code.src.Complex complex86 = complex43.add(complex85);
        double double87 = complex86.abs();
        double double88 = complex86.imaginary;
        code.src.Complex complex89 = complex35.sub(complex86);
        double double90 = complex35.imaginary;
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1050.9408051475186d + "'", double37 == 1050.9408051475186d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(10.0,0.0)" + "'", str52, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(10.0,0.0)" + "'", str68, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 572.0d + "'", double87 == 572.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 481.32140331011675d + "'", double88 == 481.32140331011675d);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 875.1298242002123d + "'", double90 == 875.1298242002123d);
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0445");
        code.src.Complex complex2 = code.src.Complex.polar((-317.11773840932915d), (double) (-1.0f));
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        double double40 = complex39.real;
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        code.src.Complex complex48 = complex39.sub(complex46);
        double double49 = complex39.imaginary;
        code.src.Complex complex50 = complex2.sub(complex39);
        code.src.Complex complex51 = null;
        // The following exception was thrown during execution in test generation
        try {
            code.src.Complex complex52 = complex2.multiply(complex51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 582.9143981028653d + "'", double40 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 875.1298242002123d + "'", double49 == 875.1298242002123d);
        org.junit.Assert.assertNotNull(complex50);
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0446");
        code.src.Complex complex2 = code.src.Complex.polar((-363960.5478434686d), 467.07736184459986d);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0447");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        double double33 = complex15.real;
        double double34 = complex15.real;
        code.src.Complex complex37 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex40 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex41 = complex37.multiply(complex40);
        java.lang.String str42 = complex37.toString();
        code.src.Complex complex45 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex45.multiply(complex48);
        code.src.Complex complex50 = complex37.add(complex49);
        code.src.Complex complex53 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex56 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex57 = complex53.multiply(complex56);
        java.lang.String str58 = complex53.toString();
        code.src.Complex complex61 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex64 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex65 = complex61.multiply(complex64);
        code.src.Complex complex66 = complex53.add(complex65);
        code.src.Complex complex67 = complex50.add(complex66);
        code.src.Complex complex68 = complex15.sub(complex50);
        double double69 = complex68.imaginary;
        double double70 = complex68.real;
        double double71 = complex68.abs();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 290.95719905143267d + "'", double33 == 290.95719905143267d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 290.95719905143267d + "'", double34 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(10.0,0.0)" + "'", str42, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(10.0,0.0)" + "'", str58, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0448");
        code.src.Complex complex2 = new code.src.Complex((double) '4', 320.0d);
        java.lang.String str3 = complex2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "(52.0,320.0)" + "'", str3, "(52.0,320.0)");
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0449");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        complex2.real = (byte) 1;
        complex2.imaginary = (short) 100;
        code.src.Complex complex7 = new code.src.Complex();
        complex7.real = 1L;
        code.src.Complex complex12 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex15 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex16 = complex12.multiply(complex15);
        java.lang.String str17 = complex12.toString();
        code.src.Complex complex20 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex23 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex24 = complex20.multiply(complex23);
        code.src.Complex complex25 = complex12.add(complex24);
        code.src.Complex complex28 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex31 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex32 = complex28.multiply(complex31);
        java.lang.String str33 = complex28.toString();
        code.src.Complex complex36 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex39 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex40 = complex36.multiply(complex39);
        code.src.Complex complex41 = complex28.add(complex40);
        code.src.Complex complex42 = complex25.add(complex41);
        code.src.Complex complex43 = complex7.add(complex42);
        double double44 = complex7.imaginary;
        double double45 = complex7.imaginary;
        java.lang.String str46 = complex7.toString();
        code.src.Complex complex47 = complex2.sub(complex7);
        java.lang.Class<?> wildcardClass48 = complex47.getClass();
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(10.0,0.0)" + "'", str17, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(10.0,0.0)" + "'", str33, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(1.0,0.0)" + "'", str46, "(1.0,0.0)");
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0450");
        code.src.Complex complex2 = new code.src.Complex((double) '4', (double) ' ');
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0451");
        code.src.Complex complex2 = new code.src.Complex(71852.21111515388d, (-495.7163425468028d));
        java.lang.Class<?> wildcardClass3 = complex2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0452");
        code.src.Complex complex2 = code.src.Complex.polar((double) 'a', (double) 1L);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double6 = complex5.abs();
        double double7 = complex5.real;
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        java.lang.String str15 = complex10.toString();
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        code.src.Complex complex23 = complex10.add(complex22);
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        java.lang.String str31 = complex26.toString();
        code.src.Complex complex34 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex37 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex38 = complex34.multiply(complex37);
        code.src.Complex complex39 = complex26.add(complex38);
        code.src.Complex complex40 = complex23.add(complex39);
        java.lang.String str41 = complex23.toString();
        double double42 = complex23.abs();
        double double43 = complex23.real;
        code.src.Complex complex44 = complex5.sub(complex23);
        code.src.Complex complex45 = complex2.sub(complex44);
        java.lang.Class<?> wildcardClass46 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 28.09571990514327d + "'", double7 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(10.0,0.0)" + "'", str15, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(10.0,0.0)" + "'", str31, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str41, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 525.4704025737593d + "'", double42 == 525.4704025737593d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 290.95719905143267d + "'", double43 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0453");
        code.src.Complex complex2 = new code.src.Complex(0.0d, 43.756491210010616d);
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0454");
        code.src.Complex complex2 = code.src.Complex.polar((double) 1L, (double) 100);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.add(complex5);
        code.src.Complex complex9 = new code.src.Complex((double) 100, (double) 10.0f);
        complex9.imaginary = 100L;
        code.src.Complex complex14 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex17 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex18 = complex14.multiply(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex37 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex40 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex41 = complex37.multiply(complex40);
        java.lang.String str42 = complex37.toString();
        code.src.Complex complex45 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex45.multiply(complex48);
        code.src.Complex complex50 = complex37.add(complex49);
        code.src.Complex complex51 = complex34.add(complex50);
        code.src.Complex complex54 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex57 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex58 = complex54.multiply(complex57);
        code.src.Complex complex59 = complex34.sub(complex54);
        code.src.Complex complex60 = complex17.add(complex59);
        code.src.Complex complex61 = complex9.multiply(complex59);
        java.lang.String str62 = complex9.toString();
        code.src.Complex complex63 = complex2.multiply(complex9);
        code.src.Complex complex66 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double67 = complex66.abs();
        java.lang.String str68 = complex66.toString();
        code.src.Complex complex69 = complex9.add(complex66);
        complex66.real = 119.9377093343606d;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(10.0,0.0)" + "'", str42, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(100.0,100.0)" + "'", str62, "(100.0,100.0)");
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 52.0d + "'", double67 == 52.0d);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str68, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex69);
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0455");
        code.src.Complex complex2 = code.src.Complex.polar(112.71645842555559d, (double) 'a');
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0456");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        complex2.imaginary = (-1.0f);
        double double18 = complex2.real;
        double double19 = complex2.real;
        complex2.imaginary = 141.4213562373095d;
        code.src.Complex complex24 = new code.src.Complex((double) (byte) 1, (double) (-1.0f));
        complex24.imaginary = (byte) 1;
        code.src.Complex complex27 = complex2.multiply(complex24);
        java.lang.String str28 = complex2.toString();
        double double29 = complex2.real;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(10.0,141.4213562373095)" + "'", str28, "(10.0,141.4213562373095)");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0457");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        complex2.imaginary = 100L;
        code.src.Complex complex7 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex10 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex11 = complex7.multiply(complex10);
        code.src.Complex complex14 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex17 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex18 = complex14.multiply(complex17);
        java.lang.String str19 = complex14.toString();
        code.src.Complex complex22 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex25 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex26 = complex22.multiply(complex25);
        code.src.Complex complex27 = complex14.add(complex26);
        code.src.Complex complex30 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex33 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex34 = complex30.multiply(complex33);
        java.lang.String str35 = complex30.toString();
        code.src.Complex complex38 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex41 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex42 = complex38.multiply(complex41);
        code.src.Complex complex43 = complex30.add(complex42);
        code.src.Complex complex44 = complex27.add(complex43);
        code.src.Complex complex47 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex50 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex51 = complex47.multiply(complex50);
        code.src.Complex complex52 = complex27.sub(complex47);
        code.src.Complex complex53 = complex10.add(complex52);
        code.src.Complex complex54 = complex2.multiply(complex52);
        double double55 = complex2.real;
        double double56 = complex2.abs();
        double double57 = complex2.imaginary;
        code.src.Complex complex60 = new code.src.Complex((double) 10L, (double) '#');
        double double61 = complex60.imaginary;
        double double62 = complex60.abs();
        code.src.Complex complex63 = complex2.add(complex60);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(10.0,0.0)" + "'", str19, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(10.0,0.0)" + "'", str35, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 100.0d + "'", double55 == 100.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 141.4213562373095d + "'", double56 == 141.4213562373095d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 100.0d + "'", double57 == 100.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 35.0d + "'", double61 == 35.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 36.40054944640259d + "'", double62 == 36.40054944640259d);
        org.junit.Assert.assertNotNull(complex63);
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        code.src.Complex complex40 = complex15.sub(complex35);
        double double41 = complex40.imaginary;
        complex40.real = 290.95719905143267d;
        double double44 = complex40.abs();
        complex40.imaginary = (-0.5440211108893698d);
        java.lang.Class<?> wildcardClass47 = complex40.getClass();
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 437.56491210010614d + "'", double41 == 437.56491210010614d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 525.4704025737593d + "'", double44 == 525.4704025737593d);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0459");
        code.src.Complex complex2 = code.src.Complex.polar(101.9803902718557d, (double) 100);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0460");
        code.src.Complex complex0 = new code.src.Complex();
        code.src.Complex complex3 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex6 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex7 = complex3.multiply(complex6);
        java.lang.String str8 = complex3.toString();
        code.src.Complex complex11 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex14 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex15 = complex11.multiply(complex14);
        code.src.Complex complex16 = complex3.add(complex15);
        code.src.Complex complex19 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex22 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex23 = complex19.multiply(complex22);
        java.lang.String str24 = complex19.toString();
        code.src.Complex complex27 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex30 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex31 = complex27.multiply(complex30);
        code.src.Complex complex32 = complex19.add(complex31);
        code.src.Complex complex33 = complex16.add(complex32);
        double double34 = complex33.real;
        code.src.Complex complex35 = complex0.multiply(complex33);
        java.lang.String str36 = complex35.toString();
        java.lang.String str37 = complex35.toString();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(10.0,0.0)" + "'", str8, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(10.0,0.0)" + "'", str24, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 581.9143981028653d + "'", double34 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(0.0,0.0)" + "'", str36, "(0.0,0.0)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(0.0,0.0)" + "'", str37, "(0.0,0.0)");
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0461");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, (double) '#');
        double double3 = complex2.imaginary;
        code.src.Complex complex6 = new code.src.Complex((double) 100, (double) 10.0f);
        complex6.imaginary = 100L;
        java.lang.String str9 = complex6.toString();
        code.src.Complex complex10 = complex2.multiply(complex6);
        double double11 = complex2.real;
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 35.0d + "'", double3 == 35.0d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(100.0,100.0)" + "'", str9, "(100.0,100.0)");
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0462");
        code.src.Complex complex2 = code.src.Complex.polar(28.09571990514327d, (double) 0);
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        double double40 = complex39.real;
        code.src.Complex complex41 = complex2.add(complex39);
        code.src.Complex complex44 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double45 = complex44.abs();
        double double46 = complex44.real;
        code.src.Complex complex49 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex52 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex53 = complex49.multiply(complex52);
        java.lang.String str54 = complex49.toString();
        code.src.Complex complex57 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex60 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex61 = complex57.multiply(complex60);
        code.src.Complex complex62 = complex49.add(complex61);
        code.src.Complex complex65 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex68 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex69 = complex65.multiply(complex68);
        java.lang.String str70 = complex65.toString();
        code.src.Complex complex73 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex76 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex77 = complex73.multiply(complex76);
        code.src.Complex complex78 = complex65.add(complex77);
        code.src.Complex complex79 = complex62.add(complex78);
        java.lang.String str80 = complex62.toString();
        double double81 = complex62.abs();
        double double82 = complex62.real;
        code.src.Complex complex83 = complex44.sub(complex62);
        java.lang.String str84 = complex44.toString();
        code.src.Complex complex85 = complex41.multiply(complex44);
        code.src.Complex complex88 = new code.src.Complex((double) (short) 1, 290.95719905143267d);
        double double89 = complex88.imaginary;
        code.src.Complex complex90 = complex44.add(complex88);
        double double91 = complex44.imaginary;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 582.9143981028653d + "'", double40 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 52.0d + "'", double45 == 52.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 28.09571990514327d + "'", double46 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(10.0,0.0)" + "'", str54, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(10.0,0.0)" + "'", str70, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str80, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 525.4704025737593d + "'", double81 == 525.4704025737593d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 290.95719905143267d + "'", double82 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str84, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 290.95719905143267d + "'", double89 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 43.756491210010616d + "'", double91 == 43.756491210010616d);
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0463");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 0, (double) ' ');
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        code.src.Complex complex40 = complex2.add(complex38);
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        double double48 = complex46.imaginary;
        java.lang.String str49 = complex46.toString();
        code.src.Complex complex52 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double53 = complex52.abs();
        double double54 = complex52.real;
        code.src.Complex complex55 = complex46.sub(complex52);
        code.src.Complex complex56 = complex38.sub(complex46);
        code.src.Complex complex57 = new code.src.Complex();
        complex57.real = 1L;
        code.src.Complex complex62 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex65 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex66 = complex62.multiply(complex65);
        java.lang.String str67 = complex62.toString();
        code.src.Complex complex70 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex73 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex74 = complex70.multiply(complex73);
        code.src.Complex complex75 = complex62.add(complex74);
        code.src.Complex complex78 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex81 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex82 = complex78.multiply(complex81);
        java.lang.String str83 = complex78.toString();
        code.src.Complex complex86 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex89 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex90 = complex86.multiply(complex89);
        code.src.Complex complex91 = complex78.add(complex90);
        code.src.Complex complex92 = complex75.add(complex91);
        code.src.Complex complex93 = complex57.add(complex92);
        java.lang.String str94 = complex57.toString();
        code.src.Complex complex95 = complex46.sub(complex57);
        java.lang.Class<?> wildcardClass96 = complex95.getClass();
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 43.756491210010616d + "'", double48 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str49, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 52.0d + "'", double53 == 52.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 28.09571990514327d + "'", double54 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(10.0,0.0)" + "'", str67, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(10.0,0.0)" + "'", str83, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "(1.0,0.0)" + "'", str94, "(1.0,0.0)");
        org.junit.Assert.assertNotNull(complex95);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0464");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        complex2.imaginary = 100L;
        code.src.Complex complex7 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex10 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex11 = complex7.multiply(complex10);
        code.src.Complex complex14 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex17 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex18 = complex14.multiply(complex17);
        java.lang.String str19 = complex14.toString();
        code.src.Complex complex22 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex25 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex26 = complex22.multiply(complex25);
        code.src.Complex complex27 = complex14.add(complex26);
        code.src.Complex complex30 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex33 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex34 = complex30.multiply(complex33);
        java.lang.String str35 = complex30.toString();
        code.src.Complex complex38 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex41 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex42 = complex38.multiply(complex41);
        code.src.Complex complex43 = complex30.add(complex42);
        code.src.Complex complex44 = complex27.add(complex43);
        code.src.Complex complex47 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex50 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex51 = complex47.multiply(complex50);
        code.src.Complex complex52 = complex27.sub(complex47);
        code.src.Complex complex53 = complex10.add(complex52);
        code.src.Complex complex54 = complex2.multiply(complex52);
        code.src.Complex complex57 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex60 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex61 = complex57.multiply(complex60);
        double double62 = complex61.imaginary;
        java.lang.String str63 = complex61.toString();
        java.lang.String str64 = complex61.toString();
        code.src.Complex complex65 = complex52.sub(complex61);
        code.src.Complex complex68 = new code.src.Complex((double) '4', (double) 100L);
        code.src.Complex complex69 = complex61.multiply(complex68);
        double double70 = complex61.imaginary;
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(10.0,0.0)" + "'", str19, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(10.0,0.0)" + "'", str35, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 437.56491210010614d + "'", double62 == 437.56491210010614d);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(280.95719905143267,437.56491210010614)" + "'", str63, "(280.95719905143267,437.56491210010614)");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(280.95719905143267,437.56491210010614)" + "'", str64, "(280.95719905143267,437.56491210010614)");
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 437.56491210010614d + "'", double70 == 437.56491210010614d);
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0465");
        code.src.Complex complex2 = code.src.Complex.polar(28.09571990514327d, (double) 10L);
        double double3 = complex2.imaginary;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-15.28466475403262d) + "'", double3 == (-15.28466475403262d));
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0466");
        code.src.Complex complex2 = code.src.Complex.polar((double) (byte) 100, 582.9143981028653d);
        complex2.real = 875.1298242002123d;
        complex2.imaginary = (-317.11773840932915d);
        code.src.Complex complex9 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex9.real = 10;
        code.src.Complex complex12 = complex2.sub(complex9);
        complex12.real = 525.4704025737593d;
        double double15 = complex12.abs();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 613.7449014003101d + "'", double15 == 613.7449014003101d);
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0467");
        code.src.Complex complex2 = code.src.Complex.polar(5225.935322982863d, 35.0d);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0468");
        code.src.Complex complex2 = new code.src.Complex(100.0d, (double) 100);
        code.src.Complex complex5 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex5.imaginary = (short) 0;
        complex5.imaginary = 100.0f;
        code.src.Complex complex12 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex15 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex16 = complex12.multiply(complex15);
        java.lang.String str17 = complex12.toString();
        code.src.Complex complex20 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex23 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex24 = complex20.multiply(complex23);
        code.src.Complex complex25 = complex12.add(complex24);
        code.src.Complex complex28 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex31 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex32 = complex28.multiply(complex31);
        java.lang.String str33 = complex28.toString();
        code.src.Complex complex36 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex39 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex40 = complex36.multiply(complex39);
        code.src.Complex complex41 = complex28.add(complex40);
        code.src.Complex complex42 = complex25.add(complex41);
        java.lang.String str43 = complex25.toString();
        code.src.Complex complex46 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex46.imaginary = (short) 0;
        java.lang.String str49 = complex46.toString();
        code.src.Complex complex50 = complex25.sub(complex46);
        code.src.Complex complex51 = complex5.add(complex50);
        complex51.imaginary = 0;
        complex51.real = 10.0f;
        complex51.imaginary = 481.32140331011675d;
        code.src.Complex complex58 = complex2.multiply(complex51);
        complex51.real = 1077.733215908709d;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(10.0,0.0)" + "'", str17, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(10.0,0.0)" + "'", str33, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str43, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(-0.0,0.0)" + "'", str49, "(-0.0,0.0)");
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex58);
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0469");
        code.src.Complex complex2 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        double double3 = complex2.abs();
        code.src.Complex complex6 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str7 = complex6.toString();
        code.src.Complex complex8 = complex2.multiply(complex6);
        double double9 = complex6.real;
        code.src.Complex complex12 = new code.src.Complex((double) 100, (double) 10.0f);
        complex12.real = (byte) 1;
        complex12.imaginary = (short) 100;
        code.src.Complex complex19 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex22 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex23 = complex19.multiply(complex22);
        java.lang.String str24 = complex19.toString();
        code.src.Complex complex27 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex30 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex31 = complex27.multiply(complex30);
        code.src.Complex complex32 = complex19.add(complex31);
        double double33 = complex32.real;
        code.src.Complex complex36 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex37 = complex32.multiply(complex36);
        code.src.Complex complex38 = complex12.multiply(complex32);
        code.src.Complex complex41 = code.src.Complex.polar((double) ' ', (double) (byte) 100);
        code.src.Complex complex42 = complex32.multiply(complex41);
        code.src.Complex complex43 = complex6.multiply(complex42);
        java.lang.String str44 = complex43.toString();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(100.0,10.0)" + "'", str7, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(10.0,0.0)" + "'", str24, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 290.95719905143267d + "'", double33 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(1438293.586305778,887156.2400733333)" + "'", str44, "(1438293.586305778,887156.2400733333)");
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0470");
        code.src.Complex complex2 = new code.src.Complex(52.0d, 103.87188973436588d);
        double double3 = complex2.imaginary;
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 103.87188973436588d + "'", double3 == 103.87188973436588d);
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0471");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 0, (double) ' ');
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        code.src.Complex complex40 = complex2.add(complex38);
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        double double48 = complex46.imaginary;
        java.lang.String str49 = complex46.toString();
        code.src.Complex complex52 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double53 = complex52.abs();
        double double54 = complex52.real;
        code.src.Complex complex55 = complex46.sub(complex52);
        code.src.Complex complex56 = complex38.sub(complex46);
        complex46.imaginary = (-288.4361024143587d);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 43.756491210010616d + "'", double48 == 43.756491210010616d);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str49, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 52.0d + "'", double53 == 52.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 28.09571990514327d + "'", double54 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0472");
        code.src.Complex complex2 = code.src.Complex.polar((double) ' ', (double) (byte) 100);
        java.lang.Class<?> wildcardClass3 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0473");
        code.src.Complex complex2 = code.src.Complex.polar(10.0d, (double) '4');
        complex2.real = 1.0d;
        code.src.Complex complex7 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex7.imaginary = (short) 0;
        complex7.imaginary = 100.0f;
        code.src.Complex complex14 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str15 = complex14.toString();
        code.src.Complex complex18 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        code.src.Complex complex19 = complex14.sub(complex18);
        code.src.Complex complex20 = complex7.multiply(complex19);
        code.src.Complex complex21 = new code.src.Complex();
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex40 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex43 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex44 = complex40.multiply(complex43);
        java.lang.String str45 = complex40.toString();
        code.src.Complex complex48 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex51 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex52 = complex48.multiply(complex51);
        code.src.Complex complex53 = complex40.add(complex52);
        code.src.Complex complex54 = complex37.add(complex53);
        double double55 = complex54.real;
        code.src.Complex complex56 = complex21.multiply(complex54);
        code.src.Complex complex59 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex62 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex63 = complex59.multiply(complex62);
        java.lang.String str64 = complex59.toString();
        code.src.Complex complex67 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex70 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex71 = complex67.multiply(complex70);
        code.src.Complex complex72 = complex59.add(complex71);
        code.src.Complex complex75 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex78 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex79 = complex75.multiply(complex78);
        java.lang.String str80 = complex75.toString();
        code.src.Complex complex83 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex86 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex87 = complex83.multiply(complex86);
        code.src.Complex complex88 = complex75.add(complex87);
        code.src.Complex complex89 = complex72.add(complex88);
        java.lang.String str90 = complex72.toString();
        double double91 = complex72.abs();
        code.src.Complex complex92 = complex21.multiply(complex72);
        code.src.Complex complex93 = complex20.add(complex92);
        code.src.Complex complex94 = complex2.sub(complex93);
        double double95 = complex2.real;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(100.0,10.0)" + "'", str15, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "(10.0,0.0)" + "'", str45, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 581.9143981028653d + "'", double55 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(10.0,0.0)" + "'", str64, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "(10.0,0.0)" + "'", str80, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str90, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 525.4704025737593d + "'", double91 == 525.4704025737593d);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertNotNull(complex94);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 1.0d + "'", double95 == 1.0d);
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0474");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        double double37 = complex36.real;
        code.src.Complex complex40 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex43 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex44 = complex40.multiply(complex43);
        code.src.Complex complex45 = complex36.sub(complex43);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex43.add(complex48);
        complex48.real = 43.756491210010616d;
        java.lang.String str52 = complex48.toString();
        complex48.real = (short) 1;
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 582.9143981028653d + "'", double37 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(43.756491210010616,43.756491210010616)" + "'", str52, "(43.756491210010616,43.756491210010616)");
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0475");
        code.src.Complex complex2 = new code.src.Complex(1055.9594711542297d, 58911.02077697936d);
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0476");
        code.src.Complex complex2 = new code.src.Complex(290.9589175121722d, (double) 10);
        code.src.Complex complex5 = new code.src.Complex((double) 100, (double) 10.0f);
        complex5.real = (byte) 1;
        complex5.imaginary = (short) 100;
        code.src.Complex complex10 = complex2.add(complex5);
        code.src.Complex complex11 = new code.src.Complex();
        complex11.real = 1L;
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        java.lang.String str21 = complex16.toString();
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        code.src.Complex complex29 = complex16.add(complex28);
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        java.lang.String str37 = complex32.toString();
        code.src.Complex complex40 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex43 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex44 = complex40.multiply(complex43);
        code.src.Complex complex45 = complex32.add(complex44);
        code.src.Complex complex46 = complex29.add(complex45);
        code.src.Complex complex47 = complex11.add(complex46);
        double double48 = complex47.real;
        code.src.Complex complex51 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex54 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex55 = complex51.multiply(complex54);
        code.src.Complex complex56 = complex47.sub(complex54);
        double double57 = complex47.imaginary;
        complex47.real = 100;
        code.src.Complex complex60 = complex2.sub(complex47);
        java.lang.String str61 = complex47.toString();
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(10.0,0.0)" + "'", str21, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(10.0,0.0)" + "'", str37, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 582.9143981028653d + "'", double48 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 875.1298242002123d + "'", double57 == 875.1298242002123d);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(100.0,875.1298242002123)" + "'", str61, "(100.0,875.1298242002123)");
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0477");
        code.src.Complex complex2 = new code.src.Complex((double) 0L, 1018.3729221500101d);
        double double3 = complex2.real;
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0478");
        code.src.Complex complex2 = code.src.Complex.polar(28.09571990514327d, (-213613.9212426372d));
        complex2.real = 1;
        complex2.real = (-1L);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0479");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, (double) '#');
        double double3 = complex2.imaginary;
        double double4 = complex2.abs();
        code.src.Complex complex7 = new code.src.Complex(100.0d, 0.0d);
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        java.lang.String str15 = complex10.toString();
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        code.src.Complex complex23 = complex10.add(complex22);
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        java.lang.String str31 = complex26.toString();
        code.src.Complex complex34 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex37 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex38 = complex34.multiply(complex37);
        code.src.Complex complex39 = complex26.add(complex38);
        code.src.Complex complex42 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex45 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex46 = complex42.multiply(complex45);
        java.lang.String str47 = complex42.toString();
        code.src.Complex complex50 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex53 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex54 = complex50.multiply(complex53);
        code.src.Complex complex55 = complex42.add(complex54);
        code.src.Complex complex56 = complex39.add(complex55);
        java.lang.String str57 = complex39.toString();
        double double58 = complex39.abs();
        code.src.Complex complex59 = complex23.multiply(complex39);
        code.src.Complex complex60 = complex7.add(complex59);
        code.src.Complex complex61 = complex2.multiply(complex60);
        double double62 = complex60.abs();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 35.0d + "'", double3 == 35.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 36.40054944640259d + "'", double4 == 36.40054944640259d);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(10.0,0.0)" + "'", str15, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(10.0,0.0)" + "'", str31, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(10.0,0.0)" + "'", str47, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str57, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 525.4704025737593d + "'", double58 == 525.4704025737593d);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 276080.4779057942d + "'", double62 == 276080.4779057942d);
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0480");
        code.src.Complex complex0 = new code.src.Complex();
        complex0.real = 1L;
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex0.add(complex35);
        code.src.Complex complex39 = code.src.Complex.polar((double) (short) -1, (double) (byte) 0);
        code.src.Complex complex42 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex45 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex46 = complex42.multiply(complex45);
        java.lang.String str47 = complex42.toString();
        code.src.Complex complex50 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex53 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex54 = complex50.multiply(complex53);
        code.src.Complex complex55 = complex42.add(complex54);
        double double56 = complex55.real;
        code.src.Complex complex59 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex62 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex63 = complex59.multiply(complex62);
        double double64 = complex63.imaginary;
        code.src.Complex complex65 = complex55.sub(complex63);
        double double66 = complex55.imaginary;
        code.src.Complex complex67 = complex39.multiply(complex55);
        code.src.Complex complex68 = complex0.multiply(complex67);
        double double69 = complex0.real;
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(10.0,0.0)" + "'", str47, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 290.95719905143267d + "'", double56 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 437.56491210010614d + "'", double64 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 437.56491210010614d + "'", double66 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0d + "'", double69 == 1.0d);
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0481");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        double double7 = complex5.imaginary;
        double double8 = complex5.imaginary;
        code.src.Complex complex11 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex14 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex15 = complex11.multiply(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex34 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex37 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex38 = complex34.multiply(complex37);
        java.lang.String str39 = complex34.toString();
        code.src.Complex complex42 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex45 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex46 = complex42.multiply(complex45);
        code.src.Complex complex47 = complex34.add(complex46);
        code.src.Complex complex48 = complex31.add(complex47);
        code.src.Complex complex51 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex54 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex55 = complex51.multiply(complex54);
        code.src.Complex complex56 = complex31.sub(complex51);
        code.src.Complex complex57 = complex14.add(complex56);
        double double58 = complex57.abs();
        double double59 = complex57.imaginary;
        complex57.imaginary = 1L;
        code.src.Complex complex62 = complex5.sub(complex57);
        complex62.imaginary = 811.5511719071119d;
        complex62.imaginary = (byte) 0;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 43.756491210010616d + "'", double7 == 43.756491210010616d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 43.756491210010616d + "'", double8 == 43.756491210010616d);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(10.0,0.0)" + "'", str39, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 572.0d + "'", double58 == 572.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 481.32140331011675d + "'", double59 == 481.32140331011675d);
        org.junit.Assert.assertNotNull(complex62);
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0482");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        double double7 = complex6.imaginary;
        complex6.imaginary = 279.95719905143267d;
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 437.56491210010614d + "'", double7 == 437.56491210010614d);
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.multiply(complex5);
        java.lang.String str7 = complex2.toString();
        code.src.Complex complex10 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex13 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex14 = complex10.multiply(complex13);
        code.src.Complex complex15 = complex2.add(complex14);
        code.src.Complex complex18 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex21 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex22 = complex18.multiply(complex21);
        java.lang.String str23 = complex18.toString();
        code.src.Complex complex26 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex29 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex30 = complex26.multiply(complex29);
        code.src.Complex complex31 = complex18.add(complex30);
        code.src.Complex complex32 = complex15.add(complex31);
        double double33 = complex15.real;
        double double34 = complex15.real;
        code.src.Complex complex37 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex40 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex41 = complex37.multiply(complex40);
        java.lang.String str42 = complex37.toString();
        code.src.Complex complex45 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex45.multiply(complex48);
        code.src.Complex complex50 = complex37.add(complex49);
        code.src.Complex complex53 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex56 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex57 = complex53.multiply(complex56);
        java.lang.String str58 = complex53.toString();
        code.src.Complex complex61 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex64 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex65 = complex61.multiply(complex64);
        code.src.Complex complex66 = complex53.add(complex65);
        code.src.Complex complex67 = complex50.add(complex66);
        code.src.Complex complex68 = complex15.sub(complex50);
        double double69 = complex50.imaginary;
        code.src.Complex complex70 = null;
        // The following exception was thrown during execution in test generation
        try {
            code.src.Complex complex71 = complex50.multiply(complex70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(10.0,0.0)" + "'", str7, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(10.0,0.0)" + "'", str23, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 290.95719905143267d + "'", double33 == 290.95719905143267d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 290.95719905143267d + "'", double34 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(10.0,0.0)" + "'", str42, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(10.0,0.0)" + "'", str58, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 437.56491210010614d + "'", double69 == 437.56491210010614d);
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0484");
        code.src.Complex complex2 = new code.src.Complex(572.0d, (double) 1L);
        code.src.Complex complex5 = new code.src.Complex((double) 100, (double) 10.0f);
        complex5.real = (byte) 1;
        complex5.imaginary = (short) 100;
        code.src.Complex complex10 = new code.src.Complex();
        complex10.real = 1L;
        code.src.Complex complex15 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex18 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex19 = complex15.multiply(complex18);
        java.lang.String str20 = complex15.toString();
        code.src.Complex complex23 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex26 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex27 = complex23.multiply(complex26);
        code.src.Complex complex28 = complex15.add(complex27);
        code.src.Complex complex31 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex34 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex35 = complex31.multiply(complex34);
        java.lang.String str36 = complex31.toString();
        code.src.Complex complex39 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex42 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex43 = complex39.multiply(complex42);
        code.src.Complex complex44 = complex31.add(complex43);
        code.src.Complex complex45 = complex28.add(complex44);
        code.src.Complex complex46 = complex10.add(complex45);
        double double47 = complex10.imaginary;
        double double48 = complex10.imaginary;
        java.lang.String str49 = complex10.toString();
        code.src.Complex complex50 = complex5.sub(complex10);
        code.src.Complex complex51 = complex2.multiply(complex50);
        java.lang.String str52 = complex2.toString();
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(10.0,0.0)" + "'", str20, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(10.0,0.0)" + "'", str36, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(1.0,0.0)" + "'", str49, "(1.0,0.0)");
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(572.0,1.0)" + "'", str52, "(572.0,1.0)");
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0485");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 100, 43.756491210010616d);
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        double double40 = complex39.real;
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        code.src.Complex complex48 = complex39.sub(complex46);
        code.src.Complex complex49 = complex2.add(complex46);
        code.src.Complex complex52 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex55 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex56 = complex52.multiply(complex55);
        java.lang.String str57 = complex52.toString();
        code.src.Complex complex60 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex63 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex64 = complex60.multiply(complex63);
        code.src.Complex complex65 = complex52.add(complex64);
        code.src.Complex complex68 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex71 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex72 = complex68.multiply(complex71);
        java.lang.String str73 = complex68.toString();
        code.src.Complex complex76 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex79 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex80 = complex76.multiply(complex79);
        code.src.Complex complex81 = complex68.add(complex80);
        code.src.Complex complex82 = complex65.add(complex81);
        code.src.Complex complex85 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex88 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex89 = complex85.multiply(complex88);
        code.src.Complex complex90 = complex65.sub(complex85);
        code.src.Complex complex91 = complex49.multiply(complex65);
        code.src.Complex complex94 = new code.src.Complex(214489.24976920983d, (double) (-1));
        code.src.Complex complex95 = complex49.sub(complex94);
        double double96 = complex94.abs();
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 582.9143981028653d + "'", double40 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(10.0,0.0)" + "'", str57, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(10.0,0.0)" + "'", str73, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex95);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 214489.24977154096d + "'", double96 == 214489.24977154096d);
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0486");
        code.src.Complex complex2 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        complex2.imaginary = (short) 0;
        complex2.imaginary = 100.0f;
        code.src.Complex complex9 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str10 = complex9.toString();
        code.src.Complex complex13 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        code.src.Complex complex14 = complex9.sub(complex13);
        code.src.Complex complex15 = complex2.multiply(complex14);
        code.src.Complex complex16 = new code.src.Complex();
        code.src.Complex complex19 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex22 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex23 = complex19.multiply(complex22);
        java.lang.String str24 = complex19.toString();
        code.src.Complex complex27 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex30 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex31 = complex27.multiply(complex30);
        code.src.Complex complex32 = complex19.add(complex31);
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        java.lang.String str40 = complex35.toString();
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        code.src.Complex complex48 = complex35.add(complex47);
        code.src.Complex complex49 = complex32.add(complex48);
        double double50 = complex49.real;
        code.src.Complex complex51 = complex16.multiply(complex49);
        code.src.Complex complex54 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex57 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex58 = complex54.multiply(complex57);
        java.lang.String str59 = complex54.toString();
        code.src.Complex complex62 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex65 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex66 = complex62.multiply(complex65);
        code.src.Complex complex67 = complex54.add(complex66);
        code.src.Complex complex70 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex73 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex74 = complex70.multiply(complex73);
        java.lang.String str75 = complex70.toString();
        code.src.Complex complex78 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex81 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex82 = complex78.multiply(complex81);
        code.src.Complex complex83 = complex70.add(complex82);
        code.src.Complex complex84 = complex67.add(complex83);
        java.lang.String str85 = complex67.toString();
        double double86 = complex67.abs();
        code.src.Complex complex87 = complex16.multiply(complex67);
        code.src.Complex complex88 = complex15.add(complex87);
        complex15.real = (-198.14967628541848d);
        double double91 = complex15.abs();
        code.src.Complex complex94 = code.src.Complex.polar(0.0d, (double) (short) -1);
        java.lang.String str95 = complex94.toString();
        code.src.Complex complex96 = complex15.multiply(complex94);
        java.lang.String str97 = complex94.toString();
        complex94.real = 0.0d;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(100.0,10.0)" + "'", str10, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(10.0,0.0)" + "'", str24, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(10.0,0.0)" + "'", str40, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 581.9143981028653d + "'", double50 == 581.9143981028653d);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(10.0,0.0)" + "'", str59, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(10.0,0.0)" + "'", str75, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str85, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 525.4704025737593d + "'", double86 == 525.4704025737593d);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 58911.02077697936d + "'", double91 == 58911.02077697936d);
        org.junit.Assert.assertNotNull(complex94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "(0.0,-0.0)" + "'", str95, "(0.0,-0.0)");
        org.junit.Assert.assertNotNull(complex96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "(0.0,-0.0)" + "'", str97, "(0.0,-0.0)");
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0487");
        code.src.Complex complex2 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        code.src.Complex complex36 = complex2.add(complex18);
        code.src.Complex complex39 = code.src.Complex.polar((-317.11773840932915d), (double) (-1.0f));
        code.src.Complex complex40 = complex18.sub(complex39);
        complex18.imaginary = 875.8294407044641d;
        double double43 = complex18.abs();
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 922.8939813892761d + "'", double43 == 922.8939813892761d);
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0488");
        code.src.Complex complex2 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        complex2.real = 582.9143981028653d;
        code.src.Complex complex7 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str8 = complex7.toString();
        code.src.Complex complex11 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        code.src.Complex complex12 = complex7.sub(complex11);
        code.src.Complex complex13 = complex2.sub(complex11);
        double double14 = complex2.imaginary;
        complex2.imaginary = 0.0d;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(100.0,10.0)" + "'", str8, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 43.756491210010616d + "'", double14 == 43.756491210010616d);
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        code.src.Complex complex2 = new code.src.Complex((double) 100, (double) 10.0f);
        complex2.real = (byte) 1;
        complex2.imaginary = (short) 100;
        code.src.Complex complex9 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex12 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex13 = complex9.multiply(complex12);
        java.lang.String str14 = complex9.toString();
        code.src.Complex complex17 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex20 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex21 = complex17.multiply(complex20);
        code.src.Complex complex22 = complex9.add(complex21);
        double double23 = complex22.real;
        code.src.Complex complex26 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex27 = complex22.multiply(complex26);
        code.src.Complex complex28 = complex2.multiply(complex22);
        code.src.Complex complex31 = code.src.Complex.polar((double) ' ', (double) (byte) 100);
        code.src.Complex complex32 = complex22.multiply(complex31);
        code.src.Complex complex35 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex38 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex39 = complex35.multiply(complex38);
        java.lang.String str40 = complex35.toString();
        code.src.Complex complex43 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex46 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex47 = complex43.multiply(complex46);
        code.src.Complex complex48 = complex35.add(complex47);
        double double49 = complex48.real;
        code.src.Complex complex52 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex55 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex56 = complex52.multiply(complex55);
        double double57 = complex56.imaginary;
        code.src.Complex complex58 = complex48.sub(complex56);
        code.src.Complex complex59 = complex31.multiply(complex48);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(10.0,0.0)" + "'", str14, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 290.95719905143267d + "'", double23 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(10.0,0.0)" + "'", str40, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 290.95719905143267d + "'", double49 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 437.56491210010614d + "'", double57 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0490");
        code.src.Complex complex2 = new code.src.Complex((double) (short) 0, (double) ' ');
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        code.src.Complex complex40 = complex2.add(complex38);
        code.src.Complex complex43 = new code.src.Complex(28.09571990514327d, 907.1298242002123d);
        code.src.Complex complex46 = code.src.Complex.polar((double) (byte) 10, (double) (short) 0);
        code.src.Complex complex47 = complex43.multiply(complex46);
        code.src.Complex complex48 = complex2.add(complex43);
        code.src.Complex complex51 = code.src.Complex.polar((double) ' ', (double) (byte) 100);
        code.src.Complex complex52 = complex2.multiply(complex51);
        double double53 = complex52.real;
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 518.518416496393d + "'", double53 == 518.518416496393d);
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0491");
        code.src.Complex complex2 = new code.src.Complex(10.04987562112089d, (double) '#');
        double double3 = complex2.abs();
        complex2.imaginary = 213613.92147670433d;
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 36.41428291206625d + "'", double3 == 36.41428291206625d);
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0492");
        code.src.Complex complex2 = code.src.Complex.polar((double) (short) -1, (double) (byte) 0);
        code.src.Complex complex5 = code.src.Complex.polar(28.09571990514327d, (-213613.9212426372d));
        code.src.Complex complex6 = complex2.sub(complex5);
        complex2.imaginary = (-495.7163425468028d);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0493");
        code.src.Complex complex2 = code.src.Complex.polar((double) 1L, (double) 100);
        code.src.Complex complex5 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex6 = complex2.add(complex5);
        code.src.Complex complex9 = new code.src.Complex((double) 100, (double) 10.0f);
        complex9.imaginary = 100L;
        code.src.Complex complex14 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex17 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex18 = complex14.multiply(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex37 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex40 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex41 = complex37.multiply(complex40);
        java.lang.String str42 = complex37.toString();
        code.src.Complex complex45 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex48 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex49 = complex45.multiply(complex48);
        code.src.Complex complex50 = complex37.add(complex49);
        code.src.Complex complex51 = complex34.add(complex50);
        code.src.Complex complex54 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex57 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex58 = complex54.multiply(complex57);
        code.src.Complex complex59 = complex34.sub(complex54);
        code.src.Complex complex60 = complex17.add(complex59);
        code.src.Complex complex61 = complex9.multiply(complex59);
        java.lang.String str62 = complex9.toString();
        code.src.Complex complex63 = complex2.multiply(complex9);
        code.src.Complex complex66 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double67 = complex66.abs();
        java.lang.String str68 = complex66.toString();
        code.src.Complex complex69 = complex9.add(complex66);
        java.lang.Class<?> wildcardClass70 = complex69.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(10.0,0.0)" + "'", str42, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(100.0,100.0)" + "'", str62, "(100.0,100.0)");
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 52.0d + "'", double67 == 52.0d);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str68, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        code.src.Complex complex2 = new code.src.Complex(35.0d, 875.1298242002123d);
        double double3 = complex2.abs();
        code.src.Complex complex6 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        double double7 = complex6.abs();
        code.src.Complex complex10 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str11 = complex10.toString();
        code.src.Complex complex12 = complex6.multiply(complex10);
        double double13 = complex10.real;
        code.src.Complex complex16 = new code.src.Complex((double) 100, (double) 10.0f);
        complex16.real = (byte) 1;
        complex16.imaginary = (short) 100;
        code.src.Complex complex23 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex26 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex27 = complex23.multiply(complex26);
        java.lang.String str28 = complex23.toString();
        code.src.Complex complex31 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex34 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex35 = complex31.multiply(complex34);
        code.src.Complex complex36 = complex23.add(complex35);
        double double37 = complex36.real;
        code.src.Complex complex40 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex41 = complex36.multiply(complex40);
        code.src.Complex complex42 = complex16.multiply(complex36);
        code.src.Complex complex45 = code.src.Complex.polar((double) ' ', (double) (byte) 100);
        code.src.Complex complex46 = complex36.multiply(complex45);
        code.src.Complex complex47 = complex10.multiply(complex46);
        code.src.Complex complex48 = complex2.multiply(complex46);
        double double49 = complex46.real;
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 875.8294407044641d + "'", double3 == 875.8294407044641d);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(100.0,10.0)" + "'", str11, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(10.0,0.0)" + "'", str28, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 290.95719905143267d + "'", double37 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 15118.903072407044d + "'", double49 == 15118.903072407044d);
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0495");
        code.src.Complex complex2 = code.src.Complex.polar(1078.895181758881d, 875.1869567153606d);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0496");
        code.src.Complex complex2 = code.src.Complex.polar(28.09571990514327d, (double) 0);
        code.src.Complex complex3 = new code.src.Complex();
        complex3.real = 1L;
        code.src.Complex complex8 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex11 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex12 = complex8.multiply(complex11);
        java.lang.String str13 = complex8.toString();
        code.src.Complex complex16 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex19 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex20 = complex16.multiply(complex19);
        code.src.Complex complex21 = complex8.add(complex20);
        code.src.Complex complex24 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex27 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex28 = complex24.multiply(complex27);
        java.lang.String str29 = complex24.toString();
        code.src.Complex complex32 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex35 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex36 = complex32.multiply(complex35);
        code.src.Complex complex37 = complex24.add(complex36);
        code.src.Complex complex38 = complex21.add(complex37);
        code.src.Complex complex39 = complex3.add(complex38);
        double double40 = complex39.real;
        code.src.Complex complex41 = complex2.add(complex39);
        code.src.Complex complex44 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        double double45 = complex44.abs();
        double double46 = complex44.real;
        code.src.Complex complex49 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex52 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex53 = complex49.multiply(complex52);
        java.lang.String str54 = complex49.toString();
        code.src.Complex complex57 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex60 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex61 = complex57.multiply(complex60);
        code.src.Complex complex62 = complex49.add(complex61);
        code.src.Complex complex65 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex68 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex69 = complex65.multiply(complex68);
        java.lang.String str70 = complex65.toString();
        code.src.Complex complex73 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex76 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex77 = complex73.multiply(complex76);
        code.src.Complex complex78 = complex65.add(complex77);
        code.src.Complex complex79 = complex62.add(complex78);
        java.lang.String str80 = complex62.toString();
        double double81 = complex62.abs();
        double double82 = complex62.real;
        code.src.Complex complex83 = complex44.sub(complex62);
        java.lang.String str84 = complex44.toString();
        code.src.Complex complex85 = complex41.multiply(complex44);
        code.src.Complex complex88 = new code.src.Complex((double) (short) 1, 290.95719905143267d);
        double double89 = complex88.imaginary;
        code.src.Complex complex90 = complex44.add(complex88);
        double double91 = complex88.imaginary;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(10.0,0.0)" + "'", str13, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(10.0,0.0)" + "'", str29, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 582.9143981028653d + "'", double40 == 582.9143981028653d);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 52.0d + "'", double45 == 52.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 28.09571990514327d + "'", double46 == 28.09571990514327d);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(10.0,0.0)" + "'", str54, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(10.0,0.0)" + "'", str70, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "(290.95719905143267,437.56491210010614)" + "'", str80, "(290.95719905143267,437.56491210010614)");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 525.4704025737593d + "'", double81 == 525.4704025737593d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 290.95719905143267d + "'", double82 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "(28.09571990514327,43.756491210010616)" + "'", str84, "(28.09571990514327,43.756491210010616)");
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 290.95719905143267d + "'", double89 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 290.95719905143267d + "'", double91 == 290.95719905143267d);
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0497");
        code.src.Complex complex2 = code.src.Complex.polar(148.66068747318505d, (double) 1);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        code.src.Complex complex2 = code.src.Complex.polar((double) (short) -1, (double) (byte) 0);
        code.src.Complex complex5 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex8 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex9 = complex5.multiply(complex8);
        java.lang.String str10 = complex5.toString();
        code.src.Complex complex13 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex16 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex17 = complex13.multiply(complex16);
        code.src.Complex complex18 = complex5.add(complex17);
        code.src.Complex complex21 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex24 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex25 = complex21.multiply(complex24);
        java.lang.String str26 = complex21.toString();
        code.src.Complex complex29 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex32 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex33 = complex29.multiply(complex32);
        code.src.Complex complex34 = complex21.add(complex33);
        code.src.Complex complex35 = complex18.add(complex34);
        double double36 = complex18.real;
        double double37 = complex18.real;
        code.src.Complex complex40 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex43 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex44 = complex40.multiply(complex43);
        java.lang.String str45 = complex40.toString();
        code.src.Complex complex48 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex51 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex52 = complex48.multiply(complex51);
        code.src.Complex complex53 = complex40.add(complex52);
        code.src.Complex complex56 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex59 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex60 = complex56.multiply(complex59);
        java.lang.String str61 = complex56.toString();
        code.src.Complex complex64 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex67 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex68 = complex64.multiply(complex67);
        code.src.Complex complex69 = complex56.add(complex68);
        code.src.Complex complex70 = complex53.add(complex69);
        code.src.Complex complex71 = complex18.sub(complex53);
        double double72 = complex53.imaginary;
        code.src.Complex complex73 = complex2.add(complex53);
        double double74 = complex2.imaginary;
        double double75 = complex2.imaginary;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(10.0,0.0)" + "'", str10, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(10.0,0.0)" + "'", str26, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 290.95719905143267d + "'", double36 == 290.95719905143267d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 290.95719905143267d + "'", double37 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "(10.0,0.0)" + "'", str45, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(10.0,0.0)" + "'", str61, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 437.56491210010614d + "'", double72 == 437.56491210010614d);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + (-0.0d) + "'", double74 == (-0.0d));
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + (-0.0d) + "'", double75 == (-0.0d));
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        code.src.Complex complex2 = code.src.Complex.polar(582.9143981028653d, (double) (byte) 10);
        code.src.Complex complex5 = new code.src.Complex(290.95719905143267d, (-213613.9212426372d));
        code.src.Complex complex6 = complex2.add(complex5);
        complex6.real = 922.8939813892761d;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex6);
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0500");
        code.src.Complex complex2 = code.src.Complex.polar((double) (byte) 0, (double) 'a');
        double double3 = complex2.abs();
        code.src.Complex complex6 = new code.src.Complex((double) 100, (double) 10.0f);
        java.lang.String str7 = complex6.toString();
        code.src.Complex complex8 = complex2.multiply(complex6);
        double double9 = complex6.real;
        code.src.Complex complex12 = new code.src.Complex((double) 100, (double) 10.0f);
        complex12.real = (byte) 1;
        complex12.imaginary = (short) 100;
        code.src.Complex complex19 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex22 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex23 = complex19.multiply(complex22);
        java.lang.String str24 = complex19.toString();
        code.src.Complex complex27 = new code.src.Complex((double) 10L, 0.0d);
        code.src.Complex complex30 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex31 = complex27.multiply(complex30);
        code.src.Complex complex32 = complex19.add(complex31);
        double double33 = complex32.real;
        code.src.Complex complex36 = code.src.Complex.polar((double) '4', (double) (byte) 1);
        code.src.Complex complex37 = complex32.multiply(complex36);
        code.src.Complex complex38 = complex12.multiply(complex32);
        code.src.Complex complex41 = code.src.Complex.polar((double) ' ', (double) (byte) 100);
        code.src.Complex complex42 = complex32.multiply(complex41);
        code.src.Complex complex43 = complex6.multiply(complex42);
        double double44 = complex43.imaginary;
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(100.0,10.0)" + "'", str7, "(100.0,10.0)");
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(10.0,0.0)" + "'", str24, "(10.0,0.0)");
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 290.95719905143267d + "'", double33 == 290.95719905143267d);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 887156.2400733333d + "'", double44 == 887156.2400733333d);
    }
}

