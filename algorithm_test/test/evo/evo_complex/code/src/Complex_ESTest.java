/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 05 02:36:56 GMT 2022
 */

package code.src;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import code.src.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.polar(735.904825389, (-888.1443));
      double double0 = complex0.abs();
      assertEquals((-442.0574194939477), complex0.real, 0.01);
      assertEquals(735.9048253889999, double0, 0.01);
      assertEquals((-588.3376155755865), complex0.imaginary, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.polar(1460.98114313, 1460.98114313);
      Complex complex1 = Complex.polar((-1446.5726656807083), (-1592.714));
      Complex complex2 = complex0.add(complex1);
      assertEquals(1442.669666763393, complex1.real, 0.01);
      assertEquals(98.56428363631792, complex2.abs(), 0.01);
      assertEquals((-98.48697684563155), complex2.imaginary, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.polar(1460.98114313, 1460.98114313);
      Complex complex1 = complex0.multiply(complex0);
      assertEquals(2134465.9005814414, complex1.abs(), 0.01);
      assertEquals(592165.6017022711, complex1.imaginary, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.polar(1460.98114313, 1460.98114313);
      Complex complex1 = new Complex(0.0, (-1592.714));
      Complex complex2 = complex1.multiply(complex0);
      assertEquals((-325994.83818734274), complex2.real, 0.01);
      assertEquals(2326925.1203991547, complex2.abs(), 0.01);
      assertEquals(2303976.5366469836, complex2.imaginary, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.polar(1460.98114313, 1460.98114313);
      Complex complex1 = new Complex(0.0, (-1592.714));
      Complex complex2 = complex1.sub(complex0);
      assertEquals(1446.5726656807083, complex2.real, 0.01);
      assertEquals(2004.7977728446217, complex2.abs(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex();
      Complex complex1 = complex0.multiply(complex0);
      assertNotSame(complex1, complex0);
      assertEquals(0.0, complex1.real, 0.01);
      assertEquals(0.0, complex1.abs(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex();
      Complex complex1 = complex0.add(complex0);
      assertNotSame(complex1, complex0);
      assertEquals(0.0, complex1.abs(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex();
      double double0 = complex0.abs();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex();
      // Undeclared exception!
      try { 
        complex0.sub((Complex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("code.src.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex();
      // Undeclared exception!
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("code.src.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.polar(1.0, 0.0);
      String string0 = complex0.toString();
      assertEquals("(1.0,0.0)", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.polar(1.0, 0.0);
      Complex complex1 = complex0.sub(complex0);
      assertEquals(1.0, complex0.real, 0.01);
      assertEquals(0.0, complex0.imaginary, 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(0.0, complex1.abs(), 0.01);
      assertEquals(0.0, complex1.imaginary, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex();
      // Undeclared exception!
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("code.src.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.polar(0.0, 0.0);
      assertEquals(0.0, complex0.real, 0.01);
      assertEquals(0.0, complex0.imaginary, 0.01);
  }
}
